//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;

/* Package-scope variables */
var moment;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jeeeyul_moment-with-langs/lib/moment-with-locales.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
;(function (global, factory) {                                                                                         // 1
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :                        // 2
    typeof define === 'function' && define.amd ? define(factory) :                                                     // 3
    global.moment = factory()                                                                                          // 4
}(this, function () { 'use strict';                                                                                    // 5
                                                                                                                       // 6
    var hookCallback;                                                                                                  // 7
                                                                                                                       // 8
    function utils_hooks__hooks () {                                                                                   // 9
        return hookCallback.apply(null, arguments);                                                                    // 10
    }                                                                                                                  // 11
                                                                                                                       // 12
    // This is done to register the method called with moment()                                                        // 13
    // without creating circular dependencies.                                                                         // 14
    function setHookCallback (callback) {                                                                              // 15
        hookCallback = callback;                                                                                       // 16
    }                                                                                                                  // 17
                                                                                                                       // 18
    function isArray(input) {                                                                                          // 19
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';                   // 20
    }                                                                                                                  // 21
                                                                                                                       // 22
    function isDate(input) {                                                                                           // 23
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';                     // 24
    }                                                                                                                  // 25
                                                                                                                       // 26
    function map(arr, fn) {                                                                                            // 27
        var res = [], i;                                                                                               // 28
        for (i = 0; i < arr.length; ++i) {                                                                             // 29
            res.push(fn(arr[i], i));                                                                                   // 30
        }                                                                                                              // 31
        return res;                                                                                                    // 32
    }                                                                                                                  // 33
                                                                                                                       // 34
    function hasOwnProp(a, b) {                                                                                        // 35
        return Object.prototype.hasOwnProperty.call(a, b);                                                             // 36
    }                                                                                                                  // 37
                                                                                                                       // 38
    function extend(a, b) {                                                                                            // 39
        for (var i in b) {                                                                                             // 40
            if (hasOwnProp(b, i)) {                                                                                    // 41
                a[i] = b[i];                                                                                           // 42
            }                                                                                                          // 43
        }                                                                                                              // 44
                                                                                                                       // 45
        if (hasOwnProp(b, 'toString')) {                                                                               // 46
            a.toString = b.toString;                                                                                   // 47
        }                                                                                                              // 48
                                                                                                                       // 49
        if (hasOwnProp(b, 'valueOf')) {                                                                                // 50
            a.valueOf = b.valueOf;                                                                                     // 51
        }                                                                                                              // 52
                                                                                                                       // 53
        return a;                                                                                                      // 54
    }                                                                                                                  // 55
                                                                                                                       // 56
    function create_utc__createUTC (input, format, locale, strict) {                                                   // 57
        return createLocalOrUTC(input, format, locale, strict, true).utc();                                            // 58
    }                                                                                                                  // 59
                                                                                                                       // 60
    function defaultParsingFlags() {                                                                                   // 61
        // We need to deep clone this object.                                                                          // 62
        return {                                                                                                       // 63
            empty           : false,                                                                                   // 64
            unusedTokens    : [],                                                                                      // 65
            unusedInput     : [],                                                                                      // 66
            overflow        : -2,                                                                                      // 67
            charsLeftOver   : 0,                                                                                       // 68
            nullInput       : false,                                                                                   // 69
            invalidMonth    : null,                                                                                    // 70
            invalidFormat   : false,                                                                                   // 71
            userInvalidated : false,                                                                                   // 72
            iso             : false                                                                                    // 73
        };                                                                                                             // 74
    }                                                                                                                  // 75
                                                                                                                       // 76
    function getParsingFlags(m) {                                                                                      // 77
        if (m._pf == null) {                                                                                           // 78
            m._pf = defaultParsingFlags();                                                                             // 79
        }                                                                                                              // 80
        return m._pf;                                                                                                  // 81
    }                                                                                                                  // 82
                                                                                                                       // 83
    function valid__isValid(m) {                                                                                       // 84
        if (m._isValid == null) {                                                                                      // 85
            var flags = getParsingFlags(m);                                                                            // 86
            m._isValid = !isNaN(m._d.getTime()) &&                                                                     // 87
                flags.overflow < 0 &&                                                                                  // 88
                !flags.empty &&                                                                                        // 89
                !flags.invalidMonth &&                                                                                 // 90
                !flags.invalidWeekday &&                                                                               // 91
                !flags.nullInput &&                                                                                    // 92
                !flags.invalidFormat &&                                                                                // 93
                !flags.userInvalidated;                                                                                // 94
                                                                                                                       // 95
            if (m._strict) {                                                                                           // 96
                m._isValid = m._isValid &&                                                                             // 97
                    flags.charsLeftOver === 0 &&                                                                       // 98
                    flags.unusedTokens.length === 0 &&                                                                 // 99
                    flags.bigHour === undefined;                                                                       // 100
            }                                                                                                          // 101
        }                                                                                                              // 102
        return m._isValid;                                                                                             // 103
    }                                                                                                                  // 104
                                                                                                                       // 105
    function valid__createInvalid (flags) {                                                                            // 106
        var m = create_utc__createUTC(NaN);                                                                            // 107
        if (flags != null) {                                                                                           // 108
            extend(getParsingFlags(m), flags);                                                                         // 109
        }                                                                                                              // 110
        else {                                                                                                         // 111
            getParsingFlags(m).userInvalidated = true;                                                                 // 112
        }                                                                                                              // 113
                                                                                                                       // 114
        return m;                                                                                                      // 115
    }                                                                                                                  // 116
                                                                                                                       // 117
    function isUndefined(input) {                                                                                      // 118
        return input === void 0;                                                                                       // 119
    }                                                                                                                  // 120
                                                                                                                       // 121
    // Plugins that add properties should also add the key here (null value),                                          // 122
    // so we can properly clone ourselves.                                                                             // 123
    var momentProperties = utils_hooks__hooks.momentProperties = [];                                                   // 124
                                                                                                                       // 125
    function copyConfig(to, from) {                                                                                    // 126
        var i, prop, val;                                                                                              // 127
                                                                                                                       // 128
        if (!isUndefined(from._isAMomentObject)) {                                                                     // 129
            to._isAMomentObject = from._isAMomentObject;                                                               // 130
        }                                                                                                              // 131
        if (!isUndefined(from._i)) {                                                                                   // 132
            to._i = from._i;                                                                                           // 133
        }                                                                                                              // 134
        if (!isUndefined(from._f)) {                                                                                   // 135
            to._f = from._f;                                                                                           // 136
        }                                                                                                              // 137
        if (!isUndefined(from._l)) {                                                                                   // 138
            to._l = from._l;                                                                                           // 139
        }                                                                                                              // 140
        if (!isUndefined(from._strict)) {                                                                              // 141
            to._strict = from._strict;                                                                                 // 142
        }                                                                                                              // 143
        if (!isUndefined(from._tzm)) {                                                                                 // 144
            to._tzm = from._tzm;                                                                                       // 145
        }                                                                                                              // 146
        if (!isUndefined(from._isUTC)) {                                                                               // 147
            to._isUTC = from._isUTC;                                                                                   // 148
        }                                                                                                              // 149
        if (!isUndefined(from._offset)) {                                                                              // 150
            to._offset = from._offset;                                                                                 // 151
        }                                                                                                              // 152
        if (!isUndefined(from._pf)) {                                                                                  // 153
            to._pf = getParsingFlags(from);                                                                            // 154
        }                                                                                                              // 155
        if (!isUndefined(from._locale)) {                                                                              // 156
            to._locale = from._locale;                                                                                 // 157
        }                                                                                                              // 158
                                                                                                                       // 159
        if (momentProperties.length > 0) {                                                                             // 160
            for (i in momentProperties) {                                                                              // 161
                prop = momentProperties[i];                                                                            // 162
                val = from[prop];                                                                                      // 163
                if (!isUndefined(val)) {                                                                               // 164
                    to[prop] = val;                                                                                    // 165
                }                                                                                                      // 166
            }                                                                                                          // 167
        }                                                                                                              // 168
                                                                                                                       // 169
        return to;                                                                                                     // 170
    }                                                                                                                  // 171
                                                                                                                       // 172
    var updateInProgress = false;                                                                                      // 173
                                                                                                                       // 174
    // Moment prototype object                                                                                         // 175
    function Moment(config) {                                                                                          // 176
        copyConfig(this, config);                                                                                      // 177
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);                                             // 178
        // Prevent infinite loop in case updateOffset creates new moment                                               // 179
        // objects.                                                                                                    // 180
        if (updateInProgress === false) {                                                                              // 181
            updateInProgress = true;                                                                                   // 182
            utils_hooks__hooks.updateOffset(this);                                                                     // 183
            updateInProgress = false;                                                                                  // 184
        }                                                                                                              // 185
    }                                                                                                                  // 186
                                                                                                                       // 187
    function isMoment (obj) {                                                                                          // 188
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);                                 // 189
    }                                                                                                                  // 190
                                                                                                                       // 191
    function absFloor (number) {                                                                                       // 192
        if (number < 0) {                                                                                              // 193
            return Math.ceil(number);                                                                                  // 194
        } else {                                                                                                       // 195
            return Math.floor(number);                                                                                 // 196
        }                                                                                                              // 197
    }                                                                                                                  // 198
                                                                                                                       // 199
    function toInt(argumentForCoercion) {                                                                              // 200
        var coercedNumber = +argumentForCoercion,                                                                      // 201
            value = 0;                                                                                                 // 202
                                                                                                                       // 203
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {                                                          // 204
            value = absFloor(coercedNumber);                                                                           // 205
        }                                                                                                              // 206
                                                                                                                       // 207
        return value;                                                                                                  // 208
    }                                                                                                                  // 209
                                                                                                                       // 210
    // compare two arrays, return the number of differences                                                            // 211
    function compareArrays(array1, array2, dontConvert) {                                                              // 212
        var len = Math.min(array1.length, array2.length),                                                              // 213
            lengthDiff = Math.abs(array1.length - array2.length),                                                      // 214
            diffs = 0,                                                                                                 // 215
            i;                                                                                                         // 216
        for (i = 0; i < len; i++) {                                                                                    // 217
            if ((dontConvert && array1[i] !== array2[i]) ||                                                            // 218
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {                                             // 219
                diffs++;                                                                                               // 220
            }                                                                                                          // 221
        }                                                                                                              // 222
        return diffs + lengthDiff;                                                                                     // 223
    }                                                                                                                  // 224
                                                                                                                       // 225
    function warn(msg) {                                                                                               // 226
        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&                                                // 227
                (typeof console !==  'undefined') && console.warn) {                                                   // 228
            console.warn('Deprecation warning: ' + msg);                                                               // 229
        }                                                                                                              // 230
    }                                                                                                                  // 231
                                                                                                                       // 232
    function deprecate(msg, fn) {                                                                                      // 233
        var firstTime = true;                                                                                          // 234
                                                                                                                       // 235
        return extend(function () {                                                                                    // 236
            if (firstTime) {                                                                                           // 237
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\n' + (new Error()).stack);
                firstTime = false;                                                                                     // 239
            }                                                                                                          // 240
            return fn.apply(this, arguments);                                                                          // 241
        }, fn);                                                                                                        // 242
    }                                                                                                                  // 243
                                                                                                                       // 244
    var deprecations = {};                                                                                             // 245
                                                                                                                       // 246
    function deprecateSimple(name, msg) {                                                                              // 247
        if (!deprecations[name]) {                                                                                     // 248
            warn(msg);                                                                                                 // 249
            deprecations[name] = true;                                                                                 // 250
        }                                                                                                              // 251
    }                                                                                                                  // 252
                                                                                                                       // 253
    utils_hooks__hooks.suppressDeprecationWarnings = false;                                                            // 254
                                                                                                                       // 255
    function isFunction(input) {                                                                                       // 256
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';             // 257
    }                                                                                                                  // 258
                                                                                                                       // 259
    function isObject(input) {                                                                                         // 260
        return Object.prototype.toString.call(input) === '[object Object]';                                            // 261
    }                                                                                                                  // 262
                                                                                                                       // 263
    function locale_set__set (config) {                                                                                // 264
        var prop, i;                                                                                                   // 265
        for (i in config) {                                                                                            // 266
            prop = config[i];                                                                                          // 267
            if (isFunction(prop)) {                                                                                    // 268
                this[i] = prop;                                                                                        // 269
            } else {                                                                                                   // 270
                this['_' + i] = prop;                                                                                  // 271
            }                                                                                                          // 272
        }                                                                                                              // 273
        this._config = config;                                                                                         // 274
        // Lenient ordinal parsing accepts just a number in addition to                                                // 275
        // number + (possibly) stuff coming from _ordinalParseLenient.                                                 // 276
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);                  // 277
    }                                                                                                                  // 278
                                                                                                                       // 279
    function mergeConfigs(parentConfig, childConfig) {                                                                 // 280
        var res = extend({}, parentConfig), prop;                                                                      // 281
        for (prop in childConfig) {                                                                                    // 282
            if (hasOwnProp(childConfig, prop)) {                                                                       // 283
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {                                     // 284
                    res[prop] = {};                                                                                    // 285
                    extend(res[prop], parentConfig[prop]);                                                             // 286
                    extend(res[prop], childConfig[prop]);                                                              // 287
                } else if (childConfig[prop] != null) {                                                                // 288
                    res[prop] = childConfig[prop];                                                                     // 289
                } else {                                                                                               // 290
                    delete res[prop];                                                                                  // 291
                }                                                                                                      // 292
            }                                                                                                          // 293
        }                                                                                                              // 294
        return res;                                                                                                    // 295
    }                                                                                                                  // 296
                                                                                                                       // 297
    function Locale(config) {                                                                                          // 298
        if (config != null) {                                                                                          // 299
            this.set(config);                                                                                          // 300
        }                                                                                                              // 301
    }                                                                                                                  // 302
                                                                                                                       // 303
    // internal storage for locale config files                                                                        // 304
    var locales = {};                                                                                                  // 305
    var globalLocale;                                                                                                  // 306
                                                                                                                       // 307
    function normalizeLocale(key) {                                                                                    // 308
        return key ? key.toLowerCase().replace('_', '-') : key;                                                        // 309
    }                                                                                                                  // 310
                                                                                                                       // 311
    // pick the locale from the array                                                                                  // 312
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each                       // 313
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {                                                                                     // 315
        var i = 0, j, next, locale, split;                                                                             // 316
                                                                                                                       // 317
        while (i < names.length) {                                                                                     // 318
            split = normalizeLocale(names[i]).split('-');                                                              // 319
            j = split.length;                                                                                          // 320
            next = normalizeLocale(names[i + 1]);                                                                      // 321
            next = next ? next.split('-') : null;                                                                      // 322
            while (j > 0) {                                                                                            // 323
                locale = loadLocale(split.slice(0, j).join('-'));                                                      // 324
                if (locale) {                                                                                          // 325
                    return locale;                                                                                     // 326
                }                                                                                                      // 327
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {                           // 328
                    //the next array item is better than a shallower substring of this one                             // 329
                    break;                                                                                             // 330
                }                                                                                                      // 331
                j--;                                                                                                   // 332
            }                                                                                                          // 333
            i++;                                                                                                       // 334
        }                                                                                                              // 335
        return null;                                                                                                   // 336
    }                                                                                                                  // 337
                                                                                                                       // 338
    function loadLocale(name) {                                                                                        // 339
        var oldLocale = null;                                                                                          // 340
        // TODO: Find a better way to register and load all the locales in Node                                        // 341
        if (!locales[name] && (typeof module !== 'undefined') &&                                                       // 342
                module && module.exports) {                                                                            // 343
            try {                                                                                                      // 344
                oldLocale = globalLocale._abbr;                                                                        // 345
                require('./locale/' + name);                                                                           // 346
                // because defineLocale currently also sets the global locale, we                                      // 347
                // want to undo that for lazy loaded locales                                                           // 348
                locale_locales__getSetGlobalLocale(oldLocale);                                                         // 349
            } catch (e) { }                                                                                            // 350
        }                                                                                                              // 351
        return locales[name];                                                                                          // 352
    }                                                                                                                  // 353
                                                                                                                       // 354
    // This function will load locale and then set the global locale.  If                                              // 355
    // no arguments are passed in, it will simply return the current global                                            // 356
    // locale key.                                                                                                     // 357
    function locale_locales__getSetGlobalLocale (key, values) {                                                        // 358
        var data;                                                                                                      // 359
        if (key) {                                                                                                     // 360
            if (isUndefined(values)) {                                                                                 // 361
                data = locale_locales__getLocale(key);                                                                 // 362
            }                                                                                                          // 363
            else {                                                                                                     // 364
                data = defineLocale(key, values);                                                                      // 365
            }                                                                                                          // 366
                                                                                                                       // 367
            if (data) {                                                                                                // 368
                // moment.duration._locale = moment._locale = data;                                                    // 369
                globalLocale = data;                                                                                   // 370
            }                                                                                                          // 371
        }                                                                                                              // 372
                                                                                                                       // 373
        return globalLocale._abbr;                                                                                     // 374
    }                                                                                                                  // 375
                                                                                                                       // 376
    function defineLocale (name, config) {                                                                             // 377
        if (config !== null) {                                                                                         // 378
            config.abbr = name;                                                                                        // 379
            if (locales[name] != null) {                                                                               // 380
                deprecateSimple('defineLocaleOverride',                                                                // 381
                        'use moment.updateLocale(localeName, config) to change ' +                                     // 382
                        'an existing locale. moment.defineLocale(localeName, ' +                                       // 383
                        'config) should only be used for creating a new locale');                                      // 384
                config = mergeConfigs(locales[name]._config, config);                                                  // 385
            } else if (config.parentLocale != null) {                                                                  // 386
                if (locales[config.parentLocale] != null) {                                                            // 387
                    config = mergeConfigs(locales[config.parentLocale]._config, config);                               // 388
                } else {                                                                                               // 389
                    // treat as if there is no base config                                                             // 390
                    deprecateSimple('parentLocaleUndefined',                                                           // 391
                            'specified parentLocale is not defined yet');                                              // 392
                }                                                                                                      // 393
            }                                                                                                          // 394
            locales[name] = new Locale(config);                                                                        // 395
                                                                                                                       // 396
            // backwards compat for now: also set the locale                                                           // 397
            locale_locales__getSetGlobalLocale(name);                                                                  // 398
                                                                                                                       // 399
            return locales[name];                                                                                      // 400
        } else {                                                                                                       // 401
            // useful for testing                                                                                      // 402
            delete locales[name];                                                                                      // 403
            return null;                                                                                               // 404
        }                                                                                                              // 405
    }                                                                                                                  // 406
                                                                                                                       // 407
    function updateLocale(name, config) {                                                                              // 408
        if (config != null) {                                                                                          // 409
            var locale;                                                                                                // 410
            if (locales[name] != null) {                                                                               // 411
                config = mergeConfigs(locales[name]._config, config);                                                  // 412
            }                                                                                                          // 413
            locale = new Locale(config);                                                                               // 414
            locale.parentLocale = locales[name];                                                                       // 415
            locales[name] = locale;                                                                                    // 416
                                                                                                                       // 417
            // backwards compat for now: also set the locale                                                           // 418
            locale_locales__getSetGlobalLocale(name);                                                                  // 419
        } else {                                                                                                       // 420
            // pass null for config to unupdate, useful for tests                                                      // 421
            if (locales[name] != null) {                                                                               // 422
                if (locales[name].parentLocale != null) {                                                              // 423
                    locales[name] = locales[name].parentLocale;                                                        // 424
                } else if (locales[name] != null) {                                                                    // 425
                    delete locales[name];                                                                              // 426
                }                                                                                                      // 427
            }                                                                                                          // 428
        }                                                                                                              // 429
        return locales[name];                                                                                          // 430
    }                                                                                                                  // 431
                                                                                                                       // 432
    // returns locale data                                                                                             // 433
    function locale_locales__getLocale (key) {                                                                         // 434
        var locale;                                                                                                    // 435
                                                                                                                       // 436
        if (key && key._locale && key._locale._abbr) {                                                                 // 437
            key = key._locale._abbr;                                                                                   // 438
        }                                                                                                              // 439
                                                                                                                       // 440
        if (!key) {                                                                                                    // 441
            return globalLocale;                                                                                       // 442
        }                                                                                                              // 443
                                                                                                                       // 444
        if (!isArray(key)) {                                                                                           // 445
            //short-circuit everything else                                                                            // 446
            locale = loadLocale(key);                                                                                  // 447
            if (locale) {                                                                                              // 448
                return locale;                                                                                         // 449
            }                                                                                                          // 450
            key = [key];                                                                                               // 451
        }                                                                                                              // 452
                                                                                                                       // 453
        return chooseLocale(key);                                                                                      // 454
    }                                                                                                                  // 455
                                                                                                                       // 456
    function locale_locales__listLocales() {                                                                           // 457
        return Object.keys(locales);                                                                                   // 458
    }                                                                                                                  // 459
                                                                                                                       // 460
    var aliases = {};                                                                                                  // 461
                                                                                                                       // 462
    function addUnitAlias (unit, shorthand) {                                                                          // 463
        var lowerCase = unit.toLowerCase();                                                                            // 464
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;                                     // 465
    }                                                                                                                  // 466
                                                                                                                       // 467
    function normalizeUnits(units) {                                                                                   // 468
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;                 // 469
    }                                                                                                                  // 470
                                                                                                                       // 471
    function normalizeObjectUnits(inputObject) {                                                                       // 472
        var normalizedInput = {},                                                                                      // 473
            normalizedProp,                                                                                            // 474
            prop;                                                                                                      // 475
                                                                                                                       // 476
        for (prop in inputObject) {                                                                                    // 477
            if (hasOwnProp(inputObject, prop)) {                                                                       // 478
                normalizedProp = normalizeUnits(prop);                                                                 // 479
                if (normalizedProp) {                                                                                  // 480
                    normalizedInput[normalizedProp] = inputObject[prop];                                               // 481
                }                                                                                                      // 482
            }                                                                                                          // 483
        }                                                                                                              // 484
                                                                                                                       // 485
        return normalizedInput;                                                                                        // 486
    }                                                                                                                  // 487
                                                                                                                       // 488
    function makeGetSet (unit, keepTime) {                                                                             // 489
        return function (value) {                                                                                      // 490
            if (value != null) {                                                                                       // 491
                get_set__set(this, unit, value);                                                                       // 492
                utils_hooks__hooks.updateOffset(this, keepTime);                                                       // 493
                return this;                                                                                           // 494
            } else {                                                                                                   // 495
                return get_set__get(this, unit);                                                                       // 496
            }                                                                                                          // 497
        };                                                                                                             // 498
    }                                                                                                                  // 499
                                                                                                                       // 500
    function get_set__get (mom, unit) {                                                                                // 501
        return mom.isValid() ?                                                                                         // 502
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;                                                  // 503
    }                                                                                                                  // 504
                                                                                                                       // 505
    function get_set__set (mom, unit, value) {                                                                         // 506
        if (mom.isValid()) {                                                                                           // 507
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);                                                   // 508
        }                                                                                                              // 509
    }                                                                                                                  // 510
                                                                                                                       // 511
    // MOMENTS                                                                                                         // 512
                                                                                                                       // 513
    function getSet (units, value) {                                                                                   // 514
        var unit;                                                                                                      // 515
        if (typeof units === 'object') {                                                                               // 516
            for (unit in units) {                                                                                      // 517
                this.set(unit, units[unit]);                                                                           // 518
            }                                                                                                          // 519
        } else {                                                                                                       // 520
            units = normalizeUnits(units);                                                                             // 521
            if (isFunction(this[units])) {                                                                             // 522
                return this[units](value);                                                                             // 523
            }                                                                                                          // 524
        }                                                                                                              // 525
        return this;                                                                                                   // 526
    }                                                                                                                  // 527
                                                                                                                       // 528
    function zeroFill(number, targetLength, forceSign) {                                                               // 529
        var absNumber = '' + Math.abs(number),                                                                         // 530
            zerosToFill = targetLength - absNumber.length,                                                             // 531
            sign = number >= 0;                                                                                        // 532
        return (sign ? (forceSign ? '+' : '') : '-') +                                                                 // 533
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;                                   // 534
    }                                                                                                                  // 535
                                                                                                                       // 536
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
                                                                                                                       // 538
    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;                                          // 539
                                                                                                                       // 540
    var formatFunctions = {};                                                                                          // 541
                                                                                                                       // 542
    var formatTokenFunctions = {};                                                                                     // 543
                                                                                                                       // 544
    // token:    'M'                                                                                                   // 545
    // padded:   ['MM', 2]                                                                                             // 546
    // ordinal:  'Mo'                                                                                                  // 547
    // callback: function () { this.month() + 1 }                                                                      // 548
    function addFormatToken (token, padded, ordinal, callback) {                                                       // 549
        var func = callback;                                                                                           // 550
        if (typeof callback === 'string') {                                                                            // 551
            func = function () {                                                                                       // 552
                return this[callback]();                                                                               // 553
            };                                                                                                         // 554
        }                                                                                                              // 555
        if (token) {                                                                                                   // 556
            formatTokenFunctions[token] = func;                                                                        // 557
        }                                                                                                              // 558
        if (padded) {                                                                                                  // 559
            formatTokenFunctions[padded[0]] = function () {                                                            // 560
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);                                    // 561
            };                                                                                                         // 562
        }                                                                                                              // 563
        if (ordinal) {                                                                                                 // 564
            formatTokenFunctions[ordinal] = function () {                                                              // 565
                return this.localeData().ordinal(func.apply(this, arguments), token);                                  // 566
            };                                                                                                         // 567
        }                                                                                                              // 568
    }                                                                                                                  // 569
                                                                                                                       // 570
    function removeFormattingTokens(input) {                                                                           // 571
        if (input.match(/\[[\s\S]/)) {                                                                                 // 572
            return input.replace(/^\[|\]$/g, '');                                                                      // 573
        }                                                                                                              // 574
        return input.replace(/\\/g, '');                                                                               // 575
    }                                                                                                                  // 576
                                                                                                                       // 577
    function makeFormatFunction(format) {                                                                              // 578
        var array = format.match(formattingTokens), i, length;                                                         // 579
                                                                                                                       // 580
        for (i = 0, length = array.length; i < length; i++) {                                                          // 581
            if (formatTokenFunctions[array[i]]) {                                                                      // 582
                array[i] = formatTokenFunctions[array[i]];                                                             // 583
            } else {                                                                                                   // 584
                array[i] = removeFormattingTokens(array[i]);                                                           // 585
            }                                                                                                          // 586
        }                                                                                                              // 587
                                                                                                                       // 588
        return function (mom) {                                                                                        // 589
            var output = '';                                                                                           // 590
            for (i = 0; i < length; i++) {                                                                             // 591
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];                        // 592
            }                                                                                                          // 593
            return output;                                                                                             // 594
        };                                                                                                             // 595
    }                                                                                                                  // 596
                                                                                                                       // 597
    // format date using native date object                                                                            // 598
    function formatMoment(m, format) {                                                                                 // 599
        if (!m.isValid()) {                                                                                            // 600
            return m.localeData().invalidDate();                                                                       // 601
        }                                                                                                              // 602
                                                                                                                       // 603
        format = expandFormat(format, m.localeData());                                                                 // 604
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);                               // 605
                                                                                                                       // 606
        return formatFunctions[format](m);                                                                             // 607
    }                                                                                                                  // 608
                                                                                                                       // 609
    function expandFormat(format, locale) {                                                                            // 610
        var i = 5;                                                                                                     // 611
                                                                                                                       // 612
        function replaceLongDateFormatTokens(input) {                                                                  // 613
            return locale.longDateFormat(input) || input;                                                              // 614
        }                                                                                                              // 615
                                                                                                                       // 616
        localFormattingTokens.lastIndex = 0;                                                                           // 617
        while (i >= 0 && localFormattingTokens.test(format)) {                                                         // 618
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);                               // 619
            localFormattingTokens.lastIndex = 0;                                                                       // 620
            i -= 1;                                                                                                    // 621
        }                                                                                                              // 622
                                                                                                                       // 623
        return format;                                                                                                 // 624
    }                                                                                                                  // 625
                                                                                                                       // 626
    var match1         = /\d/;            //       0 - 9                                                               // 627
    var match2         = /\d\d/;          //      00 - 99                                                              // 628
    var match3         = /\d{3}/;         //     000 - 999                                                             // 629
    var match4         = /\d{4}/;         //    0000 - 9999                                                            // 630
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999                                                          // 631
    var match1to2      = /\d\d?/;         //       0 - 99                                                              // 632
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999                                                            // 633
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999                                                          // 634
    var match1to3      = /\d{1,3}/;       //       0 - 999                                                             // 635
    var match1to4      = /\d{1,4}/;       //       0 - 9999                                                            // 636
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999                                                          // 637
                                                                                                                       // 638
    var matchUnsigned  = /\d+/;           //       0 - inf                                                             // 639
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf                                                             // 640
                                                                                                                       // 641
    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z                                       // 642
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z                        // 643
                                                                                                                       // 644
    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123                                            // 645
                                                                                                                       // 646
    // any word (or two) characters or numbers including two/three word month in arabic.                               // 647
    // includes scottish gaelic two word and hyphenated months                                                         // 648
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
                                                                                                                       // 650
                                                                                                                       // 651
    var regexes = {};                                                                                                  // 652
                                                                                                                       // 653
    function addRegexToken (token, regex, strictRegex) {                                                               // 654
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {                                 // 655
            return (isStrict && strictRegex) ? strictRegex : regex;                                                    // 656
        };                                                                                                             // 657
    }                                                                                                                  // 658
                                                                                                                       // 659
    function getParseRegexForToken (token, config) {                                                                   // 660
        if (!hasOwnProp(regexes, token)) {                                                                             // 661
            return new RegExp(unescapeFormat(token));                                                                  // 662
        }                                                                                                              // 663
                                                                                                                       // 664
        return regexes[token](config._strict, config._locale);                                                         // 665
    }                                                                                                                  // 666
                                                                                                                       // 667
    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript            // 668
    function unescapeFormat(s) {                                                                                       // 669
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;                                                                               // 671
        }));                                                                                                           // 672
    }                                                                                                                  // 673
                                                                                                                       // 674
    function regexEscape(s) {                                                                                          // 675
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');                                                            // 676
    }                                                                                                                  // 677
                                                                                                                       // 678
    var tokens = {};                                                                                                   // 679
                                                                                                                       // 680
    function addParseToken (token, callback) {                                                                         // 681
        var i, func = callback;                                                                                        // 682
        if (typeof token === 'string') {                                                                               // 683
            token = [token];                                                                                           // 684
        }                                                                                                              // 685
        if (typeof callback === 'number') {                                                                            // 686
            func = function (input, array) {                                                                           // 687
                array[callback] = toInt(input);                                                                        // 688
            };                                                                                                         // 689
        }                                                                                                              // 690
        for (i = 0; i < token.length; i++) {                                                                           // 691
            tokens[token[i]] = func;                                                                                   // 692
        }                                                                                                              // 693
    }                                                                                                                  // 694
                                                                                                                       // 695
    function addWeekParseToken (token, callback) {                                                                     // 696
        addParseToken(token, function (input, array, config, token) {                                                  // 697
            config._w = config._w || {};                                                                               // 698
            callback(input, config._w, config, token);                                                                 // 699
        });                                                                                                            // 700
    }                                                                                                                  // 701
                                                                                                                       // 702
    function addTimeToArrayFromToken(token, input, config) {                                                           // 703
        if (input != null && hasOwnProp(tokens, token)) {                                                              // 704
            tokens[token](input, config._a, config, token);                                                            // 705
        }                                                                                                              // 706
    }                                                                                                                  // 707
                                                                                                                       // 708
    var YEAR = 0;                                                                                                      // 709
    var MONTH = 1;                                                                                                     // 710
    var DATE = 2;                                                                                                      // 711
    var HOUR = 3;                                                                                                      // 712
    var MINUTE = 4;                                                                                                    // 713
    var SECOND = 5;                                                                                                    // 714
    var MILLISECOND = 6;                                                                                               // 715
    var WEEK = 7;                                                                                                      // 716
    var WEEKDAY = 8;                                                                                                   // 717
                                                                                                                       // 718
    function daysInMonth(year, month) {                                                                                // 719
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();                                                    // 720
    }                                                                                                                  // 721
                                                                                                                       // 722
    // FORMATTING                                                                                                      // 723
                                                                                                                       // 724
    addFormatToken('M', ['MM', 2], 'Mo', function () {                                                                 // 725
        return this.month() + 1;                                                                                       // 726
    });                                                                                                                // 727
                                                                                                                       // 728
    addFormatToken('MMM', 0, 0, function (format) {                                                                    // 729
        return this.localeData().monthsShort(this, format);                                                            // 730
    });                                                                                                                // 731
                                                                                                                       // 732
    addFormatToken('MMMM', 0, 0, function (format) {                                                                   // 733
        return this.localeData().months(this, format);                                                                 // 734
    });                                                                                                                // 735
                                                                                                                       // 736
    // ALIASES                                                                                                         // 737
                                                                                                                       // 738
    addUnitAlias('month', 'M');                                                                                        // 739
                                                                                                                       // 740
    // PARSING                                                                                                         // 741
                                                                                                                       // 742
    addRegexToken('M',    match1to2);                                                                                  // 743
    addRegexToken('MM',   match1to2, match2);                                                                          // 744
    addRegexToken('MMM',  function (isStrict, locale) {                                                                // 745
        return locale.monthsShortRegex(isStrict);                                                                      // 746
    });                                                                                                                // 747
    addRegexToken('MMMM', function (isStrict, locale) {                                                                // 748
        return locale.monthsRegex(isStrict);                                                                           // 749
    });                                                                                                                // 750
                                                                                                                       // 751
    addParseToken(['M', 'MM'], function (input, array) {                                                               // 752
        array[MONTH] = toInt(input) - 1;                                                                               // 753
    });                                                                                                                // 754
                                                                                                                       // 755
    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {                                            // 756
        var month = config._locale.monthsParse(input, token, config._strict);                                          // 757
        // if we didn't find a month name, mark the date as invalid.                                                   // 758
        if (month != null) {                                                                                           // 759
            array[MONTH] = month;                                                                                      // 760
        } else {                                                                                                       // 761
            getParsingFlags(config).invalidMonth = input;                                                              // 762
        }                                                                                                              // 763
    });                                                                                                                // 764
                                                                                                                       // 765
    // LOCALES                                                                                                         // 766
                                                                                                                       // 767
    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/;                                                           // 768
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {                                                                                // 770
        return isArray(this._months) ? this._months[m.month()] :                                                       // 771
            this._months[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];                          // 772
    }                                                                                                                  // 773
                                                                                                                       // 774
    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');                       // 775
    function localeMonthsShort (m, format) {                                                                           // 776
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :                                             // 777
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];                     // 778
    }                                                                                                                  // 779
                                                                                                                       // 780
    function localeMonthsParse (monthName, format, strict) {                                                           // 781
        var i, mom, regex;                                                                                             // 782
                                                                                                                       // 783
        if (!this._monthsParse) {                                                                                      // 784
            this._monthsParse = [];                                                                                    // 785
            this._longMonthsParse = [];                                                                                // 786
            this._shortMonthsParse = [];                                                                               // 787
        }                                                                                                              // 788
                                                                                                                       // 789
        for (i = 0; i < 12; i++) {                                                                                     // 790
            // make the regex if we don't have it already                                                              // 791
            mom = create_utc__createUTC([2000, i]);                                                                    // 792
            if (strict && !this._longMonthsParse[i]) {                                                                 // 793
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');         // 794
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');   // 795
            }                                                                                                          // 796
            if (!strict && !this._monthsParse[i]) {                                                                    // 797
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');                                 // 798
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');                                        // 799
            }                                                                                                          // 800
            // test the regex                                                                                          // 801
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {                             // 802
                return i;                                                                                              // 803
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {                      // 804
                return i;                                                                                              // 805
            } else if (!strict && this._monthsParse[i].test(monthName)) {                                              // 806
                return i;                                                                                              // 807
            }                                                                                                          // 808
        }                                                                                                              // 809
    }                                                                                                                  // 810
                                                                                                                       // 811
    // MOMENTS                                                                                                         // 812
                                                                                                                       // 813
    function setMonth (mom, value) {                                                                                   // 814
        var dayOfMonth;                                                                                                // 815
                                                                                                                       // 816
        if (!mom.isValid()) {                                                                                          // 817
            // No op                                                                                                   // 818
            return mom;                                                                                                // 819
        }                                                                                                              // 820
                                                                                                                       // 821
        if (typeof value === 'string') {                                                                               // 822
            if (/^\d+$/.test(value)) {                                                                                 // 823
                value = toInt(value);                                                                                  // 824
            } else {                                                                                                   // 825
                value = mom.localeData().monthsParse(value);                                                           // 826
                // TODO: Another silent failure?                                                                       // 827
                if (typeof value !== 'number') {                                                                       // 828
                    return mom;                                                                                        // 829
                }                                                                                                      // 830
            }                                                                                                          // 831
        }                                                                                                              // 832
                                                                                                                       // 833
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));                                             // 834
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);                                        // 835
        return mom;                                                                                                    // 836
    }                                                                                                                  // 837
                                                                                                                       // 838
    function getSetMonth (value) {                                                                                     // 839
        if (value != null) {                                                                                           // 840
            setMonth(this, value);                                                                                     // 841
            utils_hooks__hooks.updateOffset(this, true);                                                               // 842
            return this;                                                                                               // 843
        } else {                                                                                                       // 844
            return get_set__get(this, 'Month');                                                                        // 845
        }                                                                                                              // 846
    }                                                                                                                  // 847
                                                                                                                       // 848
    function getDaysInMonth () {                                                                                       // 849
        return daysInMonth(this.year(), this.month());                                                                 // 850
    }                                                                                                                  // 851
                                                                                                                       // 852
    var defaultMonthsShortRegex = matchWord;                                                                           // 853
    function monthsShortRegex (isStrict) {                                                                             // 854
        if (this._monthsParseExact) {                                                                                  // 855
            if (!hasOwnProp(this, '_monthsRegex')) {                                                                   // 856
                computeMonthsParse.call(this);                                                                         // 857
            }                                                                                                          // 858
            if (isStrict) {                                                                                            // 859
                return this._monthsShortStrictRegex;                                                                   // 860
            } else {                                                                                                   // 861
                return this._monthsShortRegex;                                                                         // 862
            }                                                                                                          // 863
        } else {                                                                                                       // 864
            return this._monthsShortStrictRegex && isStrict ?                                                          // 865
                this._monthsShortStrictRegex : this._monthsShortRegex;                                                 // 866
        }                                                                                                              // 867
    }                                                                                                                  // 868
                                                                                                                       // 869
    var defaultMonthsRegex = matchWord;                                                                                // 870
    function monthsRegex (isStrict) {                                                                                  // 871
        if (this._monthsParseExact) {                                                                                  // 872
            if (!hasOwnProp(this, '_monthsRegex')) {                                                                   // 873
                computeMonthsParse.call(this);                                                                         // 874
            }                                                                                                          // 875
            if (isStrict) {                                                                                            // 876
                return this._monthsStrictRegex;                                                                        // 877
            } else {                                                                                                   // 878
                return this._monthsRegex;                                                                              // 879
            }                                                                                                          // 880
        } else {                                                                                                       // 881
            return this._monthsStrictRegex && isStrict ?                                                               // 882
                this._monthsStrictRegex : this._monthsRegex;                                                           // 883
        }                                                                                                              // 884
    }                                                                                                                  // 885
                                                                                                                       // 886
    function computeMonthsParse () {                                                                                   // 887
        function cmpLenRev(a, b) {                                                                                     // 888
            return b.length - a.length;                                                                                // 889
        }                                                                                                              // 890
                                                                                                                       // 891
        var shortPieces = [], longPieces = [], mixedPieces = [],                                                       // 892
            i, mom;                                                                                                    // 893
        for (i = 0; i < 12; i++) {                                                                                     // 894
            // make the regex if we don't have it already                                                              // 895
            mom = create_utc__createUTC([2000, i]);                                                                    // 896
            shortPieces.push(this.monthsShort(mom, ''));                                                               // 897
            longPieces.push(this.months(mom, ''));                                                                     // 898
            mixedPieces.push(this.months(mom, ''));                                                                    // 899
            mixedPieces.push(this.monthsShort(mom, ''));                                                               // 900
        }                                                                                                              // 901
        // Sorting makes sure if one month (or abbr) is a prefix of another it                                         // 902
        // will match the longer piece.                                                                                // 903
        shortPieces.sort(cmpLenRev);                                                                                   // 904
        longPieces.sort(cmpLenRev);                                                                                    // 905
        mixedPieces.sort(cmpLenRev);                                                                                   // 906
        for (i = 0; i < 12; i++) {                                                                                     // 907
            shortPieces[i] = regexEscape(shortPieces[i]);                                                              // 908
            longPieces[i] = regexEscape(longPieces[i]);                                                                // 909
            mixedPieces[i] = regexEscape(mixedPieces[i]);                                                              // 910
        }                                                                                                              // 911
                                                                                                                       // 912
        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');                                       // 913
        this._monthsShortRegex = this._monthsRegex;                                                                    // 914
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')$', 'i');                                 // 915
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')$', 'i');                           // 916
    }                                                                                                                  // 917
                                                                                                                       // 918
    function checkOverflow (m) {                                                                                       // 919
        var overflow;                                                                                                  // 920
        var a = m._a;                                                                                                  // 921
                                                                                                                       // 922
        if (a && getParsingFlags(m).overflow === -2) {                                                                 // 923
            overflow =                                                                                                 // 924
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :                                                   // 925
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :                         // 926
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :                                                  // 928
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :                                                  // 929
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :                                             // 930
                -1;                                                                                                    // 931
                                                                                                                       // 932
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {                       // 933
                overflow = DATE;                                                                                       // 934
            }                                                                                                          // 935
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {                                                // 936
                overflow = WEEK;                                                                                       // 937
            }                                                                                                          // 938
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {                                              // 939
                overflow = WEEKDAY;                                                                                    // 940
            }                                                                                                          // 941
                                                                                                                       // 942
            getParsingFlags(m).overflow = overflow;                                                                    // 943
        }                                                                                                              // 944
                                                                                                                       // 945
        return m;                                                                                                      // 946
    }                                                                                                                  // 947
                                                                                                                       // 948
    // iso 8601 regex                                                                                                  // 949
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)       // 950
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
                                                                                                                       // 953
    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;                                                                             // 954
                                                                                                                       // 955
    var isoDates = [                                                                                                   // 956
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],                                                                       // 957
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],                                                                             // 958
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],                                                                            // 959
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],                                                                          // 960
        ['YYYY-DDD', /\d{4}-\d{3}/],                                                                                   // 961
        ['YYYY-MM', /\d{4}-\d\d/, false],                                                                              // 962
        ['YYYYYYMMDD', /[+-]\d{10}/],                                                                                  // 963
        ['YYYYMMDD', /\d{8}/],                                                                                         // 964
        // YYYYMM is NOT allowed by the standard                                                                       // 965
        ['GGGG[W]WWE', /\d{4}W\d{3}/],                                                                                 // 966
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],                                                                           // 967
        ['YYYYDDD', /\d{7}/]                                                                                           // 968
    ];                                                                                                                 // 969
                                                                                                                       // 970
    // iso time formats and regexes                                                                                    // 971
    var isoTimes = [                                                                                                   // 972
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],                                                                      // 973
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],                                                                       // 974
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],                                                                                // 975
        ['HH:mm', /\d\d:\d\d/],                                                                                        // 976
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],                                                                          // 977
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],                                                                           // 978
        ['HHmmss', /\d\d\d\d\d\d/],                                                                                    // 979
        ['HHmm', /\d\d\d\d/],                                                                                          // 980
        ['HH', /\d\d/]                                                                                                 // 981
    ];                                                                                                                 // 982
                                                                                                                       // 983
    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;                                                                       // 984
                                                                                                                       // 985
    // date from iso format                                                                                            // 986
    function configFromISO(config) {                                                                                   // 987
        var i, l,                                                                                                      // 988
            string = config._i,                                                                                        // 989
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),                                       // 990
            allowTime, dateFormat, timeFormat, tzFormat;                                                               // 991
                                                                                                                       // 992
        if (match) {                                                                                                   // 993
            getParsingFlags(config).iso = true;                                                                        // 994
                                                                                                                       // 995
            for (i = 0, l = isoDates.length; i < l; i++) {                                                             // 996
                if (isoDates[i][1].exec(match[1])) {                                                                   // 997
                    dateFormat = isoDates[i][0];                                                                       // 998
                    allowTime = isoDates[i][2] !== false;                                                              // 999
                    break;                                                                                             // 1000
                }                                                                                                      // 1001
            }                                                                                                          // 1002
            if (dateFormat == null) {                                                                                  // 1003
                config._isValid = false;                                                                               // 1004
                return;                                                                                                // 1005
            }                                                                                                          // 1006
            if (match[3]) {                                                                                            // 1007
                for (i = 0, l = isoTimes.length; i < l; i++) {                                                         // 1008
                    if (isoTimes[i][1].exec(match[3])) {                                                               // 1009
                        // match[2] should be 'T' or space                                                             // 1010
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];                                               // 1011
                        break;                                                                                         // 1012
                    }                                                                                                  // 1013
                }                                                                                                      // 1014
                if (timeFormat == null) {                                                                              // 1015
                    config._isValid = false;                                                                           // 1016
                    return;                                                                                            // 1017
                }                                                                                                      // 1018
            }                                                                                                          // 1019
            if (!allowTime && timeFormat != null) {                                                                    // 1020
                config._isValid = false;                                                                               // 1021
                return;                                                                                                // 1022
            }                                                                                                          // 1023
            if (match[4]) {                                                                                            // 1024
                if (tzRegex.exec(match[4])) {                                                                          // 1025
                    tzFormat = 'Z';                                                                                    // 1026
                } else {                                                                                               // 1027
                    config._isValid = false;                                                                           // 1028
                    return;                                                                                            // 1029
                }                                                                                                      // 1030
            }                                                                                                          // 1031
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');                                            // 1032
            configFromStringAndFormat(config);                                                                         // 1033
        } else {                                                                                                       // 1034
            config._isValid = false;                                                                                   // 1035
        }                                                                                                              // 1036
    }                                                                                                                  // 1037
                                                                                                                       // 1038
    // date from iso format or fallback                                                                                // 1039
    function configFromString(config) {                                                                                // 1040
        var matched = aspNetJsonRegex.exec(config._i);                                                                 // 1041
                                                                                                                       // 1042
        if (matched !== null) {                                                                                        // 1043
            config._d = new Date(+matched[1]);                                                                         // 1044
            return;                                                                                                    // 1045
        }                                                                                                              // 1046
                                                                                                                       // 1047
        configFromISO(config);                                                                                         // 1048
        if (config._isValid === false) {                                                                               // 1049
            delete config._isValid;                                                                                    // 1050
            utils_hooks__hooks.createFromInputFallback(config);                                                        // 1051
        }                                                                                                              // 1052
    }                                                                                                                  // 1053
                                                                                                                       // 1054
    utils_hooks__hooks.createFromInputFallback = deprecate(                                                            // 1055
        'moment construction falls back to js Date. This is ' +                                                        // 1056
        'discouraged and will be removed in upcoming major ' +                                                         // 1057
        'release. Please refer to ' +                                                                                  // 1058
        'https://github.com/moment/moment/issues/1407 for more info.',                                                 // 1059
        function (config) {                                                                                            // 1060
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));                                          // 1061
        }                                                                                                              // 1062
    );                                                                                                                 // 1063
                                                                                                                       // 1064
    function createDate (y, m, d, h, M, s, ms) {                                                                       // 1065
        //can't just apply() to create a date:                                                                         // 1066
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);                                                                     // 1068
                                                                                                                       // 1069
        //the date constructor remaps years 0-99 to 1900-1999                                                          // 1070
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {                                                       // 1071
            date.setFullYear(y);                                                                                       // 1072
        }                                                                                                              // 1073
        return date;                                                                                                   // 1074
    }                                                                                                                  // 1075
                                                                                                                       // 1076
    function createUTCDate (y) {                                                                                       // 1077
        var date = new Date(Date.UTC.apply(null, arguments));                                                          // 1078
                                                                                                                       // 1079
        //the Date.UTC function remaps years 0-99 to 1900-1999                                                         // 1080
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {                                                    // 1081
            date.setUTCFullYear(y);                                                                                    // 1082
        }                                                                                                              // 1083
        return date;                                                                                                   // 1084
    }                                                                                                                  // 1085
                                                                                                                       // 1086
    // FORMATTING                                                                                                      // 1087
                                                                                                                       // 1088
    addFormatToken('Y', 0, 0, function () {                                                                            // 1089
        var y = this.year();                                                                                           // 1090
        return y <= 9999 ? '' + y : '+' + y;                                                                           // 1091
    });                                                                                                                // 1092
                                                                                                                       // 1093
    addFormatToken(0, ['YY', 2], 0, function () {                                                                      // 1094
        return this.year() % 100;                                                                                      // 1095
    });                                                                                                                // 1096
                                                                                                                       // 1097
    addFormatToken(0, ['YYYY',   4],       0, 'year');                                                                 // 1098
    addFormatToken(0, ['YYYYY',  5],       0, 'year');                                                                 // 1099
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');                                                                 // 1100
                                                                                                                       // 1101
    // ALIASES                                                                                                         // 1102
                                                                                                                       // 1103
    addUnitAlias('year', 'y');                                                                                         // 1104
                                                                                                                       // 1105
    // PARSING                                                                                                         // 1106
                                                                                                                       // 1107
    addRegexToken('Y',      matchSigned);                                                                              // 1108
    addRegexToken('YY',     match1to2, match2);                                                                        // 1109
    addRegexToken('YYYY',   match1to4, match4);                                                                        // 1110
    addRegexToken('YYYYY',  match1to6, match6);                                                                        // 1111
    addRegexToken('YYYYYY', match1to6, match6);                                                                        // 1112
                                                                                                                       // 1113
    addParseToken(['YYYYY', 'YYYYYY'], YEAR);                                                                          // 1114
    addParseToken('YYYY', function (input, array) {                                                                    // 1115
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);                 // 1116
    });                                                                                                                // 1117
    addParseToken('YY', function (input, array) {                                                                      // 1118
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);                                                     // 1119
    });                                                                                                                // 1120
    addParseToken('Y', function (input, array) {                                                                       // 1121
        array[YEAR] = parseInt(input, 10);                                                                             // 1122
    });                                                                                                                // 1123
                                                                                                                       // 1124
    // HELPERS                                                                                                         // 1125
                                                                                                                       // 1126
    function daysInYear(year) {                                                                                        // 1127
        return isLeapYear(year) ? 366 : 365;                                                                           // 1128
    }                                                                                                                  // 1129
                                                                                                                       // 1130
    function isLeapYear(year) {                                                                                        // 1131
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;                                               // 1132
    }                                                                                                                  // 1133
                                                                                                                       // 1134
    // HOOKS                                                                                                           // 1135
                                                                                                                       // 1136
    utils_hooks__hooks.parseTwoDigitYear = function (input) {                                                          // 1137
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);                                                       // 1138
    };                                                                                                                 // 1139
                                                                                                                       // 1140
    // MOMENTS                                                                                                         // 1141
                                                                                                                       // 1142
    var getSetYear = makeGetSet('FullYear', false);                                                                    // 1143
                                                                                                                       // 1144
    function getIsLeapYear () {                                                                                        // 1145
        return isLeapYear(this.year());                                                                                // 1146
    }                                                                                                                  // 1147
                                                                                                                       // 1148
    // start-of-first-week - start-of-year                                                                             // 1149
    function firstWeekOffset(year, dow, doy) {                                                                         // 1150
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)                    // 1151
            fwd = 7 + dow - doy,                                                                                       // 1152
            // first-week day local weekday -- which local weekday is fwd                                              // 1153
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;                                           // 1154
                                                                                                                       // 1155
        return -fwdlw + fwd - 1;                                                                                       // 1156
    }                                                                                                                  // 1157
                                                                                                                       // 1158
    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday          // 1159
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {                                                       // 1160
        var localWeekday = (7 + weekday - dow) % 7,                                                                    // 1161
            weekOffset = firstWeekOffset(year, dow, doy),                                                              // 1162
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,                                                // 1163
            resYear, resDayOfYear;                                                                                     // 1164
                                                                                                                       // 1165
        if (dayOfYear <= 0) {                                                                                          // 1166
            resYear = year - 1;                                                                                        // 1167
            resDayOfYear = daysInYear(resYear) + dayOfYear;                                                            // 1168
        } else if (dayOfYear > daysInYear(year)) {                                                                     // 1169
            resYear = year + 1;                                                                                        // 1170
            resDayOfYear = dayOfYear - daysInYear(year);                                                               // 1171
        } else {                                                                                                       // 1172
            resYear = year;                                                                                            // 1173
            resDayOfYear = dayOfYear;                                                                                  // 1174
        }                                                                                                              // 1175
                                                                                                                       // 1176
        return {                                                                                                       // 1177
            year: resYear,                                                                                             // 1178
            dayOfYear: resDayOfYear                                                                                    // 1179
        };                                                                                                             // 1180
    }                                                                                                                  // 1181
                                                                                                                       // 1182
    function weekOfYear(mom, dow, doy) {                                                                               // 1183
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),                                                        // 1184
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,                                             // 1185
            resWeek, resYear;                                                                                          // 1186
                                                                                                                       // 1187
        if (week < 1) {                                                                                                // 1188
            resYear = mom.year() - 1;                                                                                  // 1189
            resWeek = week + weeksInYear(resYear, dow, doy);                                                           // 1190
        } else if (week > weeksInYear(mom.year(), dow, doy)) {                                                         // 1191
            resWeek = week - weeksInYear(mom.year(), dow, doy);                                                        // 1192
            resYear = mom.year() + 1;                                                                                  // 1193
        } else {                                                                                                       // 1194
            resYear = mom.year();                                                                                      // 1195
            resWeek = week;                                                                                            // 1196
        }                                                                                                              // 1197
                                                                                                                       // 1198
        return {                                                                                                       // 1199
            week: resWeek,                                                                                             // 1200
            year: resYear                                                                                              // 1201
        };                                                                                                             // 1202
    }                                                                                                                  // 1203
                                                                                                                       // 1204
    function weeksInYear(year, dow, doy) {                                                                             // 1205
        var weekOffset = firstWeekOffset(year, dow, doy),                                                              // 1206
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);                                                      // 1207
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;                                                   // 1208
    }                                                                                                                  // 1209
                                                                                                                       // 1210
    // Pick the first defined of two or three arguments.                                                               // 1211
    function defaults(a, b, c) {                                                                                       // 1212
        if (a != null) {                                                                                               // 1213
            return a;                                                                                                  // 1214
        }                                                                                                              // 1215
        if (b != null) {                                                                                               // 1216
            return b;                                                                                                  // 1217
        }                                                                                                              // 1218
        return c;                                                                                                      // 1219
    }                                                                                                                  // 1220
                                                                                                                       // 1221
    function currentDateArray(config) {                                                                                // 1222
        // hooks is actually the exported moment object                                                                // 1223
        var nowValue = new Date(utils_hooks__hooks.now());                                                             // 1224
        if (config._useUTC) {                                                                                          // 1225
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];                         // 1226
        }                                                                                                              // 1227
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];                                      // 1228
    }                                                                                                                  // 1229
                                                                                                                       // 1230
    // convert an array to a date.                                                                                     // 1231
    // the array should mirror the parameters below                                                                    // 1232
    // note: all values past the year are optional and will default to the lowest possible value.                      // 1233
    // [year, month, day , hour, minute, second, millisecond]                                                          // 1234
    function configFromArray (config) {                                                                                // 1235
        var i, date, input = [], currentDate, yearToUse;                                                               // 1236
                                                                                                                       // 1237
        if (config._d) {                                                                                               // 1238
            return;                                                                                                    // 1239
        }                                                                                                              // 1240
                                                                                                                       // 1241
        currentDate = currentDateArray(config);                                                                        // 1242
                                                                                                                       // 1243
        //compute day of the year from weeks and weekdays                                                              // 1244
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {                                        // 1245
            dayOfYearFromWeekInfo(config);                                                                             // 1246
        }                                                                                                              // 1247
                                                                                                                       // 1248
        //if the day of the year is set, figure out what it is                                                         // 1249
        if (config._dayOfYear) {                                                                                       // 1250
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);                                                  // 1251
                                                                                                                       // 1252
            if (config._dayOfYear > daysInYear(yearToUse)) {                                                           // 1253
                getParsingFlags(config)._overflowDayOfYear = true;                                                     // 1254
            }                                                                                                          // 1255
                                                                                                                       // 1256
            date = createUTCDate(yearToUse, 0, config._dayOfYear);                                                     // 1257
            config._a[MONTH] = date.getUTCMonth();                                                                     // 1258
            config._a[DATE] = date.getUTCDate();                                                                       // 1259
        }                                                                                                              // 1260
                                                                                                                       // 1261
        // Default to current date.                                                                                    // 1262
        // * if no year, month, day of month are given, default to today                                               // 1263
        // * if day of month is given, default month and year                                                          // 1264
        // * if month is given, default only year                                                                      // 1265
        // * if year is given, don't default anything                                                                  // 1266
        for (i = 0; i < 3 && config._a[i] == null; ++i) {                                                              // 1267
            config._a[i] = input[i] = currentDate[i];                                                                  // 1268
        }                                                                                                              // 1269
                                                                                                                       // 1270
        // Zero out whatever was not defaulted, including time                                                         // 1271
        for (; i < 7; i++) {                                                                                           // 1272
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];                       // 1273
        }                                                                                                              // 1274
                                                                                                                       // 1275
        // Check for 24:00:00.000                                                                                      // 1276
        if (config._a[HOUR] === 24 &&                                                                                  // 1277
                config._a[MINUTE] === 0 &&                                                                             // 1278
                config._a[SECOND] === 0 &&                                                                             // 1279
                config._a[MILLISECOND] === 0) {                                                                        // 1280
            config._nextDay = true;                                                                                    // 1281
            config._a[HOUR] = 0;                                                                                       // 1282
        }                                                                                                              // 1283
                                                                                                                       // 1284
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);                                  // 1285
        // Apply timezone offset from input. The actual utcOffset can be changed                                       // 1286
        // with parseZone.                                                                                             // 1287
        if (config._tzm != null) {                                                                                     // 1288
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);                                          // 1289
        }                                                                                                              // 1290
                                                                                                                       // 1291
        if (config._nextDay) {                                                                                         // 1292
            config._a[HOUR] = 24;                                                                                      // 1293
        }                                                                                                              // 1294
    }                                                                                                                  // 1295
                                                                                                                       // 1296
    function dayOfYearFromWeekInfo(config) {                                                                           // 1297
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;                                               // 1298
                                                                                                                       // 1299
        w = config._w;                                                                                                 // 1300
        if (w.GG != null || w.W != null || w.E != null) {                                                              // 1301
            dow = 1;                                                                                                   // 1302
            doy = 4;                                                                                                   // 1303
                                                                                                                       // 1304
            // TODO: We need to take the current isoWeekYear, but that depends on                                      // 1305
            // how we interpret now (local, utc, fixed offset). So create                                              // 1306
            // a now version of current config (take local/utc/offset flags, and                                       // 1307
            // create now).                                                                                            // 1308
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);                   // 1309
            week = defaults(w.W, 1);                                                                                   // 1310
            weekday = defaults(w.E, 1);                                                                                // 1311
            if (weekday < 1 || weekday > 7) {                                                                          // 1312
                weekdayOverflow = true;                                                                                // 1313
            }                                                                                                          // 1314
        } else {                                                                                                       // 1315
            dow = config._locale._week.dow;                                                                            // 1316
            doy = config._locale._week.doy;                                                                            // 1317
                                                                                                                       // 1318
            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);               // 1319
            week = defaults(w.w, 1);                                                                                   // 1320
                                                                                                                       // 1321
            if (w.d != null) {                                                                                         // 1322
                // weekday -- low day numbers are considered next week                                                 // 1323
                weekday = w.d;                                                                                         // 1324
                if (weekday < 0 || weekday > 6) {                                                                      // 1325
                    weekdayOverflow = true;                                                                            // 1326
                }                                                                                                      // 1327
            } else if (w.e != null) {                                                                                  // 1328
                // local weekday -- counting starts from begining of week                                              // 1329
                weekday = w.e + dow;                                                                                   // 1330
                if (w.e < 0 || w.e > 6) {                                                                              // 1331
                    weekdayOverflow = true;                                                                            // 1332
                }                                                                                                      // 1333
            } else {                                                                                                   // 1334
                // default to begining of week                                                                         // 1335
                weekday = dow;                                                                                         // 1336
            }                                                                                                          // 1337
        }                                                                                                              // 1338
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {                                                      // 1339
            getParsingFlags(config)._overflowWeeks = true;                                                             // 1340
        } else if (weekdayOverflow != null) {                                                                          // 1341
            getParsingFlags(config)._overflowWeekday = true;                                                           // 1342
        } else {                                                                                                       // 1343
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);                                              // 1344
            config._a[YEAR] = temp.year;                                                                               // 1345
            config._dayOfYear = temp.dayOfYear;                                                                        // 1346
        }                                                                                                              // 1347
    }                                                                                                                  // 1348
                                                                                                                       // 1349
    // constant that refers to the ISO standard                                                                        // 1350
    utils_hooks__hooks.ISO_8601 = function () {};                                                                      // 1351
                                                                                                                       // 1352
    // date from string and format string                                                                              // 1353
    function configFromStringAndFormat(config) {                                                                       // 1354
        // TODO: Move this to another part of the creation flow to prevent circular deps                               // 1355
        if (config._f === utils_hooks__hooks.ISO_8601) {                                                               // 1356
            configFromISO(config);                                                                                     // 1357
            return;                                                                                                    // 1358
        }                                                                                                              // 1359
                                                                                                                       // 1360
        config._a = [];                                                                                                // 1361
        getParsingFlags(config).empty = true;                                                                          // 1362
                                                                                                                       // 1363
        // This array is used to make a Date, either with `new Date` or `Date.UTC`                                     // 1364
        var string = '' + config._i,                                                                                   // 1365
            i, parsedInput, tokens, token, skipped,                                                                    // 1366
            stringLength = string.length,                                                                              // 1367
            totalParsedInputLength = 0;                                                                                // 1368
                                                                                                                       // 1369
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];                                // 1370
                                                                                                                       // 1371
        for (i = 0; i < tokens.length; i++) {                                                                          // 1372
            token = tokens[i];                                                                                         // 1373
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];                               // 1374
            // console.log('token', token, 'parsedInput', parsedInput,                                                 // 1375
            //         'regex', getParseRegexForToken(token, config));                                                 // 1376
            if (parsedInput) {                                                                                         // 1377
                skipped = string.substr(0, string.indexOf(parsedInput));                                               // 1378
                if (skipped.length > 0) {                                                                              // 1379
                    getParsingFlags(config).unusedInput.push(skipped);                                                 // 1380
                }                                                                                                      // 1381
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);                               // 1382
                totalParsedInputLength += parsedInput.length;                                                          // 1383
            }                                                                                                          // 1384
            // don't parse if it's not a known token                                                                   // 1385
            if (formatTokenFunctions[token]) {                                                                         // 1386
                if (parsedInput) {                                                                                     // 1387
                    getParsingFlags(config).empty = false;                                                             // 1388
                }                                                                                                      // 1389
                else {                                                                                                 // 1390
                    getParsingFlags(config).unusedTokens.push(token);                                                  // 1391
                }                                                                                                      // 1392
                addTimeToArrayFromToken(token, parsedInput, config);                                                   // 1393
            }                                                                                                          // 1394
            else if (config._strict && !parsedInput) {                                                                 // 1395
                getParsingFlags(config).unusedTokens.push(token);                                                      // 1396
            }                                                                                                          // 1397
        }                                                                                                              // 1398
                                                                                                                       // 1399
        // add remaining unparsed input length to the string                                                           // 1400
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;                                 // 1401
        if (string.length > 0) {                                                                                       // 1402
            getParsingFlags(config).unusedInput.push(string);                                                          // 1403
        }                                                                                                              // 1404
                                                                                                                       // 1405
        // clear _12h flag if hour is <= 12                                                                            // 1406
        if (getParsingFlags(config).bigHour === true &&                                                                // 1407
                config._a[HOUR] <= 12 &&                                                                               // 1408
                config._a[HOUR] > 0) {                                                                                 // 1409
            getParsingFlags(config).bigHour = undefined;                                                               // 1410
        }                                                                                                              // 1411
        // handle meridiem                                                                                             // 1412
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);                          // 1413
                                                                                                                       // 1414
        configFromArray(config);                                                                                       // 1415
        checkOverflow(config);                                                                                         // 1416
    }                                                                                                                  // 1417
                                                                                                                       // 1418
                                                                                                                       // 1419
    function meridiemFixWrap (locale, hour, meridiem) {                                                                // 1420
        var isPm;                                                                                                      // 1421
                                                                                                                       // 1422
        if (meridiem == null) {                                                                                        // 1423
            // nothing to do                                                                                           // 1424
            return hour;                                                                                               // 1425
        }                                                                                                              // 1426
        if (locale.meridiemHour != null) {                                                                             // 1427
            return locale.meridiemHour(hour, meridiem);                                                                // 1428
        } else if (locale.isPM != null) {                                                                              // 1429
            // Fallback                                                                                                // 1430
            isPm = locale.isPM(meridiem);                                                                              // 1431
            if (isPm && hour < 12) {                                                                                   // 1432
                hour += 12;                                                                                            // 1433
            }                                                                                                          // 1434
            if (!isPm && hour === 12) {                                                                                // 1435
                hour = 0;                                                                                              // 1436
            }                                                                                                          // 1437
            return hour;                                                                                               // 1438
        } else {                                                                                                       // 1439
            // this is not supposed to happen                                                                          // 1440
            return hour;                                                                                               // 1441
        }                                                                                                              // 1442
    }                                                                                                                  // 1443
                                                                                                                       // 1444
    // date from string and array of format strings                                                                    // 1445
    function configFromStringAndArray(config) {                                                                        // 1446
        var tempConfig,                                                                                                // 1447
            bestMoment,                                                                                                // 1448
                                                                                                                       // 1449
            scoreToBeat,                                                                                               // 1450
            i,                                                                                                         // 1451
            currentScore;                                                                                              // 1452
                                                                                                                       // 1453
        if (config._f.length === 0) {                                                                                  // 1454
            getParsingFlags(config).invalidFormat = true;                                                              // 1455
            config._d = new Date(NaN);                                                                                 // 1456
            return;                                                                                                    // 1457
        }                                                                                                              // 1458
                                                                                                                       // 1459
        for (i = 0; i < config._f.length; i++) {                                                                       // 1460
            currentScore = 0;                                                                                          // 1461
            tempConfig = copyConfig({}, config);                                                                       // 1462
            if (config._useUTC != null) {                                                                              // 1463
                tempConfig._useUTC = config._useUTC;                                                                   // 1464
            }                                                                                                          // 1465
            tempConfig._f = config._f[i];                                                                              // 1466
            configFromStringAndFormat(tempConfig);                                                                     // 1467
                                                                                                                       // 1468
            if (!valid__isValid(tempConfig)) {                                                                         // 1469
                continue;                                                                                              // 1470
            }                                                                                                          // 1471
                                                                                                                       // 1472
            // if there is any input that was not parsed add a penalty for that format                                 // 1473
            currentScore += getParsingFlags(tempConfig).charsLeftOver;                                                 // 1474
                                                                                                                       // 1475
            //or tokens                                                                                                // 1476
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;                                      // 1477
                                                                                                                       // 1478
            getParsingFlags(tempConfig).score = currentScore;                                                          // 1479
                                                                                                                       // 1480
            if (scoreToBeat == null || currentScore < scoreToBeat) {                                                   // 1481
                scoreToBeat = currentScore;                                                                            // 1482
                bestMoment = tempConfig;                                                                               // 1483
            }                                                                                                          // 1484
        }                                                                                                              // 1485
                                                                                                                       // 1486
        extend(config, bestMoment || tempConfig);                                                                      // 1487
    }                                                                                                                  // 1488
                                                                                                                       // 1489
    function configFromObject(config) {                                                                                // 1490
        if (config._d) {                                                                                               // 1491
            return;                                                                                                    // 1492
        }                                                                                                              // 1493
                                                                                                                       // 1494
        var i = normalizeObjectUnits(config._i);                                                                       // 1495
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);                                                                           // 1497
        });                                                                                                            // 1498
                                                                                                                       // 1499
        configFromArray(config);                                                                                       // 1500
    }                                                                                                                  // 1501
                                                                                                                       // 1502
    function createFromConfig (config) {                                                                               // 1503
        var res = new Moment(checkOverflow(prepareConfig(config)));                                                    // 1504
        if (res._nextDay) {                                                                                            // 1505
            // Adding is smart enough around DST                                                                       // 1506
            res.add(1, 'd');                                                                                           // 1507
            res._nextDay = undefined;                                                                                  // 1508
        }                                                                                                              // 1509
                                                                                                                       // 1510
        return res;                                                                                                    // 1511
    }                                                                                                                  // 1512
                                                                                                                       // 1513
    function prepareConfig (config) {                                                                                  // 1514
        var input = config._i,                                                                                         // 1515
            format = config._f;                                                                                        // 1516
                                                                                                                       // 1517
        config._locale = config._locale || locale_locales__getLocale(config._l);                                       // 1518
                                                                                                                       // 1519
        if (input === null || (format === undefined && input === '')) {                                                // 1520
            return valid__createInvalid({nullInput: true});                                                            // 1521
        }                                                                                                              // 1522
                                                                                                                       // 1523
        if (typeof input === 'string') {                                                                               // 1524
            config._i = input = config._locale.preparse(input);                                                        // 1525
        }                                                                                                              // 1526
                                                                                                                       // 1527
        if (isMoment(input)) {                                                                                         // 1528
            return new Moment(checkOverflow(input));                                                                   // 1529
        } else if (isArray(format)) {                                                                                  // 1530
            configFromStringAndArray(config);                                                                          // 1531
        } else if (format) {                                                                                           // 1532
            configFromStringAndFormat(config);                                                                         // 1533
        } else if (isDate(input)) {                                                                                    // 1534
            config._d = input;                                                                                         // 1535
        } else {                                                                                                       // 1536
            configFromInput(config);                                                                                   // 1537
        }                                                                                                              // 1538
                                                                                                                       // 1539
        if (!valid__isValid(config)) {                                                                                 // 1540
            config._d = null;                                                                                          // 1541
        }                                                                                                              // 1542
                                                                                                                       // 1543
        return config;                                                                                                 // 1544
    }                                                                                                                  // 1545
                                                                                                                       // 1546
    function configFromInput(config) {                                                                                 // 1547
        var input = config._i;                                                                                         // 1548
        if (input === undefined) {                                                                                     // 1549
            config._d = new Date(utils_hooks__hooks.now());                                                            // 1550
        } else if (isDate(input)) {                                                                                    // 1551
            config._d = new Date(+input);                                                                              // 1552
        } else if (typeof input === 'string') {                                                                        // 1553
            configFromString(config);                                                                                  // 1554
        } else if (isArray(input)) {                                                                                   // 1555
            config._a = map(input.slice(0), function (obj) {                                                           // 1556
                return parseInt(obj, 10);                                                                              // 1557
            });                                                                                                        // 1558
            configFromArray(config);                                                                                   // 1559
        } else if (typeof(input) === 'object') {                                                                       // 1560
            configFromObject(config);                                                                                  // 1561
        } else if (typeof(input) === 'number') {                                                                       // 1562
            // from milliseconds                                                                                       // 1563
            config._d = new Date(input);                                                                               // 1564
        } else {                                                                                                       // 1565
            utils_hooks__hooks.createFromInputFallback(config);                                                        // 1566
        }                                                                                                              // 1567
    }                                                                                                                  // 1568
                                                                                                                       // 1569
    function createLocalOrUTC (input, format, locale, strict, isUTC) {                                                 // 1570
        var c = {};                                                                                                    // 1571
                                                                                                                       // 1572
        if (typeof(locale) === 'boolean') {                                                                            // 1573
            strict = locale;                                                                                           // 1574
            locale = undefined;                                                                                        // 1575
        }                                                                                                              // 1576
        // object construction must be done this way.                                                                  // 1577
        // https://github.com/moment/moment/issues/1423                                                                // 1578
        c._isAMomentObject = true;                                                                                     // 1579
        c._useUTC = c._isUTC = isUTC;                                                                                  // 1580
        c._l = locale;                                                                                                 // 1581
        c._i = input;                                                                                                  // 1582
        c._f = format;                                                                                                 // 1583
        c._strict = strict;                                                                                            // 1584
                                                                                                                       // 1585
        return createFromConfig(c);                                                                                    // 1586
    }                                                                                                                  // 1587
                                                                                                                       // 1588
    function local__createLocal (input, format, locale, strict) {                                                      // 1589
        return createLocalOrUTC(input, format, locale, strict, false);                                                 // 1590
    }                                                                                                                  // 1591
                                                                                                                       // 1592
    var prototypeMin = deprecate(                                                                                      // 1593
         'moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',           // 1594
         function () {                                                                                                 // 1595
             var other = local__createLocal.apply(null, arguments);                                                    // 1596
             if (this.isValid() && other.isValid()) {                                                                  // 1597
                 return other < this ? this : other;                                                                   // 1598
             } else {                                                                                                  // 1599
                 return valid__createInvalid();                                                                        // 1600
             }                                                                                                         // 1601
         }                                                                                                             // 1602
     );                                                                                                                // 1603
                                                                                                                       // 1604
    var prototypeMax = deprecate(                                                                                      // 1605
        'moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',            // 1606
        function () {                                                                                                  // 1607
            var other = local__createLocal.apply(null, arguments);                                                     // 1608
            if (this.isValid() && other.isValid()) {                                                                   // 1609
                return other > this ? this : other;                                                                    // 1610
            } else {                                                                                                   // 1611
                return valid__createInvalid();                                                                         // 1612
            }                                                                                                          // 1613
        }                                                                                                              // 1614
    );                                                                                                                 // 1615
                                                                                                                       // 1616
    // Pick a moment m from moments so that m[fn](other) is true for all                                               // 1617
    // other. This relies on the function fn to be transitive.                                                         // 1618
    //                                                                                                                 // 1619
    // moments should either be an array of moment objects or an array, whose                                          // 1620
    // first element is an array of moment objects.                                                                    // 1621
    function pickBy(fn, moments) {                                                                                     // 1622
        var res, i;                                                                                                    // 1623
        if (moments.length === 1 && isArray(moments[0])) {                                                             // 1624
            moments = moments[0];                                                                                      // 1625
        }                                                                                                              // 1626
        if (!moments.length) {                                                                                         // 1627
            return local__createLocal();                                                                               // 1628
        }                                                                                                              // 1629
        res = moments[0];                                                                                              // 1630
        for (i = 1; i < moments.length; ++i) {                                                                         // 1631
            if (!moments[i].isValid() || moments[i][fn](res)) {                                                        // 1632
                res = moments[i];                                                                                      // 1633
            }                                                                                                          // 1634
        }                                                                                                              // 1635
        return res;                                                                                                    // 1636
    }                                                                                                                  // 1637
                                                                                                                       // 1638
    // TODO: Use [].sort instead?                                                                                      // 1639
    function min () {                                                                                                  // 1640
        var args = [].slice.call(arguments, 0);                                                                        // 1641
                                                                                                                       // 1642
        return pickBy('isBefore', args);                                                                               // 1643
    }                                                                                                                  // 1644
                                                                                                                       // 1645
    function max () {                                                                                                  // 1646
        var args = [].slice.call(arguments, 0);                                                                        // 1647
                                                                                                                       // 1648
        return pickBy('isAfter', args);                                                                                // 1649
    }                                                                                                                  // 1650
                                                                                                                       // 1651
    var now = function () {                                                                                            // 1652
        return Date.now ? Date.now() : +(new Date());                                                                  // 1653
    };                                                                                                                 // 1654
                                                                                                                       // 1655
    function Duration (duration) {                                                                                     // 1656
        var normalizedInput = normalizeObjectUnits(duration),                                                          // 1657
            years = normalizedInput.year || 0,                                                                         // 1658
            quarters = normalizedInput.quarter || 0,                                                                   // 1659
            months = normalizedInput.month || 0,                                                                       // 1660
            weeks = normalizedInput.week || 0,                                                                         // 1661
            days = normalizedInput.day || 0,                                                                           // 1662
            hours = normalizedInput.hour || 0,                                                                         // 1663
            minutes = normalizedInput.minute || 0,                                                                     // 1664
            seconds = normalizedInput.second || 0,                                                                     // 1665
            milliseconds = normalizedInput.millisecond || 0;                                                           // 1666
                                                                                                                       // 1667
        // representation for dateAddRemove                                                                            // 1668
        this._milliseconds = +milliseconds +                                                                           // 1669
            seconds * 1e3 + // 1000                                                                                    // 1670
            minutes * 6e4 + // 1000 * 60                                                                               // 1671
            hours * 36e5; // 1000 * 60 * 60                                                                            // 1672
        // Because of dateAddRemove treats 24 hours as different from a                                                // 1673
        // day when working around DST, we need to store them separately                                               // 1674
        this._days = +days +                                                                                           // 1675
            weeks * 7;                                                                                                 // 1676
        // It is impossible translate months into days without knowing                                                 // 1677
        // which months you are are talking about, so we have to store                                                 // 1678
        // it separately.                                                                                              // 1679
        this._months = +months +                                                                                       // 1680
            quarters * 3 +                                                                                             // 1681
            years * 12;                                                                                                // 1682
                                                                                                                       // 1683
        this._data = {};                                                                                               // 1684
                                                                                                                       // 1685
        this._locale = locale_locales__getLocale();                                                                    // 1686
                                                                                                                       // 1687
        this._bubble();                                                                                                // 1688
    }                                                                                                                  // 1689
                                                                                                                       // 1690
    function isDuration (obj) {                                                                                        // 1691
        return obj instanceof Duration;                                                                                // 1692
    }                                                                                                                  // 1693
                                                                                                                       // 1694
    // FORMATTING                                                                                                      // 1695
                                                                                                                       // 1696
    function offset (token, separator) {                                                                               // 1697
        addFormatToken(token, 0, 0, function () {                                                                      // 1698
            var offset = this.utcOffset();                                                                             // 1699
            var sign = '+';                                                                                            // 1700
            if (offset < 0) {                                                                                          // 1701
                offset = -offset;                                                                                      // 1702
                sign = '-';                                                                                            // 1703
            }                                                                                                          // 1704
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);                     // 1705
        });                                                                                                            // 1706
    }                                                                                                                  // 1707
                                                                                                                       // 1708
    offset('Z', ':');                                                                                                  // 1709
    offset('ZZ', '');                                                                                                  // 1710
                                                                                                                       // 1711
    // PARSING                                                                                                         // 1712
                                                                                                                       // 1713
    addRegexToken('Z',  matchShortOffset);                                                                             // 1714
    addRegexToken('ZZ', matchShortOffset);                                                                             // 1715
    addParseToken(['Z', 'ZZ'], function (input, array, config) {                                                       // 1716
        config._useUTC = true;                                                                                         // 1717
        config._tzm = offsetFromString(matchShortOffset, input);                                                       // 1718
    });                                                                                                                // 1719
                                                                                                                       // 1720
    // HELPERS                                                                                                         // 1721
                                                                                                                       // 1722
    // timezone chunker                                                                                                // 1723
    // '+10:00' > ['10',  '00']                                                                                        // 1724
    // '-1530'  > ['-15', '30']                                                                                        // 1725
    var chunkOffset = /([\+\-]|\d\d)/gi;                                                                               // 1726
                                                                                                                       // 1727
    function offsetFromString(matcher, string) {                                                                       // 1728
        var matches = ((string || '').match(matcher) || []);                                                           // 1729
        var chunk   = matches[matches.length - 1] || [];                                                               // 1730
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];                                                  // 1731
        var minutes = +(parts[1] * 60) + toInt(parts[2]);                                                              // 1732
                                                                                                                       // 1733
        return parts[0] === '+' ? minutes : -minutes;                                                                  // 1734
    }                                                                                                                  // 1735
                                                                                                                       // 1736
    // Return a moment from input, that is local/utc/zone equivalent to model.                                         // 1737
    function cloneWithOffset(input, model) {                                                                           // 1738
        var res, diff;                                                                                                 // 1739
        if (model._isUTC) {                                                                                            // 1740
            res = model.clone();                                                                                       // 1741
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);                  // 1742
            // Use low-level api, because this fn is low-level api.                                                    // 1743
            res._d.setTime(+res._d + diff);                                                                            // 1744
            utils_hooks__hooks.updateOffset(res, false);                                                               // 1745
            return res;                                                                                                // 1746
        } else {                                                                                                       // 1747
            return local__createLocal(input).local();                                                                  // 1748
        }                                                                                                              // 1749
    }                                                                                                                  // 1750
                                                                                                                       // 1751
    function getDateOffset (m) {                                                                                       // 1752
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.                                              // 1753
        // https://github.com/moment/moment/pull/1871                                                                  // 1754
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;                                                        // 1755
    }                                                                                                                  // 1756
                                                                                                                       // 1757
    // HOOKS                                                                                                           // 1758
                                                                                                                       // 1759
    // This function will be called whenever a moment is mutated.                                                      // 1760
    // It is intended to keep the offset in sync with the timezone.                                                    // 1761
    utils_hooks__hooks.updateOffset = function () {};                                                                  // 1762
                                                                                                                       // 1763
    // MOMENTS                                                                                                         // 1764
                                                                                                                       // 1765
    // keepLocalTime = true means only change the timezone, without                                                    // 1766
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->                                            // 1767
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset                                             // 1768
    // +0200, so we adjust the time as needed, to be valid.                                                            // 1769
    //                                                                                                                 // 1770
    // Keeping the time actually adds/subtracts (one hour)                                                             // 1771
    // from the actual represented time. That is why we call updateOffset                                              // 1772
    // a second time. In case it wants us to change the offset again                                                   // 1773
    // _changeInProgress == true case, then we have to adjust, because                                                 // 1774
    // there is no such time in the given timezone.                                                                    // 1775
    function getSetOffset (input, keepLocalTime) {                                                                     // 1776
        var offset = this._offset || 0,                                                                                // 1777
            localAdjust;                                                                                               // 1778
        if (!this.isValid()) {                                                                                         // 1779
            return input != null ? this : NaN;                                                                         // 1780
        }                                                                                                              // 1781
        if (input != null) {                                                                                           // 1782
            if (typeof input === 'string') {                                                                           // 1783
                input = offsetFromString(matchShortOffset, input);                                                     // 1784
            } else if (Math.abs(input) < 16) {                                                                         // 1785
                input = input * 60;                                                                                    // 1786
            }                                                                                                          // 1787
            if (!this._isUTC && keepLocalTime) {                                                                       // 1788
                localAdjust = getDateOffset(this);                                                                     // 1789
            }                                                                                                          // 1790
            this._offset = input;                                                                                      // 1791
            this._isUTC = true;                                                                                        // 1792
            if (localAdjust != null) {                                                                                 // 1793
                this.add(localAdjust, 'm');                                                                            // 1794
            }                                                                                                          // 1795
            if (offset !== input) {                                                                                    // 1796
                if (!keepLocalTime || this._changeInProgress) {                                                        // 1797
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);            // 1798
                } else if (!this._changeInProgress) {                                                                  // 1799
                    this._changeInProgress = true;                                                                     // 1800
                    utils_hooks__hooks.updateOffset(this, true);                                                       // 1801
                    this._changeInProgress = null;                                                                     // 1802
                }                                                                                                      // 1803
            }                                                                                                          // 1804
            return this;                                                                                               // 1805
        } else {                                                                                                       // 1806
            return this._isUTC ? offset : getDateOffset(this);                                                         // 1807
        }                                                                                                              // 1808
    }                                                                                                                  // 1809
                                                                                                                       // 1810
    function getSetZone (input, keepLocalTime) {                                                                       // 1811
        if (input != null) {                                                                                           // 1812
            if (typeof input !== 'string') {                                                                           // 1813
                input = -input;                                                                                        // 1814
            }                                                                                                          // 1815
                                                                                                                       // 1816
            this.utcOffset(input, keepLocalTime);                                                                      // 1817
                                                                                                                       // 1818
            return this;                                                                                               // 1819
        } else {                                                                                                       // 1820
            return -this.utcOffset();                                                                                  // 1821
        }                                                                                                              // 1822
    }                                                                                                                  // 1823
                                                                                                                       // 1824
    function setOffsetToUTC (keepLocalTime) {                                                                          // 1825
        return this.utcOffset(0, keepLocalTime);                                                                       // 1826
    }                                                                                                                  // 1827
                                                                                                                       // 1828
    function setOffsetToLocal (keepLocalTime) {                                                                        // 1829
        if (this._isUTC) {                                                                                             // 1830
            this.utcOffset(0, keepLocalTime);                                                                          // 1831
            this._isUTC = false;                                                                                       // 1832
                                                                                                                       // 1833
            if (keepLocalTime) {                                                                                       // 1834
                this.subtract(getDateOffset(this), 'm');                                                               // 1835
            }                                                                                                          // 1836
        }                                                                                                              // 1837
        return this;                                                                                                   // 1838
    }                                                                                                                  // 1839
                                                                                                                       // 1840
    function setOffsetToParsedOffset () {                                                                              // 1841
        if (this._tzm) {                                                                                               // 1842
            this.utcOffset(this._tzm);                                                                                 // 1843
        } else if (typeof this._i === 'string') {                                                                      // 1844
            this.utcOffset(offsetFromString(matchOffset, this._i));                                                    // 1845
        }                                                                                                              // 1846
        return this;                                                                                                   // 1847
    }                                                                                                                  // 1848
                                                                                                                       // 1849
    function hasAlignedHourOffset (input) {                                                                            // 1850
        if (!this.isValid()) {                                                                                         // 1851
            return false;                                                                                              // 1852
        }                                                                                                              // 1853
        input = input ? local__createLocal(input).utcOffset() : 0;                                                     // 1854
                                                                                                                       // 1855
        return (this.utcOffset() - input) % 60 === 0;                                                                  // 1856
    }                                                                                                                  // 1857
                                                                                                                       // 1858
    function isDaylightSavingTime () {                                                                                 // 1859
        return (                                                                                                       // 1860
            this.utcOffset() > this.clone().month(0).utcOffset() ||                                                    // 1861
            this.utcOffset() > this.clone().month(5).utcOffset()                                                       // 1862
        );                                                                                                             // 1863
    }                                                                                                                  // 1864
                                                                                                                       // 1865
    function isDaylightSavingTimeShifted () {                                                                          // 1866
        if (!isUndefined(this._isDSTShifted)) {                                                                        // 1867
            return this._isDSTShifted;                                                                                 // 1868
        }                                                                                                              // 1869
                                                                                                                       // 1870
        var c = {};                                                                                                    // 1871
                                                                                                                       // 1872
        copyConfig(c, this);                                                                                           // 1873
        c = prepareConfig(c);                                                                                          // 1874
                                                                                                                       // 1875
        if (c._a) {                                                                                                    // 1876
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);                             // 1877
            this._isDSTShifted = this.isValid() &&                                                                     // 1878
                compareArrays(c._a, other.toArray()) > 0;                                                              // 1879
        } else {                                                                                                       // 1880
            this._isDSTShifted = false;                                                                                // 1881
        }                                                                                                              // 1882
                                                                                                                       // 1883
        return this._isDSTShifted;                                                                                     // 1884
    }                                                                                                                  // 1885
                                                                                                                       // 1886
    function isLocal () {                                                                                              // 1887
        return this.isValid() ? !this._isUTC : false;                                                                  // 1888
    }                                                                                                                  // 1889
                                                                                                                       // 1890
    function isUtcOffset () {                                                                                          // 1891
        return this.isValid() ? this._isUTC : false;                                                                   // 1892
    }                                                                                                                  // 1893
                                                                                                                       // 1894
    function isUtc () {                                                                                                // 1895
        return this.isValid() ? this._isUTC && this._offset === 0 : false;                                             // 1896
    }                                                                                                                  // 1897
                                                                                                                       // 1898
    // ASP.NET json date format regex                                                                                  // 1899
    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/;                                   // 1900
                                                                                                                       // 1901
    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html                       // 1902
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere                                       // 1903
    // and further modified to allow for strings containing both week and day                                          // 1904
    var isoRegex = /^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/;
                                                                                                                       // 1906
    function create__createDuration (input, key) {                                                                     // 1907
        var duration = input,                                                                                          // 1908
            // matching against regexp is expensive, do it on demand                                                   // 1909
            match = null,                                                                                              // 1910
            sign,                                                                                                      // 1911
            ret,                                                                                                       // 1912
            diffRes;                                                                                                   // 1913
                                                                                                                       // 1914
        if (isDuration(input)) {                                                                                       // 1915
            duration = {                                                                                               // 1916
                ms : input._milliseconds,                                                                              // 1917
                d  : input._days,                                                                                      // 1918
                M  : input._months                                                                                     // 1919
            };                                                                                                         // 1920
        } else if (typeof input === 'number') {                                                                        // 1921
            duration = {};                                                                                             // 1922
            if (key) {                                                                                                 // 1923
                duration[key] = input;                                                                                 // 1924
            } else {                                                                                                   // 1925
                duration.milliseconds = input;                                                                         // 1926
            }                                                                                                          // 1927
        } else if (!!(match = aspNetRegex.exec(input))) {                                                              // 1928
            sign = (match[1] === '-') ? -1 : 1;                                                                        // 1929
            duration = {                                                                                               // 1930
                y  : 0,                                                                                                // 1931
                d  : toInt(match[DATE])        * sign,                                                                 // 1932
                h  : toInt(match[HOUR])        * sign,                                                                 // 1933
                m  : toInt(match[MINUTE])      * sign,                                                                 // 1934
                s  : toInt(match[SECOND])      * sign,                                                                 // 1935
                ms : toInt(match[MILLISECOND]) * sign                                                                  // 1936
            };                                                                                                         // 1937
        } else if (!!(match = isoRegex.exec(input))) {                                                                 // 1938
            sign = (match[1] === '-') ? -1 : 1;                                                                        // 1939
            duration = {                                                                                               // 1940
                y : parseIso(match[2], sign),                                                                          // 1941
                M : parseIso(match[3], sign),                                                                          // 1942
                w : parseIso(match[4], sign),                                                                          // 1943
                d : parseIso(match[5], sign),                                                                          // 1944
                h : parseIso(match[6], sign),                                                                          // 1945
                m : parseIso(match[7], sign),                                                                          // 1946
                s : parseIso(match[8], sign)                                                                           // 1947
            };                                                                                                         // 1948
        } else if (duration == null) {// checks for null or undefined                                                  // 1949
            duration = {};                                                                                             // 1950
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {                         // 1951
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));           // 1952
                                                                                                                       // 1953
            duration = {};                                                                                             // 1954
            duration.ms = diffRes.milliseconds;                                                                        // 1955
            duration.M = diffRes.months;                                                                               // 1956
        }                                                                                                              // 1957
                                                                                                                       // 1958
        ret = new Duration(duration);                                                                                  // 1959
                                                                                                                       // 1960
        if (isDuration(input) && hasOwnProp(input, '_locale')) {                                                       // 1961
            ret._locale = input._locale;                                                                               // 1962
        }                                                                                                              // 1963
                                                                                                                       // 1964
        return ret;                                                                                                    // 1965
    }                                                                                                                  // 1966
                                                                                                                       // 1967
    create__createDuration.fn = Duration.prototype;                                                                    // 1968
                                                                                                                       // 1969
    function parseIso (inp, sign) {                                                                                    // 1970
        // We'd normally use ~~inp for this, but unfortunately it also                                                 // 1971
        // converts floats to ints.                                                                                    // 1972
        // inp may be undefined, so careful calling replace on it.                                                     // 1973
        var res = inp && parseFloat(inp.replace(',', '.'));                                                            // 1974
        // apply sign while we're at it                                                                                // 1975
        return (isNaN(res) ? 0 : res) * sign;                                                                          // 1976
    }                                                                                                                  // 1977
                                                                                                                       // 1978
    function positiveMomentsDifference(base, other) {                                                                  // 1979
        var res = {milliseconds: 0, months: 0};                                                                        // 1980
                                                                                                                       // 1981
        res.months = other.month() - base.month() +                                                                    // 1982
            (other.year() - base.year()) * 12;                                                                         // 1983
        if (base.clone().add(res.months, 'M').isAfter(other)) {                                                        // 1984
            --res.months;                                                                                              // 1985
        }                                                                                                              // 1986
                                                                                                                       // 1987
        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));                                              // 1988
                                                                                                                       // 1989
        return res;                                                                                                    // 1990
    }                                                                                                                  // 1991
                                                                                                                       // 1992
    function momentsDifference(base, other) {                                                                          // 1993
        var res;                                                                                                       // 1994
        if (!(base.isValid() && other.isValid())) {                                                                    // 1995
            return {milliseconds: 0, months: 0};                                                                       // 1996
        }                                                                                                              // 1997
                                                                                                                       // 1998
        other = cloneWithOffset(other, base);                                                                          // 1999
        if (base.isBefore(other)) {                                                                                    // 2000
            res = positiveMomentsDifference(base, other);                                                              // 2001
        } else {                                                                                                       // 2002
            res = positiveMomentsDifference(other, base);                                                              // 2003
            res.milliseconds = -res.milliseconds;                                                                      // 2004
            res.months = -res.months;                                                                                  // 2005
        }                                                                                                              // 2006
                                                                                                                       // 2007
        return res;                                                                                                    // 2008
    }                                                                                                                  // 2009
                                                                                                                       // 2010
    function absRound (number) {                                                                                       // 2011
        if (number < 0) {                                                                                              // 2012
            return Math.round(-1 * number) * -1;                                                                       // 2013
        } else {                                                                                                       // 2014
            return Math.round(number);                                                                                 // 2015
        }                                                                                                              // 2016
    }                                                                                                                  // 2017
                                                                                                                       // 2018
    // TODO: remove 'name' arg after deprecation is removed                                                            // 2019
    function createAdder(direction, name) {                                                                            // 2020
        return function (val, period) {                                                                                // 2021
            var dur, tmp;                                                                                              // 2022
            //invert the arguments, but complain about it                                                              // 2023
            if (period !== null && !isNaN(+period)) {                                                                  // 2024
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;                                                                 // 2026
            }                                                                                                          // 2027
                                                                                                                       // 2028
            val = typeof val === 'string' ? +val : val;                                                                // 2029
            dur = create__createDuration(val, period);                                                                 // 2030
            add_subtract__addSubtract(this, dur, direction);                                                           // 2031
            return this;                                                                                               // 2032
        };                                                                                                             // 2033
    }                                                                                                                  // 2034
                                                                                                                       // 2035
    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {                                       // 2036
        var milliseconds = duration._milliseconds,                                                                     // 2037
            days = absRound(duration._days),                                                                           // 2038
            months = absRound(duration._months);                                                                       // 2039
                                                                                                                       // 2040
        if (!mom.isValid()) {                                                                                          // 2041
            // No op                                                                                                   // 2042
            return;                                                                                                    // 2043
        }                                                                                                              // 2044
                                                                                                                       // 2045
        updateOffset = updateOffset == null ? true : updateOffset;                                                     // 2046
                                                                                                                       // 2047
        if (milliseconds) {                                                                                            // 2048
            mom._d.setTime(+mom._d + milliseconds * isAdding);                                                         // 2049
        }                                                                                                              // 2050
        if (days) {                                                                                                    // 2051
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);                                    // 2052
        }                                                                                                              // 2053
        if (months) {                                                                                                  // 2054
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);                                             // 2055
        }                                                                                                              // 2056
        if (updateOffset) {                                                                                            // 2057
            utils_hooks__hooks.updateOffset(mom, days || months);                                                      // 2058
        }                                                                                                              // 2059
    }                                                                                                                  // 2060
                                                                                                                       // 2061
    var add_subtract__add      = createAdder(1, 'add');                                                                // 2062
    var add_subtract__subtract = createAdder(-1, 'subtract');                                                          // 2063
                                                                                                                       // 2064
    function moment_calendar__calendar (time, formats) {                                                               // 2065
        // We want to compare the start of today, vs this.                                                             // 2066
        // Getting start-of-today depends on whether we're local/utc/offset or not.                                    // 2067
        var now = time || local__createLocal(),                                                                        // 2068
            sod = cloneWithOffset(now, this).startOf('day'),                                                           // 2069
            diff = this.diff(sod, 'days', true),                                                                       // 2070
            format = diff < -6 ? 'sameElse' :                                                                          // 2071
                diff < -1 ? 'lastWeek' :                                                                               // 2072
                diff < 0 ? 'lastDay' :                                                                                 // 2073
                diff < 1 ? 'sameDay' :                                                                                 // 2074
                diff < 2 ? 'nextDay' :                                                                                 // 2075
                diff < 7 ? 'nextWeek' : 'sameElse';                                                                    // 2076
                                                                                                                       // 2077
        var output = formats && (isFunction(formats[format]) ? formats[format]() : formats[format]);                   // 2078
                                                                                                                       // 2079
        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));               // 2080
    }                                                                                                                  // 2081
                                                                                                                       // 2082
    function clone () {                                                                                                // 2083
        return new Moment(this);                                                                                       // 2084
    }                                                                                                                  // 2085
                                                                                                                       // 2086
    function isAfter (input, units) {                                                                                  // 2087
        var localInput = isMoment(input) ? input : local__createLocal(input);                                          // 2088
        if (!(this.isValid() && localInput.isValid())) {                                                               // 2089
            return false;                                                                                              // 2090
        }                                                                                                              // 2091
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');                                           // 2092
        if (units === 'millisecond') {                                                                                 // 2093
            return +this > +localInput;                                                                                // 2094
        } else {                                                                                                       // 2095
            return +localInput < +this.clone().startOf(units);                                                         // 2096
        }                                                                                                              // 2097
    }                                                                                                                  // 2098
                                                                                                                       // 2099
    function isBefore (input, units) {                                                                                 // 2100
        var localInput = isMoment(input) ? input : local__createLocal(input);                                          // 2101
        if (!(this.isValid() && localInput.isValid())) {                                                               // 2102
            return false;                                                                                              // 2103
        }                                                                                                              // 2104
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');                                           // 2105
        if (units === 'millisecond') {                                                                                 // 2106
            return +this < +localInput;                                                                                // 2107
        } else {                                                                                                       // 2108
            return +this.clone().endOf(units) < +localInput;                                                           // 2109
        }                                                                                                              // 2110
    }                                                                                                                  // 2111
                                                                                                                       // 2112
    function isBetween (from, to, units) {                                                                             // 2113
        return this.isAfter(from, units) && this.isBefore(to, units);                                                  // 2114
    }                                                                                                                  // 2115
                                                                                                                       // 2116
    function isSame (input, units) {                                                                                   // 2117
        var localInput = isMoment(input) ? input : local__createLocal(input),                                          // 2118
            inputMs;                                                                                                   // 2119
        if (!(this.isValid() && localInput.isValid())) {                                                               // 2120
            return false;                                                                                              // 2121
        }                                                                                                              // 2122
        units = normalizeUnits(units || 'millisecond');                                                                // 2123
        if (units === 'millisecond') {                                                                                 // 2124
            return +this === +localInput;                                                                              // 2125
        } else {                                                                                                       // 2126
            inputMs = +localInput;                                                                                     // 2127
            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));               // 2128
        }                                                                                                              // 2129
    }                                                                                                                  // 2130
                                                                                                                       // 2131
    function isSameOrAfter (input, units) {                                                                            // 2132
        return this.isSame(input, units) || this.isAfter(input,units);                                                 // 2133
    }                                                                                                                  // 2134
                                                                                                                       // 2135
    function isSameOrBefore (input, units) {                                                                           // 2136
        return this.isSame(input, units) || this.isBefore(input,units);                                                // 2137
    }                                                                                                                  // 2138
                                                                                                                       // 2139
    function diff (input, units, asFloat) {                                                                            // 2140
        var that,                                                                                                      // 2141
            zoneDelta,                                                                                                 // 2142
            delta, output;                                                                                             // 2143
                                                                                                                       // 2144
        if (!this.isValid()) {                                                                                         // 2145
            return NaN;                                                                                                // 2146
        }                                                                                                              // 2147
                                                                                                                       // 2148
        that = cloneWithOffset(input, this);                                                                           // 2149
                                                                                                                       // 2150
        if (!that.isValid()) {                                                                                         // 2151
            return NaN;                                                                                                // 2152
        }                                                                                                              // 2153
                                                                                                                       // 2154
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;                                                       // 2155
                                                                                                                       // 2156
        units = normalizeUnits(units);                                                                                 // 2157
                                                                                                                       // 2158
        if (units === 'year' || units === 'month' || units === 'quarter') {                                            // 2159
            output = monthDiff(this, that);                                                                            // 2160
            if (units === 'quarter') {                                                                                 // 2161
                output = output / 3;                                                                                   // 2162
            } else if (units === 'year') {                                                                             // 2163
                output = output / 12;                                                                                  // 2164
            }                                                                                                          // 2165
        } else {                                                                                                       // 2166
            delta = this - that;                                                                                       // 2167
            output = units === 'second' ? delta / 1e3 : // 1000                                                        // 2168
                units === 'minute' ? delta / 6e4 : // 1000 * 60                                                        // 2169
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60                                                    // 2170
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst                     // 2171
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst               // 2172
                delta;                                                                                                 // 2173
        }                                                                                                              // 2174
        return asFloat ? output : absFloor(output);                                                                    // 2175
    }                                                                                                                  // 2176
                                                                                                                       // 2177
    function monthDiff (a, b) {                                                                                        // 2178
        // difference in months                                                                                        // 2179
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),                                   // 2180
            // b is in (anchor - 1 month, anchor + 1 month)                                                            // 2181
            anchor = a.clone().add(wholeMonthDiff, 'months'),                                                          // 2182
            anchor2, adjust;                                                                                           // 2183
                                                                                                                       // 2184
        if (b - anchor < 0) {                                                                                          // 2185
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');                                                     // 2186
            // linear across the month                                                                                 // 2187
            adjust = (b - anchor) / (anchor - anchor2);                                                                // 2188
        } else {                                                                                                       // 2189
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');                                                     // 2190
            // linear across the month                                                                                 // 2191
            adjust = (b - anchor) / (anchor2 - anchor);                                                                // 2192
        }                                                                                                              // 2193
                                                                                                                       // 2194
        return -(wholeMonthDiff + adjust);                                                                             // 2195
    }                                                                                                                  // 2196
                                                                                                                       // 2197
    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';                                                         // 2198
                                                                                                                       // 2199
    function toString () {                                                                                             // 2200
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');                                   // 2201
    }                                                                                                                  // 2202
                                                                                                                       // 2203
    function moment_format__toISOString () {                                                                           // 2204
        var m = this.clone().utc();                                                                                    // 2205
        if (0 < m.year() && m.year() <= 9999) {                                                                        // 2206
            if (isFunction(Date.prototype.toISOString)) {                                                              // 2207
                // native implementation is ~50x faster, use it when we can                                            // 2208
                return this.toDate().toISOString();                                                                    // 2209
            } else {                                                                                                   // 2210
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                // 2211
            }                                                                                                          // 2212
        } else {                                                                                                       // 2213
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                  // 2214
        }                                                                                                              // 2215
    }                                                                                                                  // 2216
                                                                                                                       // 2217
    function moment_format__format (inputString) {                                                                     // 2218
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);                              // 2219
        return this.localeData().postformat(output);                                                                   // 2220
    }                                                                                                                  // 2221
                                                                                                                       // 2222
    function from (time, withoutSuffix) {                                                                              // 2223
        if (this.isValid() &&                                                                                          // 2224
                ((isMoment(time) && time.isValid()) ||                                                                 // 2225
                 local__createLocal(time).isValid())) {                                                                // 2226
            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);      // 2227
        } else {                                                                                                       // 2228
            return this.localeData().invalidDate();                                                                    // 2229
        }                                                                                                              // 2230
    }                                                                                                                  // 2231
                                                                                                                       // 2232
    function fromNow (withoutSuffix) {                                                                                 // 2233
        return this.from(local__createLocal(), withoutSuffix);                                                         // 2234
    }                                                                                                                  // 2235
                                                                                                                       // 2236
    function to (time, withoutSuffix) {                                                                                // 2237
        if (this.isValid() &&                                                                                          // 2238
                ((isMoment(time) && time.isValid()) ||                                                                 // 2239
                 local__createLocal(time).isValid())) {                                                                // 2240
            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);      // 2241
        } else {                                                                                                       // 2242
            return this.localeData().invalidDate();                                                                    // 2243
        }                                                                                                              // 2244
    }                                                                                                                  // 2245
                                                                                                                       // 2246
    function toNow (withoutSuffix) {                                                                                   // 2247
        return this.to(local__createLocal(), withoutSuffix);                                                           // 2248
    }                                                                                                                  // 2249
                                                                                                                       // 2250
    // If passed a locale key, it will set the locale for this                                                         // 2251
    // instance.  Otherwise, it will return the locale configuration                                                   // 2252
    // variables for this instance.                                                                                    // 2253
    function locale (key) {                                                                                            // 2254
        var newLocaleData;                                                                                             // 2255
                                                                                                                       // 2256
        if (key === undefined) {                                                                                       // 2257
            return this._locale._abbr;                                                                                 // 2258
        } else {                                                                                                       // 2259
            newLocaleData = locale_locales__getLocale(key);                                                            // 2260
            if (newLocaleData != null) {                                                                               // 2261
                this._locale = newLocaleData;                                                                          // 2262
            }                                                                                                          // 2263
            return this;                                                                                               // 2264
        }                                                                                                              // 2265
    }                                                                                                                  // 2266
                                                                                                                       // 2267
    var lang = deprecate(                                                                                              // 2268
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {                                                                                               // 2270
            if (key === undefined) {                                                                                   // 2271
                return this.localeData();                                                                              // 2272
            } else {                                                                                                   // 2273
                return this.locale(key);                                                                               // 2274
            }                                                                                                          // 2275
        }                                                                                                              // 2276
    );                                                                                                                 // 2277
                                                                                                                       // 2278
    function localeData () {                                                                                           // 2279
        return this._locale;                                                                                           // 2280
    }                                                                                                                  // 2281
                                                                                                                       // 2282
    function startOf (units) {                                                                                         // 2283
        units = normalizeUnits(units);                                                                                 // 2284
        // the following switch intentionally omits break keywords                                                     // 2285
        // to utilize falling through the cases.                                                                       // 2286
        switch (units) {                                                                                               // 2287
        case 'year':                                                                                                   // 2288
            this.month(0);                                                                                             // 2289
            /* falls through */                                                                                        // 2290
        case 'quarter':                                                                                                // 2291
        case 'month':                                                                                                  // 2292
            this.date(1);                                                                                              // 2293
            /* falls through */                                                                                        // 2294
        case 'week':                                                                                                   // 2295
        case 'isoWeek':                                                                                                // 2296
        case 'day':                                                                                                    // 2297
            this.hours(0);                                                                                             // 2298
            /* falls through */                                                                                        // 2299
        case 'hour':                                                                                                   // 2300
            this.minutes(0);                                                                                           // 2301
            /* falls through */                                                                                        // 2302
        case 'minute':                                                                                                 // 2303
            this.seconds(0);                                                                                           // 2304
            /* falls through */                                                                                        // 2305
        case 'second':                                                                                                 // 2306
            this.milliseconds(0);                                                                                      // 2307
        }                                                                                                              // 2308
                                                                                                                       // 2309
        // weeks are a special case                                                                                    // 2310
        if (units === 'week') {                                                                                        // 2311
            this.weekday(0);                                                                                           // 2312
        }                                                                                                              // 2313
        if (units === 'isoWeek') {                                                                                     // 2314
            this.isoWeekday(1);                                                                                        // 2315
        }                                                                                                              // 2316
                                                                                                                       // 2317
        // quarters are also special                                                                                   // 2318
        if (units === 'quarter') {                                                                                     // 2319
            this.month(Math.floor(this.month() / 3) * 3);                                                              // 2320
        }                                                                                                              // 2321
                                                                                                                       // 2322
        return this;                                                                                                   // 2323
    }                                                                                                                  // 2324
                                                                                                                       // 2325
    function endOf (units) {                                                                                           // 2326
        units = normalizeUnits(units);                                                                                 // 2327
        if (units === undefined || units === 'millisecond') {                                                          // 2328
            return this;                                                                                               // 2329
        }                                                                                                              // 2330
        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');                   // 2331
    }                                                                                                                  // 2332
                                                                                                                       // 2333
    function to_type__valueOf () {                                                                                     // 2334
        return +this._d - ((this._offset || 0) * 60000);                                                               // 2335
    }                                                                                                                  // 2336
                                                                                                                       // 2337
    function unix () {                                                                                                 // 2338
        return Math.floor(+this / 1000);                                                                               // 2339
    }                                                                                                                  // 2340
                                                                                                                       // 2341
    function toDate () {                                                                                               // 2342
        return this._offset ? new Date(+this) : this._d;                                                               // 2343
    }                                                                                                                  // 2344
                                                                                                                       // 2345
    function toArray () {                                                                                              // 2346
        var m = this;                                                                                                  // 2347
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];                     // 2348
    }                                                                                                                  // 2349
                                                                                                                       // 2350
    function toObject () {                                                                                             // 2351
        var m = this;                                                                                                  // 2352
        return {                                                                                                       // 2353
            years: m.year(),                                                                                           // 2354
            months: m.month(),                                                                                         // 2355
            date: m.date(),                                                                                            // 2356
            hours: m.hours(),                                                                                          // 2357
            minutes: m.minutes(),                                                                                      // 2358
            seconds: m.seconds(),                                                                                      // 2359
            milliseconds: m.milliseconds()                                                                             // 2360
        };                                                                                                             // 2361
    }                                                                                                                  // 2362
                                                                                                                       // 2363
    function toJSON () {                                                                                               // 2364
        // new Date(NaN).toJSON() === null                                                                             // 2365
        return this.isValid() ? this.toISOString() : null;                                                             // 2366
    }                                                                                                                  // 2367
                                                                                                                       // 2368
    function moment_valid__isValid () {                                                                                // 2369
        return valid__isValid(this);                                                                                   // 2370
    }                                                                                                                  // 2371
                                                                                                                       // 2372
    function parsingFlags () {                                                                                         // 2373
        return extend({}, getParsingFlags(this));                                                                      // 2374
    }                                                                                                                  // 2375
                                                                                                                       // 2376
    function invalidAt () {                                                                                            // 2377
        return getParsingFlags(this).overflow;                                                                         // 2378
    }                                                                                                                  // 2379
                                                                                                                       // 2380
    function creationData() {                                                                                          // 2381
        return {                                                                                                       // 2382
            input: this._i,                                                                                            // 2383
            format: this._f,                                                                                           // 2384
            locale: this._locale,                                                                                      // 2385
            isUTC: this._isUTC,                                                                                        // 2386
            strict: this._strict                                                                                       // 2387
        };                                                                                                             // 2388
    }                                                                                                                  // 2389
                                                                                                                       // 2390
    // FORMATTING                                                                                                      // 2391
                                                                                                                       // 2392
    addFormatToken(0, ['gg', 2], 0, function () {                                                                      // 2393
        return this.weekYear() % 100;                                                                                  // 2394
    });                                                                                                                // 2395
                                                                                                                       // 2396
    addFormatToken(0, ['GG', 2], 0, function () {                                                                      // 2397
        return this.isoWeekYear() % 100;                                                                               // 2398
    });                                                                                                                // 2399
                                                                                                                       // 2400
    function addWeekYearFormatToken (token, getter) {                                                                  // 2401
        addFormatToken(0, [token, token.length], 0, getter);                                                           // 2402
    }                                                                                                                  // 2403
                                                                                                                       // 2404
    addWeekYearFormatToken('gggg',     'weekYear');                                                                    // 2405
    addWeekYearFormatToken('ggggg',    'weekYear');                                                                    // 2406
    addWeekYearFormatToken('GGGG',  'isoWeekYear');                                                                    // 2407
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');                                                                    // 2408
                                                                                                                       // 2409
    // ALIASES                                                                                                         // 2410
                                                                                                                       // 2411
    addUnitAlias('weekYear', 'gg');                                                                                    // 2412
    addUnitAlias('isoWeekYear', 'GG');                                                                                 // 2413
                                                                                                                       // 2414
    // PARSING                                                                                                         // 2415
                                                                                                                       // 2416
    addRegexToken('G',      matchSigned);                                                                              // 2417
    addRegexToken('g',      matchSigned);                                                                              // 2418
    addRegexToken('GG',     match1to2, match2);                                                                        // 2419
    addRegexToken('gg',     match1to2, match2);                                                                        // 2420
    addRegexToken('GGGG',   match1to4, match4);                                                                        // 2421
    addRegexToken('gggg',   match1to4, match4);                                                                        // 2422
    addRegexToken('GGGGG',  match1to6, match6);                                                                        // 2423
    addRegexToken('ggggg',  match1to6, match6);                                                                        // 2424
                                                                                                                       // 2425
    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {                      // 2426
        week[token.substr(0, 2)] = toInt(input);                                                                       // 2427
    });                                                                                                                // 2428
                                                                                                                       // 2429
    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {                                            // 2430
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);                                                     // 2431
    });                                                                                                                // 2432
                                                                                                                       // 2433
    // MOMENTS                                                                                                         // 2434
                                                                                                                       // 2435
    function getSetWeekYear (input) {                                                                                  // 2436
        return getSetWeekYearHelper.call(this,                                                                         // 2437
                input,                                                                                                 // 2438
                this.week(),                                                                                           // 2439
                this.weekday(),                                                                                        // 2440
                this.localeData()._week.dow,                                                                           // 2441
                this.localeData()._week.doy);                                                                          // 2442
    }                                                                                                                  // 2443
                                                                                                                       // 2444
    function getSetISOWeekYear (input) {                                                                               // 2445
        return getSetWeekYearHelper.call(this,                                                                         // 2446
                input, this.isoWeek(), this.isoWeekday(), 1, 4);                                                       // 2447
    }                                                                                                                  // 2448
                                                                                                                       // 2449
    function getISOWeeksInYear () {                                                                                    // 2450
        return weeksInYear(this.year(), 1, 4);                                                                         // 2451
    }                                                                                                                  // 2452
                                                                                                                       // 2453
    function getWeeksInYear () {                                                                                       // 2454
        var weekInfo = this.localeData()._week;                                                                        // 2455
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);                                                   // 2456
    }                                                                                                                  // 2457
                                                                                                                       // 2458
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {                                                    // 2459
        var weeksTarget;                                                                                               // 2460
        if (input == null) {                                                                                           // 2461
            return weekOfYear(this, dow, doy).year;                                                                    // 2462
        } else {                                                                                                       // 2463
            weeksTarget = weeksInYear(input, dow, doy);                                                                // 2464
            if (week > weeksTarget) {                                                                                  // 2465
                week = weeksTarget;                                                                                    // 2466
            }                                                                                                          // 2467
            return setWeekAll.call(this, input, week, weekday, dow, doy);                                              // 2468
        }                                                                                                              // 2469
    }                                                                                                                  // 2470
                                                                                                                       // 2471
    function setWeekAll(weekYear, week, weekday, dow, doy) {                                                           // 2472
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),                                     // 2473
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);                                      // 2474
                                                                                                                       // 2475
        this.year(date.getUTCFullYear());                                                                              // 2476
        this.month(date.getUTCMonth());                                                                                // 2477
        this.date(date.getUTCDate());                                                                                  // 2478
        return this;                                                                                                   // 2479
    }                                                                                                                  // 2480
                                                                                                                       // 2481
    // FORMATTING                                                                                                      // 2482
                                                                                                                       // 2483
    addFormatToken('Q', 0, 'Qo', 'quarter');                                                                           // 2484
                                                                                                                       // 2485
    // ALIASES                                                                                                         // 2486
                                                                                                                       // 2487
    addUnitAlias('quarter', 'Q');                                                                                      // 2488
                                                                                                                       // 2489
    // PARSING                                                                                                         // 2490
                                                                                                                       // 2491
    addRegexToken('Q', match1);                                                                                        // 2492
    addParseToken('Q', function (input, array) {                                                                       // 2493
        array[MONTH] = (toInt(input) - 1) * 3;                                                                         // 2494
    });                                                                                                                // 2495
                                                                                                                       // 2496
    // MOMENTS                                                                                                         // 2497
                                                                                                                       // 2498
    function getSetQuarter (input) {                                                                                   // 2499
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);     // 2500
    }                                                                                                                  // 2501
                                                                                                                       // 2502
    // FORMATTING                                                                                                      // 2503
                                                                                                                       // 2504
    addFormatToken('w', ['ww', 2], 'wo', 'week');                                                                      // 2505
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');                                                                   // 2506
                                                                                                                       // 2507
    // ALIASES                                                                                                         // 2508
                                                                                                                       // 2509
    addUnitAlias('week', 'w');                                                                                         // 2510
    addUnitAlias('isoWeek', 'W');                                                                                      // 2511
                                                                                                                       // 2512
    // PARSING                                                                                                         // 2513
                                                                                                                       // 2514
    addRegexToken('w',  match1to2);                                                                                    // 2515
    addRegexToken('ww', match1to2, match2);                                                                            // 2516
    addRegexToken('W',  match1to2);                                                                                    // 2517
    addRegexToken('WW', match1to2, match2);                                                                            // 2518
                                                                                                                       // 2519
    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {                                  // 2520
        week[token.substr(0, 1)] = toInt(input);                                                                       // 2521
    });                                                                                                                // 2522
                                                                                                                       // 2523
    // HELPERS                                                                                                         // 2524
                                                                                                                       // 2525
    // LOCALES                                                                                                         // 2526
                                                                                                                       // 2527
    function localeWeek (mom) {                                                                                        // 2528
        return weekOfYear(mom, this._week.dow, this._week.doy).week;                                                   // 2529
    }                                                                                                                  // 2530
                                                                                                                       // 2531
    var defaultLocaleWeek = {                                                                                          // 2532
        dow : 0, // Sunday is the first day of the week.                                                               // 2533
        doy : 6  // The week that contains Jan 1st is the first week of the year.                                      // 2534
    };                                                                                                                 // 2535
                                                                                                                       // 2536
    function localeFirstDayOfWeek () {                                                                                 // 2537
        return this._week.dow;                                                                                         // 2538
    }                                                                                                                  // 2539
                                                                                                                       // 2540
    function localeFirstDayOfYear () {                                                                                 // 2541
        return this._week.doy;                                                                                         // 2542
    }                                                                                                                  // 2543
                                                                                                                       // 2544
    // MOMENTS                                                                                                         // 2545
                                                                                                                       // 2546
    function getSetWeek (input) {                                                                                      // 2547
        var week = this.localeData().week(this);                                                                       // 2548
        return input == null ? week : this.add((input - week) * 7, 'd');                                               // 2549
    }                                                                                                                  // 2550
                                                                                                                       // 2551
    function getSetISOWeek (input) {                                                                                   // 2552
        var week = weekOfYear(this, 1, 4).week;                                                                        // 2553
        return input == null ? week : this.add((input - week) * 7, 'd');                                               // 2554
    }                                                                                                                  // 2555
                                                                                                                       // 2556
    // FORMATTING                                                                                                      // 2557
                                                                                                                       // 2558
    addFormatToken('D', ['DD', 2], 'Do', 'date');                                                                      // 2559
                                                                                                                       // 2560
    // ALIASES                                                                                                         // 2561
                                                                                                                       // 2562
    addUnitAlias('date', 'D');                                                                                         // 2563
                                                                                                                       // 2564
    // PARSING                                                                                                         // 2565
                                                                                                                       // 2566
    addRegexToken('D',  match1to2);                                                                                    // 2567
    addRegexToken('DD', match1to2, match2);                                                                            // 2568
    addRegexToken('Do', function (isStrict, locale) {                                                                  // 2569
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;                                          // 2570
    });                                                                                                                // 2571
                                                                                                                       // 2572
    addParseToken(['D', 'DD'], DATE);                                                                                  // 2573
    addParseToken('Do', function (input, array) {                                                                      // 2574
        array[DATE] = toInt(input.match(match1to2)[0], 10);                                                            // 2575
    });                                                                                                                // 2576
                                                                                                                       // 2577
    // MOMENTS                                                                                                         // 2578
                                                                                                                       // 2579
    var getSetDayOfMonth = makeGetSet('Date', true);                                                                   // 2580
                                                                                                                       // 2581
    // FORMATTING                                                                                                      // 2582
                                                                                                                       // 2583
    addFormatToken('d', 0, 'do', 'day');                                                                               // 2584
                                                                                                                       // 2585
    addFormatToken('dd', 0, 0, function (format) {                                                                     // 2586
        return this.localeData().weekdaysMin(this, format);                                                            // 2587
    });                                                                                                                // 2588
                                                                                                                       // 2589
    addFormatToken('ddd', 0, 0, function (format) {                                                                    // 2590
        return this.localeData().weekdaysShort(this, format);                                                          // 2591
    });                                                                                                                // 2592
                                                                                                                       // 2593
    addFormatToken('dddd', 0, 0, function (format) {                                                                   // 2594
        return this.localeData().weekdays(this, format);                                                               // 2595
    });                                                                                                                // 2596
                                                                                                                       // 2597
    addFormatToken('e', 0, 0, 'weekday');                                                                              // 2598
    addFormatToken('E', 0, 0, 'isoWeekday');                                                                           // 2599
                                                                                                                       // 2600
    // ALIASES                                                                                                         // 2601
                                                                                                                       // 2602
    addUnitAlias('day', 'd');                                                                                          // 2603
    addUnitAlias('weekday', 'e');                                                                                      // 2604
    addUnitAlias('isoWeekday', 'E');                                                                                   // 2605
                                                                                                                       // 2606
    // PARSING                                                                                                         // 2607
                                                                                                                       // 2608
    addRegexToken('d',    match1to2);                                                                                  // 2609
    addRegexToken('e',    match1to2);                                                                                  // 2610
    addRegexToken('E',    match1to2);                                                                                  // 2611
    addRegexToken('dd',   matchWord);                                                                                  // 2612
    addRegexToken('ddd',  matchWord);                                                                                  // 2613
    addRegexToken('dddd', matchWord);                                                                                  // 2614
                                                                                                                       // 2615
    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {                                   // 2616
        var weekday = config._locale.weekdaysParse(input, token, config._strict);                                      // 2617
        // if we didn't get a weekday name, mark the date as invalid                                                   // 2618
        if (weekday != null) {                                                                                         // 2619
            week.d = weekday;                                                                                          // 2620
        } else {                                                                                                       // 2621
            getParsingFlags(config).invalidWeekday = input;                                                            // 2622
        }                                                                                                              // 2623
    });                                                                                                                // 2624
                                                                                                                       // 2625
    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {                                         // 2626
        week[token] = toInt(input);                                                                                    // 2627
    });                                                                                                                // 2628
                                                                                                                       // 2629
    // HELPERS                                                                                                         // 2630
                                                                                                                       // 2631
    function parseWeekday(input, locale) {                                                                             // 2632
        if (typeof input !== 'string') {                                                                               // 2633
            return input;                                                                                              // 2634
        }                                                                                                              // 2635
                                                                                                                       // 2636
        if (!isNaN(input)) {                                                                                           // 2637
            return parseInt(input, 10);                                                                                // 2638
        }                                                                                                              // 2639
                                                                                                                       // 2640
        input = locale.weekdaysParse(input);                                                                           // 2641
        if (typeof input === 'number') {                                                                               // 2642
            return input;                                                                                              // 2643
        }                                                                                                              // 2644
                                                                                                                       // 2645
        return null;                                                                                                   // 2646
    }                                                                                                                  // 2647
                                                                                                                       // 2648
    // LOCALES                                                                                                         // 2649
                                                                                                                       // 2650
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');                 // 2651
    function localeWeekdays (m, format) {                                                                              // 2652
        return isArray(this._weekdays) ? this._weekdays[m.day()] :                                                     // 2653
            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];                   // 2654
    }                                                                                                                  // 2655
                                                                                                                       // 2656
    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');                                         // 2657
    function localeWeekdaysShort (m) {                                                                                 // 2658
        return this._weekdaysShort[m.day()];                                                                           // 2659
    }                                                                                                                  // 2660
                                                                                                                       // 2661
    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');                                                  // 2662
    function localeWeekdaysMin (m) {                                                                                   // 2663
        return this._weekdaysMin[m.day()];                                                                             // 2664
    }                                                                                                                  // 2665
                                                                                                                       // 2666
    function localeWeekdaysParse (weekdayName, format, strict) {                                                       // 2667
        var i, mom, regex;                                                                                             // 2668
                                                                                                                       // 2669
        if (!this._weekdaysParse) {                                                                                    // 2670
            this._weekdaysParse = [];                                                                                  // 2671
            this._minWeekdaysParse = [];                                                                               // 2672
            this._shortWeekdaysParse = [];                                                                             // 2673
            this._fullWeekdaysParse = [];                                                                              // 2674
        }                                                                                                              // 2675
                                                                                                                       // 2676
        for (i = 0; i < 7; i++) {                                                                                      // 2677
            // make the regex if we don't have it already                                                              // 2678
                                                                                                                       // 2679
            mom = local__createLocal([2000, 1]).day(i);                                                                // 2680
            if (strict && !this._fullWeekdaysParse[i]) {                                                               // 2681
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');  // 2682
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
            }                                                                                                          // 2685
            if (!this._weekdaysParse[i]) {                                                                             // 2686
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');                                      // 2688
            }                                                                                                          // 2689
            // test the regex                                                                                          // 2690
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {                         // 2691
                return i;                                                                                              // 2692
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {                  // 2693
                return i;                                                                                              // 2694
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {                     // 2695
                return i;                                                                                              // 2696
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {                                          // 2697
                return i;                                                                                              // 2698
            }                                                                                                          // 2699
        }                                                                                                              // 2700
    }                                                                                                                  // 2701
                                                                                                                       // 2702
    // MOMENTS                                                                                                         // 2703
                                                                                                                       // 2704
    function getSetDayOfWeek (input) {                                                                                 // 2705
        if (!this.isValid()) {                                                                                         // 2706
            return input != null ? this : NaN;                                                                         // 2707
        }                                                                                                              // 2708
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();                                                // 2709
        if (input != null) {                                                                                           // 2710
            input = parseWeekday(input, this.localeData());                                                            // 2711
            return this.add(input - day, 'd');                                                                         // 2712
        } else {                                                                                                       // 2713
            return day;                                                                                                // 2714
        }                                                                                                              // 2715
    }                                                                                                                  // 2716
                                                                                                                       // 2717
    function getSetLocaleDayOfWeek (input) {                                                                           // 2718
        if (!this.isValid()) {                                                                                         // 2719
            return input != null ? this : NaN;                                                                         // 2720
        }                                                                                                              // 2721
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;                                              // 2722
        return input == null ? weekday : this.add(input - weekday, 'd');                                               // 2723
    }                                                                                                                  // 2724
                                                                                                                       // 2725
    function getSetISODayOfWeek (input) {                                                                              // 2726
        if (!this.isValid()) {                                                                                         // 2727
            return input != null ? this : NaN;                                                                         // 2728
        }                                                                                                              // 2729
        // behaves the same as moment#day except                                                                       // 2730
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)                                              // 2731
        // as a setter, sunday should belong to the previous week.                                                     // 2732
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);                         // 2733
    }                                                                                                                  // 2734
                                                                                                                       // 2735
    // FORMATTING                                                                                                      // 2736
                                                                                                                       // 2737
    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');                                                           // 2738
                                                                                                                       // 2739
    // ALIASES                                                                                                         // 2740
                                                                                                                       // 2741
    addUnitAlias('dayOfYear', 'DDD');                                                                                  // 2742
                                                                                                                       // 2743
    // PARSING                                                                                                         // 2744
                                                                                                                       // 2745
    addRegexToken('DDD',  match1to3);                                                                                  // 2746
    addRegexToken('DDDD', match3);                                                                                     // 2747
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {                                                   // 2748
        config._dayOfYear = toInt(input);                                                                              // 2749
    });                                                                                                                // 2750
                                                                                                                       // 2751
    // HELPERS                                                                                                         // 2752
                                                                                                                       // 2753
    // MOMENTS                                                                                                         // 2754
                                                                                                                       // 2755
    function getSetDayOfYear (input) {                                                                                 // 2756
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;          // 2757
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');                                         // 2758
    }                                                                                                                  // 2759
                                                                                                                       // 2760
    // FORMATTING                                                                                                      // 2761
                                                                                                                       // 2762
    function hFormat() {                                                                                               // 2763
        return this.hours() % 12 || 12;                                                                                // 2764
    }                                                                                                                  // 2765
                                                                                                                       // 2766
    addFormatToken('H', ['HH', 2], 0, 'hour');                                                                         // 2767
    addFormatToken('h', ['hh', 2], 0, hFormat);                                                                        // 2768
                                                                                                                       // 2769
    addFormatToken('hmm', 0, 0, function () {                                                                          // 2770
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);                                                 // 2771
    });                                                                                                                // 2772
                                                                                                                       // 2773
    addFormatToken('hmmss', 0, 0, function () {                                                                        // 2774
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +                                                // 2775
            zeroFill(this.seconds(), 2);                                                                               // 2776
    });                                                                                                                // 2777
                                                                                                                       // 2778
    addFormatToken('Hmm', 0, 0, function () {                                                                          // 2779
        return '' + this.hours() + zeroFill(this.minutes(), 2);                                                        // 2780
    });                                                                                                                // 2781
                                                                                                                       // 2782
    addFormatToken('Hmmss', 0, 0, function () {                                                                        // 2783
        return '' + this.hours() + zeroFill(this.minutes(), 2) +                                                       // 2784
            zeroFill(this.seconds(), 2);                                                                               // 2785
    });                                                                                                                // 2786
                                                                                                                       // 2787
    function meridiem (token, lowercase) {                                                                             // 2788
        addFormatToken(token, 0, 0, function () {                                                                      // 2789
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);                                // 2790
        });                                                                                                            // 2791
    }                                                                                                                  // 2792
                                                                                                                       // 2793
    meridiem('a', true);                                                                                               // 2794
    meridiem('A', false);                                                                                              // 2795
                                                                                                                       // 2796
    // ALIASES                                                                                                         // 2797
                                                                                                                       // 2798
    addUnitAlias('hour', 'h');                                                                                         // 2799
                                                                                                                       // 2800
    // PARSING                                                                                                         // 2801
                                                                                                                       // 2802
    function matchMeridiem (isStrict, locale) {                                                                        // 2803
        return locale._meridiemParse;                                                                                  // 2804
    }                                                                                                                  // 2805
                                                                                                                       // 2806
    addRegexToken('a',  matchMeridiem);                                                                                // 2807
    addRegexToken('A',  matchMeridiem);                                                                                // 2808
    addRegexToken('H',  match1to2);                                                                                    // 2809
    addRegexToken('h',  match1to2);                                                                                    // 2810
    addRegexToken('HH', match1to2, match2);                                                                            // 2811
    addRegexToken('hh', match1to2, match2);                                                                            // 2812
                                                                                                                       // 2813
    addRegexToken('hmm', match3to4);                                                                                   // 2814
    addRegexToken('hmmss', match5to6);                                                                                 // 2815
    addRegexToken('Hmm', match3to4);                                                                                   // 2816
    addRegexToken('Hmmss', match5to6);                                                                                 // 2817
                                                                                                                       // 2818
    addParseToken(['H', 'HH'], HOUR);                                                                                  // 2819
    addParseToken(['a', 'A'], function (input, array, config) {                                                        // 2820
        config._isPm = config._locale.isPM(input);                                                                     // 2821
        config._meridiem = input;                                                                                      // 2822
    });                                                                                                                // 2823
    addParseToken(['h', 'hh'], function (input, array, config) {                                                       // 2824
        array[HOUR] = toInt(input);                                                                                    // 2825
        getParsingFlags(config).bigHour = true;                                                                        // 2826
    });                                                                                                                // 2827
    addParseToken('hmm', function (input, array, config) {                                                             // 2828
        var pos = input.length - 2;                                                                                    // 2829
        array[HOUR] = toInt(input.substr(0, pos));                                                                     // 2830
        array[MINUTE] = toInt(input.substr(pos));                                                                      // 2831
        getParsingFlags(config).bigHour = true;                                                                        // 2832
    });                                                                                                                // 2833
    addParseToken('hmmss', function (input, array, config) {                                                           // 2834
        var pos1 = input.length - 4;                                                                                   // 2835
        var pos2 = input.length - 2;                                                                                   // 2836
        array[HOUR] = toInt(input.substr(0, pos1));                                                                    // 2837
        array[MINUTE] = toInt(input.substr(pos1, 2));                                                                  // 2838
        array[SECOND] = toInt(input.substr(pos2));                                                                     // 2839
        getParsingFlags(config).bigHour = true;                                                                        // 2840
    });                                                                                                                // 2841
    addParseToken('Hmm', function (input, array, config) {                                                             // 2842
        var pos = input.length - 2;                                                                                    // 2843
        array[HOUR] = toInt(input.substr(0, pos));                                                                     // 2844
        array[MINUTE] = toInt(input.substr(pos));                                                                      // 2845
    });                                                                                                                // 2846
    addParseToken('Hmmss', function (input, array, config) {                                                           // 2847
        var pos1 = input.length - 4;                                                                                   // 2848
        var pos2 = input.length - 2;                                                                                   // 2849
        array[HOUR] = toInt(input.substr(0, pos1));                                                                    // 2850
        array[MINUTE] = toInt(input.substr(pos1, 2));                                                                  // 2851
        array[SECOND] = toInt(input.substr(pos2));                                                                     // 2852
    });                                                                                                                // 2853
                                                                                                                       // 2854
    // LOCALES                                                                                                         // 2855
                                                                                                                       // 2856
    function localeIsPM (input) {                                                                                      // 2857
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays                             // 2858
        // Using charAt should be more compatible.                                                                     // 2859
        return ((input + '').toLowerCase().charAt(0) === 'p');                                                         // 2860
    }                                                                                                                  // 2861
                                                                                                                       // 2862
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;                                                                  // 2863
    function localeMeridiem (hours, minutes, isLower) {                                                                // 2864
        if (hours > 11) {                                                                                              // 2865
            return isLower ? 'pm' : 'PM';                                                                              // 2866
        } else {                                                                                                       // 2867
            return isLower ? 'am' : 'AM';                                                                              // 2868
        }                                                                                                              // 2869
    }                                                                                                                  // 2870
                                                                                                                       // 2871
                                                                                                                       // 2872
    // MOMENTS                                                                                                         // 2873
                                                                                                                       // 2874
    // Setting the hour should keep the time, because the user explicitly                                              // 2875
    // specified which hour he wants. So trying to maintain the same hour (in                                          // 2876
    // a new timezone) makes sense. Adding/subtracting hours does not follow                                           // 2877
    // this rule.                                                                                                      // 2878
    var getSetHour = makeGetSet('Hours', true);                                                                        // 2879
                                                                                                                       // 2880
    // FORMATTING                                                                                                      // 2881
                                                                                                                       // 2882
    addFormatToken('m', ['mm', 2], 0, 'minute');                                                                       // 2883
                                                                                                                       // 2884
    // ALIASES                                                                                                         // 2885
                                                                                                                       // 2886
    addUnitAlias('minute', 'm');                                                                                       // 2887
                                                                                                                       // 2888
    // PARSING                                                                                                         // 2889
                                                                                                                       // 2890
    addRegexToken('m',  match1to2);                                                                                    // 2891
    addRegexToken('mm', match1to2, match2);                                                                            // 2892
    addParseToken(['m', 'mm'], MINUTE);                                                                                // 2893
                                                                                                                       // 2894
    // MOMENTS                                                                                                         // 2895
                                                                                                                       // 2896
    var getSetMinute = makeGetSet('Minutes', false);                                                                   // 2897
                                                                                                                       // 2898
    // FORMATTING                                                                                                      // 2899
                                                                                                                       // 2900
    addFormatToken('s', ['ss', 2], 0, 'second');                                                                       // 2901
                                                                                                                       // 2902
    // ALIASES                                                                                                         // 2903
                                                                                                                       // 2904
    addUnitAlias('second', 's');                                                                                       // 2905
                                                                                                                       // 2906
    // PARSING                                                                                                         // 2907
                                                                                                                       // 2908
    addRegexToken('s',  match1to2);                                                                                    // 2909
    addRegexToken('ss', match1to2, match2);                                                                            // 2910
    addParseToken(['s', 'ss'], SECOND);                                                                                // 2911
                                                                                                                       // 2912
    // MOMENTS                                                                                                         // 2913
                                                                                                                       // 2914
    var getSetSecond = makeGetSet('Seconds', false);                                                                   // 2915
                                                                                                                       // 2916
    // FORMATTING                                                                                                      // 2917
                                                                                                                       // 2918
    addFormatToken('S', 0, 0, function () {                                                                            // 2919
        return ~~(this.millisecond() / 100);                                                                           // 2920
    });                                                                                                                // 2921
                                                                                                                       // 2922
    addFormatToken(0, ['SS', 2], 0, function () {                                                                      // 2923
        return ~~(this.millisecond() / 10);                                                                            // 2924
    });                                                                                                                // 2925
                                                                                                                       // 2926
    addFormatToken(0, ['SSS', 3], 0, 'millisecond');                                                                   // 2927
    addFormatToken(0, ['SSSS', 4], 0, function () {                                                                    // 2928
        return this.millisecond() * 10;                                                                                // 2929
    });                                                                                                                // 2930
    addFormatToken(0, ['SSSSS', 5], 0, function () {                                                                   // 2931
        return this.millisecond() * 100;                                                                               // 2932
    });                                                                                                                // 2933
    addFormatToken(0, ['SSSSSS', 6], 0, function () {                                                                  // 2934
        return this.millisecond() * 1000;                                                                              // 2935
    });                                                                                                                // 2936
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {                                                                 // 2937
        return this.millisecond() * 10000;                                                                             // 2938
    });                                                                                                                // 2939
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {                                                                // 2940
        return this.millisecond() * 100000;                                                                            // 2941
    });                                                                                                                // 2942
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {                                                               // 2943
        return this.millisecond() * 1000000;                                                                           // 2944
    });                                                                                                                // 2945
                                                                                                                       // 2946
                                                                                                                       // 2947
    // ALIASES                                                                                                         // 2948
                                                                                                                       // 2949
    addUnitAlias('millisecond', 'ms');                                                                                 // 2950
                                                                                                                       // 2951
    // PARSING                                                                                                         // 2952
                                                                                                                       // 2953
    addRegexToken('S',    match1to3, match1);                                                                          // 2954
    addRegexToken('SS',   match1to3, match2);                                                                          // 2955
    addRegexToken('SSS',  match1to3, match3);                                                                          // 2956
                                                                                                                       // 2957
    var token;                                                                                                         // 2958
    for (token = 'SSSS'; token.length <= 9; token += 'S') {                                                            // 2959
        addRegexToken(token, matchUnsigned);                                                                           // 2960
    }                                                                                                                  // 2961
                                                                                                                       // 2962
    function parseMs(input, array) {                                                                                   // 2963
        array[MILLISECOND] = toInt(('0.' + input) * 1000);                                                             // 2964
    }                                                                                                                  // 2965
                                                                                                                       // 2966
    for (token = 'S'; token.length <= 9; token += 'S') {                                                               // 2967
        addParseToken(token, parseMs);                                                                                 // 2968
    }                                                                                                                  // 2969
    // MOMENTS                                                                                                         // 2970
                                                                                                                       // 2971
    var getSetMillisecond = makeGetSet('Milliseconds', false);                                                         // 2972
                                                                                                                       // 2973
    // FORMATTING                                                                                                      // 2974
                                                                                                                       // 2975
    addFormatToken('z',  0, 0, 'zoneAbbr');                                                                            // 2976
    addFormatToken('zz', 0, 0, 'zoneName');                                                                            // 2977
                                                                                                                       // 2978
    // MOMENTS                                                                                                         // 2979
                                                                                                                       // 2980
    function getZoneAbbr () {                                                                                          // 2981
        return this._isUTC ? 'UTC' : '';                                                                               // 2982
    }                                                                                                                  // 2983
                                                                                                                       // 2984
    function getZoneName () {                                                                                          // 2985
        return this._isUTC ? 'Coordinated Universal Time' : '';                                                        // 2986
    }                                                                                                                  // 2987
                                                                                                                       // 2988
    var momentPrototype__proto = Moment.prototype;                                                                     // 2989
                                                                                                                       // 2990
    momentPrototype__proto.add               = add_subtract__add;                                                      // 2991
    momentPrototype__proto.calendar          = moment_calendar__calendar;                                              // 2992
    momentPrototype__proto.clone             = clone;                                                                  // 2993
    momentPrototype__proto.diff              = diff;                                                                   // 2994
    momentPrototype__proto.endOf             = endOf;                                                                  // 2995
    momentPrototype__proto.format            = moment_format__format;                                                  // 2996
    momentPrototype__proto.from              = from;                                                                   // 2997
    momentPrototype__proto.fromNow           = fromNow;                                                                // 2998
    momentPrototype__proto.to                = to;                                                                     // 2999
    momentPrototype__proto.toNow             = toNow;                                                                  // 3000
    momentPrototype__proto.get               = getSet;                                                                 // 3001
    momentPrototype__proto.invalidAt         = invalidAt;                                                              // 3002
    momentPrototype__proto.isAfter           = isAfter;                                                                // 3003
    momentPrototype__proto.isBefore          = isBefore;                                                               // 3004
    momentPrototype__proto.isBetween         = isBetween;                                                              // 3005
    momentPrototype__proto.isSame            = isSame;                                                                 // 3006
    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;                                                          // 3007
    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;                                                         // 3008
    momentPrototype__proto.isValid           = moment_valid__isValid;                                                  // 3009
    momentPrototype__proto.lang              = lang;                                                                   // 3010
    momentPrototype__proto.locale            = locale;                                                                 // 3011
    momentPrototype__proto.localeData        = localeData;                                                             // 3012
    momentPrototype__proto.max               = prototypeMax;                                                           // 3013
    momentPrototype__proto.min               = prototypeMin;                                                           // 3014
    momentPrototype__proto.parsingFlags      = parsingFlags;                                                           // 3015
    momentPrototype__proto.set               = getSet;                                                                 // 3016
    momentPrototype__proto.startOf           = startOf;                                                                // 3017
    momentPrototype__proto.subtract          = add_subtract__subtract;                                                 // 3018
    momentPrototype__proto.toArray           = toArray;                                                                // 3019
    momentPrototype__proto.toObject          = toObject;                                                               // 3020
    momentPrototype__proto.toDate            = toDate;                                                                 // 3021
    momentPrototype__proto.toISOString       = moment_format__toISOString;                                             // 3022
    momentPrototype__proto.toJSON            = toJSON;                                                                 // 3023
    momentPrototype__proto.toString          = toString;                                                               // 3024
    momentPrototype__proto.unix              = unix;                                                                   // 3025
    momentPrototype__proto.valueOf           = to_type__valueOf;                                                       // 3026
    momentPrototype__proto.creationData      = creationData;                                                           // 3027
                                                                                                                       // 3028
    // Year                                                                                                            // 3029
    momentPrototype__proto.year       = getSetYear;                                                                    // 3030
    momentPrototype__proto.isLeapYear = getIsLeapYear;                                                                 // 3031
                                                                                                                       // 3032
    // Week Year                                                                                                       // 3033
    momentPrototype__proto.weekYear    = getSetWeekYear;                                                               // 3034
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;                                                            // 3035
                                                                                                                       // 3036
    // Quarter                                                                                                         // 3037
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;                                  // 3038
                                                                                                                       // 3039
    // Month                                                                                                           // 3040
    momentPrototype__proto.month       = getSetMonth;                                                                  // 3041
    momentPrototype__proto.daysInMonth = getDaysInMonth;                                                               // 3042
                                                                                                                       // 3043
    // Week                                                                                                            // 3044
    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;                          // 3045
    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;                       // 3046
    momentPrototype__proto.weeksInYear    = getWeeksInYear;                                                            // 3047
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;                                                         // 3048
                                                                                                                       // 3049
    // Day                                                                                                             // 3050
    momentPrototype__proto.date       = getSetDayOfMonth;                                                              // 3051
    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;                     // 3052
    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;                                                         // 3053
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;                                                            // 3054
    momentPrototype__proto.dayOfYear  = getSetDayOfYear;                                                               // 3055
                                                                                                                       // 3056
    // Hour                                                                                                            // 3057
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;                                           // 3058
                                                                                                                       // 3059
    // Minute                                                                                                          // 3060
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;                                     // 3061
                                                                                                                       // 3062
    // Second                                                                                                          // 3063
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;                                     // 3064
                                                                                                                       // 3065
    // Millisecond                                                                                                     // 3066
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;                      // 3067
                                                                                                                       // 3068
    // Offset                                                                                                          // 3069
    momentPrototype__proto.utcOffset            = getSetOffset;                                                        // 3070
    momentPrototype__proto.utc                  = setOffsetToUTC;                                                      // 3071
    momentPrototype__proto.local                = setOffsetToLocal;                                                    // 3072
    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;                                             // 3073
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;                                                // 3074
    momentPrototype__proto.isDST                = isDaylightSavingTime;                                                // 3075
    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;                                         // 3076
    momentPrototype__proto.isLocal              = isLocal;                                                             // 3077
    momentPrototype__proto.isUtcOffset          = isUtcOffset;                                                         // 3078
    momentPrototype__proto.isUtc                = isUtc;                                                               // 3079
    momentPrototype__proto.isUTC                = isUtc;                                                               // 3080
                                                                                                                       // 3081
    // Timezone                                                                                                        // 3082
    momentPrototype__proto.zoneAbbr = getZoneAbbr;                                                                     // 3083
    momentPrototype__proto.zoneName = getZoneName;                                                                     // 3084
                                                                                                                       // 3085
    // Deprecations                                                                                                    // 3086
    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);    // 3087
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);        // 3088
    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);           // 3089
    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);
                                                                                                                       // 3091
    var momentPrototype = momentPrototype__proto;                                                                      // 3092
                                                                                                                       // 3093
    function moment_moment__createUnix (input) {                                                                       // 3094
        return local__createLocal(input * 1000);                                                                       // 3095
    }                                                                                                                  // 3096
                                                                                                                       // 3097
    function moment_moment__createInZone () {                                                                          // 3098
        return local__createLocal.apply(null, arguments).parseZone();                                                  // 3099
    }                                                                                                                  // 3100
                                                                                                                       // 3101
    var defaultCalendar = {                                                                                            // 3102
        sameDay : '[Today at] LT',                                                                                     // 3103
        nextDay : '[Tomorrow at] LT',                                                                                  // 3104
        nextWeek : 'dddd [at] LT',                                                                                     // 3105
        lastDay : '[Yesterday at] LT',                                                                                 // 3106
        lastWeek : '[Last] dddd [at] LT',                                                                              // 3107
        sameElse : 'L'                                                                                                 // 3108
    };                                                                                                                 // 3109
                                                                                                                       // 3110
    function locale_calendar__calendar (key, mom, now) {                                                               // 3111
        var output = this._calendar[key];                                                                              // 3112
        return isFunction(output) ? output.call(mom, now) : output;                                                    // 3113
    }                                                                                                                  // 3114
                                                                                                                       // 3115
    var defaultLongDateFormat = {                                                                                      // 3116
        LTS  : 'h:mm:ss A',                                                                                            // 3117
        LT   : 'h:mm A',                                                                                               // 3118
        L    : 'MM/DD/YYYY',                                                                                           // 3119
        LL   : 'MMMM D, YYYY',                                                                                         // 3120
        LLL  : 'MMMM D, YYYY h:mm A',                                                                                  // 3121
        LLLL : 'dddd, MMMM D, YYYY h:mm A'                                                                             // 3122
    };                                                                                                                 // 3123
                                                                                                                       // 3124
    function longDateFormat (key) {                                                                                    // 3125
        var format = this._longDateFormat[key],                                                                        // 3126
            formatUpper = this._longDateFormat[key.toUpperCase()];                                                     // 3127
                                                                                                                       // 3128
        if (format || !formatUpper) {                                                                                  // 3129
            return format;                                                                                             // 3130
        }                                                                                                              // 3131
                                                                                                                       // 3132
        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {                           // 3133
            return val.slice(1);                                                                                       // 3134
        });                                                                                                            // 3135
                                                                                                                       // 3136
        return this._longDateFormat[key];                                                                              // 3137
    }                                                                                                                  // 3138
                                                                                                                       // 3139
    var defaultInvalidDate = 'Invalid date';                                                                           // 3140
                                                                                                                       // 3141
    function invalidDate () {                                                                                          // 3142
        return this._invalidDate;                                                                                      // 3143
    }                                                                                                                  // 3144
                                                                                                                       // 3145
    var defaultOrdinal = '%d';                                                                                         // 3146
    var defaultOrdinalParse = /\d{1,2}/;                                                                               // 3147
                                                                                                                       // 3148
    function ordinal (number) {                                                                                        // 3149
        return this._ordinal.replace('%d', number);                                                                    // 3150
    }                                                                                                                  // 3151
                                                                                                                       // 3152
    function preParsePostFormat (string) {                                                                             // 3153
        return string;                                                                                                 // 3154
    }                                                                                                                  // 3155
                                                                                                                       // 3156
    var defaultRelativeTime = {                                                                                        // 3157
        future : 'in %s',                                                                                              // 3158
        past   : '%s ago',                                                                                             // 3159
        s  : 'a few seconds',                                                                                          // 3160
        m  : 'a minute',                                                                                               // 3161
        mm : '%d minutes',                                                                                             // 3162
        h  : 'an hour',                                                                                                // 3163
        hh : '%d hours',                                                                                               // 3164
        d  : 'a day',                                                                                                  // 3165
        dd : '%d days',                                                                                                // 3166
        M  : 'a month',                                                                                                // 3167
        MM : '%d months',                                                                                              // 3168
        y  : 'a year',                                                                                                 // 3169
        yy : '%d years'                                                                                                // 3170
    };                                                                                                                 // 3171
                                                                                                                       // 3172
    function relative__relativeTime (number, withoutSuffix, string, isFuture) {                                        // 3173
        var output = this._relativeTime[string];                                                                       // 3174
        return (isFunction(output)) ?                                                                                  // 3175
            output(number, withoutSuffix, string, isFuture) :                                                          // 3176
            output.replace(/%d/i, number);                                                                             // 3177
    }                                                                                                                  // 3178
                                                                                                                       // 3179
    function pastFuture (diff, output) {                                                                               // 3180
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];                                                 // 3181
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);                                    // 3182
    }                                                                                                                  // 3183
                                                                                                                       // 3184
    var prototype__proto = Locale.prototype;                                                                           // 3185
                                                                                                                       // 3186
    prototype__proto._calendar       = defaultCalendar;                                                                // 3187
    prototype__proto.calendar        = locale_calendar__calendar;                                                      // 3188
    prototype__proto._longDateFormat = defaultLongDateFormat;                                                          // 3189
    prototype__proto.longDateFormat  = longDateFormat;                                                                 // 3190
    prototype__proto._invalidDate    = defaultInvalidDate;                                                             // 3191
    prototype__proto.invalidDate     = invalidDate;                                                                    // 3192
    prototype__proto._ordinal        = defaultOrdinal;                                                                 // 3193
    prototype__proto.ordinal         = ordinal;                                                                        // 3194
    prototype__proto._ordinalParse   = defaultOrdinalParse;                                                            // 3195
    prototype__proto.preparse        = preParsePostFormat;                                                             // 3196
    prototype__proto.postformat      = preParsePostFormat;                                                             // 3197
    prototype__proto._relativeTime   = defaultRelativeTime;                                                            // 3198
    prototype__proto.relativeTime    = relative__relativeTime;                                                         // 3199
    prototype__proto.pastFuture      = pastFuture;                                                                     // 3200
    prototype__proto.set             = locale_set__set;                                                                // 3201
                                                                                                                       // 3202
    // Month                                                                                                           // 3203
    prototype__proto.months            =        localeMonths;                                                          // 3204
    prototype__proto._months           = defaultLocaleMonths;                                                          // 3205
    prototype__proto.monthsShort       =        localeMonthsShort;                                                     // 3206
    prototype__proto._monthsShort      = defaultLocaleMonthsShort;                                                     // 3207
    prototype__proto.monthsParse       =        localeMonthsParse;                                                     // 3208
    prototype__proto._monthsRegex      = defaultMonthsRegex;                                                           // 3209
    prototype__proto.monthsRegex       = monthsRegex;                                                                  // 3210
    prototype__proto._monthsShortRegex = defaultMonthsShortRegex;                                                      // 3211
    prototype__proto.monthsShortRegex  = monthsShortRegex;                                                             // 3212
                                                                                                                       // 3213
    // Week                                                                                                            // 3214
    prototype__proto.week = localeWeek;                                                                                // 3215
    prototype__proto._week = defaultLocaleWeek;                                                                        // 3216
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;                                                            // 3217
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;                                                            // 3218
                                                                                                                       // 3219
    // Day of Week                                                                                                     // 3220
    prototype__proto.weekdays       =        localeWeekdays;                                                           // 3221
    prototype__proto._weekdays      = defaultLocaleWeekdays;                                                           // 3222
    prototype__proto.weekdaysMin    =        localeWeekdaysMin;                                                        // 3223
    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;                                                        // 3224
    prototype__proto.weekdaysShort  =        localeWeekdaysShort;                                                      // 3225
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;                                                      // 3226
    prototype__proto.weekdaysParse  =        localeWeekdaysParse;                                                      // 3227
                                                                                                                       // 3228
    // Hours                                                                                                           // 3229
    prototype__proto.isPM = localeIsPM;                                                                                // 3230
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;                                                      // 3231
    prototype__proto.meridiem = localeMeridiem;                                                                        // 3232
                                                                                                                       // 3233
    function lists__get (format, index, field, setter) {                                                               // 3234
        var locale = locale_locales__getLocale();                                                                      // 3235
        var utc = create_utc__createUTC().set(setter, index);                                                          // 3236
        return locale[field](utc, format);                                                                             // 3237
    }                                                                                                                  // 3238
                                                                                                                       // 3239
    function list (format, index, field, count, setter) {                                                              // 3240
        if (typeof format === 'number') {                                                                              // 3241
            index = format;                                                                                            // 3242
            format = undefined;                                                                                        // 3243
        }                                                                                                              // 3244
                                                                                                                       // 3245
        format = format || '';                                                                                         // 3246
                                                                                                                       // 3247
        if (index != null) {                                                                                           // 3248
            return lists__get(format, index, field, setter);                                                           // 3249
        }                                                                                                              // 3250
                                                                                                                       // 3251
        var i;                                                                                                         // 3252
        var out = [];                                                                                                  // 3253
        for (i = 0; i < count; i++) {                                                                                  // 3254
            out[i] = lists__get(format, i, field, setter);                                                             // 3255
        }                                                                                                              // 3256
        return out;                                                                                                    // 3257
    }                                                                                                                  // 3258
                                                                                                                       // 3259
    function lists__listMonths (format, index) {                                                                       // 3260
        return list(format, index, 'months', 12, 'month');                                                             // 3261
    }                                                                                                                  // 3262
                                                                                                                       // 3263
    function lists__listMonthsShort (format, index) {                                                                  // 3264
        return list(format, index, 'monthsShort', 12, 'month');                                                        // 3265
    }                                                                                                                  // 3266
                                                                                                                       // 3267
    function lists__listWeekdays (format, index) {                                                                     // 3268
        return list(format, index, 'weekdays', 7, 'day');                                                              // 3269
    }                                                                                                                  // 3270
                                                                                                                       // 3271
    function lists__listWeekdaysShort (format, index) {                                                                // 3272
        return list(format, index, 'weekdaysShort', 7, 'day');                                                         // 3273
    }                                                                                                                  // 3274
                                                                                                                       // 3275
    function lists__listWeekdaysMin (format, index) {                                                                  // 3276
        return list(format, index, 'weekdaysMin', 7, 'day');                                                           // 3277
    }                                                                                                                  // 3278
                                                                                                                       // 3279
    locale_locales__getSetGlobalLocale('en', {                                                                         // 3280
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,                                                                          // 3281
        ordinal : function (number) {                                                                                  // 3282
            var b = number % 10,                                                                                       // 3283
                output = (toInt(number % 100 / 10) === 1) ? 'th' :                                                     // 3284
                (b === 1) ? 'st' :                                                                                     // 3285
                (b === 2) ? 'nd' :                                                                                     // 3286
                (b === 3) ? 'rd' : 'th';                                                                               // 3287
            return number + output;                                                                                    // 3288
        }                                                                                                              // 3289
    });                                                                                                                // 3290
                                                                                                                       // 3291
    // Side effect imports                                                                                             // 3292
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);
                                                                                                                       // 3295
    var mathAbs = Math.abs;                                                                                            // 3296
                                                                                                                       // 3297
    function duration_abs__abs () {                                                                                    // 3298
        var data           = this._data;                                                                               // 3299
                                                                                                                       // 3300
        this._milliseconds = mathAbs(this._milliseconds);                                                              // 3301
        this._days         = mathAbs(this._days);                                                                      // 3302
        this._months       = mathAbs(this._months);                                                                    // 3303
                                                                                                                       // 3304
        data.milliseconds  = mathAbs(data.milliseconds);                                                               // 3305
        data.seconds       = mathAbs(data.seconds);                                                                    // 3306
        data.minutes       = mathAbs(data.minutes);                                                                    // 3307
        data.hours         = mathAbs(data.hours);                                                                      // 3308
        data.months        = mathAbs(data.months);                                                                     // 3309
        data.years         = mathAbs(data.years);                                                                      // 3310
                                                                                                                       // 3311
        return this;                                                                                                   // 3312
    }                                                                                                                  // 3313
                                                                                                                       // 3314
    function duration_add_subtract__addSubtract (duration, input, value, direction) {                                  // 3315
        var other = create__createDuration(input, value);                                                              // 3316
                                                                                                                       // 3317
        duration._milliseconds += direction * other._milliseconds;                                                     // 3318
        duration._days         += direction * other._days;                                                             // 3319
        duration._months       += direction * other._months;                                                           // 3320
                                                                                                                       // 3321
        return duration._bubble();                                                                                     // 3322
    }                                                                                                                  // 3323
                                                                                                                       // 3324
    // supports only 2.0-style add(1, 's') or add(duration)                                                            // 3325
    function duration_add_subtract__add (input, value) {                                                               // 3326
        return duration_add_subtract__addSubtract(this, input, value, 1);                                              // 3327
    }                                                                                                                  // 3328
                                                                                                                       // 3329
    // supports only 2.0-style subtract(1, 's') or subtract(duration)                                                  // 3330
    function duration_add_subtract__subtract (input, value) {                                                          // 3331
        return duration_add_subtract__addSubtract(this, input, value, -1);                                             // 3332
    }                                                                                                                  // 3333
                                                                                                                       // 3334
    function absCeil (number) {                                                                                        // 3335
        if (number < 0) {                                                                                              // 3336
            return Math.floor(number);                                                                                 // 3337
        } else {                                                                                                       // 3338
            return Math.ceil(number);                                                                                  // 3339
        }                                                                                                              // 3340
    }                                                                                                                  // 3341
                                                                                                                       // 3342
    function bubble () {                                                                                               // 3343
        var milliseconds = this._milliseconds;                                                                         // 3344
        var days         = this._days;                                                                                 // 3345
        var months       = this._months;                                                                               // 3346
        var data         = this._data;                                                                                 // 3347
        var seconds, minutes, hours, years, monthsFromDays;                                                            // 3348
                                                                                                                       // 3349
        // if we have a mix of positive and negative values, bubble down first                                         // 3350
        // check: https://github.com/moment/moment/issues/2166                                                         // 3351
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||                                                       // 3352
                (milliseconds <= 0 && days <= 0 && months <= 0))) {                                                    // 3353
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;                                              // 3354
            days = 0;                                                                                                  // 3355
            months = 0;                                                                                                // 3356
        }                                                                                                              // 3357
                                                                                                                       // 3358
        // The following code bubbles up values, see the tests for                                                     // 3359
        // examples of what that means.                                                                                // 3360
        data.milliseconds = milliseconds % 1000;                                                                       // 3361
                                                                                                                       // 3362
        seconds           = absFloor(milliseconds / 1000);                                                             // 3363
        data.seconds      = seconds % 60;                                                                              // 3364
                                                                                                                       // 3365
        minutes           = absFloor(seconds / 60);                                                                    // 3366
        data.minutes      = minutes % 60;                                                                              // 3367
                                                                                                                       // 3368
        hours             = absFloor(minutes / 60);                                                                    // 3369
        data.hours        = hours % 24;                                                                                // 3370
                                                                                                                       // 3371
        days += absFloor(hours / 24);                                                                                  // 3372
                                                                                                                       // 3373
        // convert days to months                                                                                      // 3374
        monthsFromDays = absFloor(daysToMonths(days));                                                                 // 3375
        months += monthsFromDays;                                                                                      // 3376
        days -= absCeil(monthsToDays(monthsFromDays));                                                                 // 3377
                                                                                                                       // 3378
        // 12 months -> 1 year                                                                                         // 3379
        years = absFloor(months / 12);                                                                                 // 3380
        months %= 12;                                                                                                  // 3381
                                                                                                                       // 3382
        data.days   = days;                                                                                            // 3383
        data.months = months;                                                                                          // 3384
        data.years  = years;                                                                                           // 3385
                                                                                                                       // 3386
        return this;                                                                                                   // 3387
    }                                                                                                                  // 3388
                                                                                                                       // 3389
    function daysToMonths (days) {                                                                                     // 3390
        // 400 years have 146097 days (taking into account leap year rules)                                            // 3391
        // 400 years have 12 months === 4800                                                                           // 3392
        return days * 4800 / 146097;                                                                                   // 3393
    }                                                                                                                  // 3394
                                                                                                                       // 3395
    function monthsToDays (months) {                                                                                   // 3396
        // the reverse of daysToMonths                                                                                 // 3397
        return months * 146097 / 4800;                                                                                 // 3398
    }                                                                                                                  // 3399
                                                                                                                       // 3400
    function as (units) {                                                                                              // 3401
        var days;                                                                                                      // 3402
        var months;                                                                                                    // 3403
        var milliseconds = this._milliseconds;                                                                         // 3404
                                                                                                                       // 3405
        units = normalizeUnits(units);                                                                                 // 3406
                                                                                                                       // 3407
        if (units === 'month' || units === 'year') {                                                                   // 3408
            days   = this._days   + milliseconds / 864e5;                                                              // 3409
            months = this._months + daysToMonths(days);                                                                // 3410
            return units === 'month' ? months : months / 12;                                                           // 3411
        } else {                                                                                                       // 3412
            // handle milliseconds separately because of floating point math errors (issue #1867)                      // 3413
            days = this._days + Math.round(monthsToDays(this._months));                                                // 3414
            switch (units) {                                                                                           // 3415
                case 'week'   : return days / 7     + milliseconds / 6048e5;                                           // 3416
                case 'day'    : return days         + milliseconds / 864e5;                                            // 3417
                case 'hour'   : return days * 24    + milliseconds / 36e5;                                             // 3418
                case 'minute' : return days * 1440  + milliseconds / 6e4;                                              // 3419
                case 'second' : return days * 86400 + milliseconds / 1000;                                             // 3420
                // Math.floor prevents floating point math errors here                                                 // 3421
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;                                    // 3422
                default: throw new Error('Unknown unit ' + units);                                                     // 3423
            }                                                                                                          // 3424
        }                                                                                                              // 3425
    }                                                                                                                  // 3426
                                                                                                                       // 3427
    // TODO: Use this.as('ms')?                                                                                        // 3428
    function duration_as__valueOf () {                                                                                 // 3429
        return (                                                                                                       // 3430
            this._milliseconds +                                                                                       // 3431
            this._days * 864e5 +                                                                                       // 3432
            (this._months % 12) * 2592e6 +                                                                             // 3433
            toInt(this._months / 12) * 31536e6                                                                         // 3434
        );                                                                                                             // 3435
    }                                                                                                                  // 3436
                                                                                                                       // 3437
    function makeAs (alias) {                                                                                          // 3438
        return function () {                                                                                           // 3439
            return this.as(alias);                                                                                     // 3440
        };                                                                                                             // 3441
    }                                                                                                                  // 3442
                                                                                                                       // 3443
    var asMilliseconds = makeAs('ms');                                                                                 // 3444
    var asSeconds      = makeAs('s');                                                                                  // 3445
    var asMinutes      = makeAs('m');                                                                                  // 3446
    var asHours        = makeAs('h');                                                                                  // 3447
    var asDays         = makeAs('d');                                                                                  // 3448
    var asWeeks        = makeAs('w');                                                                                  // 3449
    var asMonths       = makeAs('M');                                                                                  // 3450
    var asYears        = makeAs('y');                                                                                  // 3451
                                                                                                                       // 3452
    function duration_get__get (units) {                                                                               // 3453
        units = normalizeUnits(units);                                                                                 // 3454
        return this[units + 's']();                                                                                    // 3455
    }                                                                                                                  // 3456
                                                                                                                       // 3457
    function makeGetter(name) {                                                                                        // 3458
        return function () {                                                                                           // 3459
            return this._data[name];                                                                                   // 3460
        };                                                                                                             // 3461
    }                                                                                                                  // 3462
                                                                                                                       // 3463
    var milliseconds = makeGetter('milliseconds');                                                                     // 3464
    var seconds      = makeGetter('seconds');                                                                          // 3465
    var minutes      = makeGetter('minutes');                                                                          // 3466
    var hours        = makeGetter('hours');                                                                            // 3467
    var days         = makeGetter('days');                                                                             // 3468
    var duration_get__months       = makeGetter('months');                                                             // 3469
    var years        = makeGetter('years');                                                                            // 3470
                                                                                                                       // 3471
    function weeks () {                                                                                                // 3472
        return absFloor(this.days() / 7);                                                                              // 3473
    }                                                                                                                  // 3474
                                                                                                                       // 3475
    var round = Math.round;                                                                                            // 3476
    var thresholds = {                                                                                                 // 3477
        s: 45,  // seconds to minute                                                                                   // 3478
        m: 45,  // minutes to hour                                                                                     // 3479
        h: 22,  // hours to day                                                                                        // 3480
        d: 26,  // days to month                                                                                       // 3481
        M: 11   // months to year                                                                                      // 3482
    };                                                                                                                 // 3483
                                                                                                                       // 3484
    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize                          // 3485
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {                                      // 3486
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);                                    // 3487
    }                                                                                                                  // 3488
                                                                                                                       // 3489
    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {                                 // 3490
        var duration = create__createDuration(posNegDuration).abs();                                                   // 3491
        var seconds  = round(duration.as('s'));                                                                        // 3492
        var minutes  = round(duration.as('m'));                                                                        // 3493
        var hours    = round(duration.as('h'));                                                                        // 3494
        var days     = round(duration.as('d'));                                                                        // 3495
        var months   = round(duration.as('M'));                                                                        // 3496
        var years    = round(duration.as('y'));                                                                        // 3497
                                                                                                                       // 3498
        var a = seconds < thresholds.s && ['s', seconds]  ||                                                           // 3499
                minutes <= 1           && ['m']           ||                                                           // 3500
                minutes < thresholds.m && ['mm', minutes] ||                                                           // 3501
                hours   <= 1           && ['h']           ||                                                           // 3502
                hours   < thresholds.h && ['hh', hours]   ||                                                           // 3503
                days    <= 1           && ['d']           ||                                                           // 3504
                days    < thresholds.d && ['dd', days]    ||                                                           // 3505
                months  <= 1           && ['M']           ||                                                           // 3506
                months  < thresholds.M && ['MM', months]  ||                                                           // 3507
                years   <= 1           && ['y']           || ['yy', years];                                            // 3508
                                                                                                                       // 3509
        a[2] = withoutSuffix;                                                                                          // 3510
        a[3] = +posNegDuration > 0;                                                                                    // 3511
        a[4] = locale;                                                                                                 // 3512
        return substituteTimeAgo.apply(null, a);                                                                       // 3513
    }                                                                                                                  // 3514
                                                                                                                       // 3515
    // This function allows you to set a threshold for relative time strings                                           // 3516
    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {                                       // 3517
        if (thresholds[threshold] === undefined) {                                                                     // 3518
            return false;                                                                                              // 3519
        }                                                                                                              // 3520
        if (limit === undefined) {                                                                                     // 3521
            return thresholds[threshold];                                                                              // 3522
        }                                                                                                              // 3523
        thresholds[threshold] = limit;                                                                                 // 3524
        return true;                                                                                                   // 3525
    }                                                                                                                  // 3526
                                                                                                                       // 3527
    function humanize (withSuffix) {                                                                                   // 3528
        var locale = this.localeData();                                                                                // 3529
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);                                       // 3530
                                                                                                                       // 3531
        if (withSuffix) {                                                                                              // 3532
            output = locale.pastFuture(+this, output);                                                                 // 3533
        }                                                                                                              // 3534
                                                                                                                       // 3535
        return locale.postformat(output);                                                                              // 3536
    }                                                                                                                  // 3537
                                                                                                                       // 3538
    var iso_string__abs = Math.abs;                                                                                    // 3539
                                                                                                                       // 3540
    function iso_string__toISOString() {                                                                               // 3541
        // for ISO strings we do not use the normal bubbling rules:                                                    // 3542
        //  * milliseconds bubble up until they become hours                                                           // 3543
        //  * days do not bubble at all                                                                                // 3544
        //  * months bubble up until they become years                                                                 // 3545
        // This is because there is no context-free conversion between hours and days                                  // 3546
        // (think of clock changes)                                                                                    // 3547
        // and also not between days and months (28-31 days per month)                                                 // 3548
        var seconds = iso_string__abs(this._milliseconds) / 1000;                                                      // 3549
        var days         = iso_string__abs(this._days);                                                                // 3550
        var months       = iso_string__abs(this._months);                                                              // 3551
        var minutes, hours, years;                                                                                     // 3552
                                                                                                                       // 3553
        // 3600 seconds -> 60 minutes -> 1 hour                                                                        // 3554
        minutes           = absFloor(seconds / 60);                                                                    // 3555
        hours             = absFloor(minutes / 60);                                                                    // 3556
        seconds %= 60;                                                                                                 // 3557
        minutes %= 60;                                                                                                 // 3558
                                                                                                                       // 3559
        // 12 months -> 1 year                                                                                         // 3560
        years  = absFloor(months / 12);                                                                                // 3561
        months %= 12;                                                                                                  // 3562
                                                                                                                       // 3563
                                                                                                                       // 3564
        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js                // 3565
        var Y = years;                                                                                                 // 3566
        var M = months;                                                                                                // 3567
        var D = days;                                                                                                  // 3568
        var h = hours;                                                                                                 // 3569
        var m = minutes;                                                                                               // 3570
        var s = seconds;                                                                                               // 3571
        var total = this.asSeconds();                                                                                  // 3572
                                                                                                                       // 3573
        if (!total) {                                                                                                  // 3574
            // this is the same as C#'s (Noda) and python (isodate)...                                                 // 3575
            // but not other JS (goog.date)                                                                            // 3576
            return 'P0D';                                                                                              // 3577
        }                                                                                                              // 3578
                                                                                                                       // 3579
        return (total < 0 ? '-' : '') +                                                                                // 3580
            'P' +                                                                                                      // 3581
            (Y ? Y + 'Y' : '') +                                                                                       // 3582
            (M ? M + 'M' : '') +                                                                                       // 3583
            (D ? D + 'D' : '') +                                                                                       // 3584
            ((h || m || s) ? 'T' : '') +                                                                               // 3585
            (h ? h + 'H' : '') +                                                                                       // 3586
            (m ? m + 'M' : '') +                                                                                       // 3587
            (s ? s + 'S' : '');                                                                                        // 3588
    }                                                                                                                  // 3589
                                                                                                                       // 3590
    var duration_prototype__proto = Duration.prototype;                                                                // 3591
                                                                                                                       // 3592
    duration_prototype__proto.abs            = duration_abs__abs;                                                      // 3593
    duration_prototype__proto.add            = duration_add_subtract__add;                                             // 3594
    duration_prototype__proto.subtract       = duration_add_subtract__subtract;                                        // 3595
    duration_prototype__proto.as             = as;                                                                     // 3596
    duration_prototype__proto.asMilliseconds = asMilliseconds;                                                         // 3597
    duration_prototype__proto.asSeconds      = asSeconds;                                                              // 3598
    duration_prototype__proto.asMinutes      = asMinutes;                                                              // 3599
    duration_prototype__proto.asHours        = asHours;                                                                // 3600
    duration_prototype__proto.asDays         = asDays;                                                                 // 3601
    duration_prototype__proto.asWeeks        = asWeeks;                                                                // 3602
    duration_prototype__proto.asMonths       = asMonths;                                                               // 3603
    duration_prototype__proto.asYears        = asYears;                                                                // 3604
    duration_prototype__proto.valueOf        = duration_as__valueOf;                                                   // 3605
    duration_prototype__proto._bubble        = bubble;                                                                 // 3606
    duration_prototype__proto.get            = duration_get__get;                                                      // 3607
    duration_prototype__proto.milliseconds   = milliseconds;                                                           // 3608
    duration_prototype__proto.seconds        = seconds;                                                                // 3609
    duration_prototype__proto.minutes        = minutes;                                                                // 3610
    duration_prototype__proto.hours          = hours;                                                                  // 3611
    duration_prototype__proto.days           = days;                                                                   // 3612
    duration_prototype__proto.weeks          = weeks;                                                                  // 3613
    duration_prototype__proto.months         = duration_get__months;                                                   // 3614
    duration_prototype__proto.years          = years;                                                                  // 3615
    duration_prototype__proto.humanize       = humanize;                                                               // 3616
    duration_prototype__proto.toISOString    = iso_string__toISOString;                                                // 3617
    duration_prototype__proto.toString       = iso_string__toISOString;                                                // 3618
    duration_prototype__proto.toJSON         = iso_string__toISOString;                                                // 3619
    duration_prototype__proto.locale         = locale;                                                                 // 3620
    duration_prototype__proto.localeData     = localeData;                                                             // 3621
                                                                                                                       // 3622
    // Deprecations                                                                                                    // 3623
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;                                                                             // 3625
                                                                                                                       // 3626
    // Side effect imports                                                                                             // 3627
                                                                                                                       // 3628
    // FORMATTING                                                                                                      // 3629
                                                                                                                       // 3630
    addFormatToken('X', 0, 0, 'unix');                                                                                 // 3631
    addFormatToken('x', 0, 0, 'valueOf');                                                                              // 3632
                                                                                                                       // 3633
    // PARSING                                                                                                         // 3634
                                                                                                                       // 3635
    addRegexToken('x', matchSigned);                                                                                   // 3636
    addRegexToken('X', matchTimestamp);                                                                                // 3637
    addParseToken('X', function (input, array, config) {                                                               // 3638
        config._d = new Date(parseFloat(input, 10) * 1000);                                                            // 3639
    });                                                                                                                // 3640
    addParseToken('x', function (input, array, config) {                                                               // 3641
        config._d = new Date(toInt(input));                                                                            // 3642
    });                                                                                                                // 3643
                                                                                                                       // 3644
    // Side effect imports                                                                                             // 3645
                                                                                                                       // 3646
    ;                                                                                                                  // 3647
                                                                                                                       // 3648
    //! moment.js                                                                                                      // 3649
    //! version : 2.12.0                                                                                               // 3650
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors                                                     // 3651
    //! license : MIT                                                                                                  // 3652
    //! momentjs.com                                                                                                   // 3653
                                                                                                                       // 3654
    utils_hooks__hooks.version = '2.12.0';                                                                             // 3655
                                                                                                                       // 3656
    setHookCallback(local__createLocal);                                                                               // 3657
                                                                                                                       // 3658
    utils_hooks__hooks.fn                    = momentPrototype;                                                        // 3659
    utils_hooks__hooks.min                   = min;                                                                    // 3660
    utils_hooks__hooks.max                   = max;                                                                    // 3661
    utils_hooks__hooks.now                   = now;                                                                    // 3662
    utils_hooks__hooks.utc                   = create_utc__createUTC;                                                  // 3663
    utils_hooks__hooks.unix                  = moment_moment__createUnix;                                              // 3664
    utils_hooks__hooks.months                = lists__listMonths;                                                      // 3665
    utils_hooks__hooks.isDate                = isDate;                                                                 // 3666
    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;                                     // 3667
    utils_hooks__hooks.invalid               = valid__createInvalid;                                                   // 3668
    utils_hooks__hooks.duration              = create__createDuration;                                                 // 3669
    utils_hooks__hooks.isMoment              = isMoment;                                                               // 3670
    utils_hooks__hooks.weekdays              = lists__listWeekdays;                                                    // 3671
    utils_hooks__hooks.parseZone             = moment_moment__createInZone;                                            // 3672
    utils_hooks__hooks.localeData            = locale_locales__getLocale;                                              // 3673
    utils_hooks__hooks.isDuration            = isDuration;                                                             // 3674
    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;                                                 // 3675
    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;                                                 // 3676
    utils_hooks__hooks.defineLocale          = defineLocale;                                                           // 3677
    utils_hooks__hooks.updateLocale          = updateLocale;                                                           // 3678
    utils_hooks__hooks.locales               = locale_locales__listLocales;                                            // 3679
    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;                                               // 3680
    utils_hooks__hooks.normalizeUnits        = normalizeUnits;                                                         // 3681
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;                         // 3682
    utils_hooks__hooks.prototype             = momentPrototype;                                                        // 3683
                                                                                                                       // 3684
    var moment__default = utils_hooks__hooks;                                                                          // 3685
                                                                                                                       // 3686
    //! moment.js locale configuration                                                                                 // 3687
    //! locale : afrikaans (af)                                                                                        // 3688
    //! author : Werner Mollentze : https://github.com/wernerm                                                         // 3689
                                                                                                                       // 3690
    var af = moment__default.defineLocale('af', {                                                                      // 3691
        months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),                                    // 3693
        weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),                             // 3694
        weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),                                                      // 3695
        weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),                                                               // 3696
        meridiemParse: /vm|nm/i,                                                                                       // 3697
        isPM : function (input) {                                                                                      // 3698
            return /^nm$/i.test(input);                                                                                // 3699
        },                                                                                                             // 3700
        meridiem : function (hours, minutes, isLower) {                                                                // 3701
            if (hours < 12) {                                                                                          // 3702
                return isLower ? 'vm' : 'VM';                                                                          // 3703
            } else {                                                                                                   // 3704
                return isLower ? 'nm' : 'NM';                                                                          // 3705
            }                                                                                                          // 3706
        },                                                                                                             // 3707
        longDateFormat : {                                                                                             // 3708
            LT : 'HH:mm',                                                                                              // 3709
            LTS : 'HH:mm:ss',                                                                                          // 3710
            L : 'DD/MM/YYYY',                                                                                          // 3711
            LL : 'D MMMM YYYY',                                                                                        // 3712
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 3713
            LLLL : 'dddd, D MMMM YYYY HH:mm'                                                                           // 3714
        },                                                                                                             // 3715
        calendar : {                                                                                                   // 3716
            sameDay : '[Vandag om] LT',                                                                                // 3717
            nextDay : '[Môre om] LT',                                                                                  // 3718
            nextWeek : 'dddd [om] LT',                                                                                 // 3719
            lastDay : '[Gister om] LT',                                                                                // 3720
            lastWeek : '[Laas] dddd [om] LT',                                                                          // 3721
            sameElse : 'L'                                                                                             // 3722
        },                                                                                                             // 3723
        relativeTime : {                                                                                               // 3724
            future : 'oor %s',                                                                                         // 3725
            past : '%s gelede',                                                                                        // 3726
            s : '\'n paar sekondes',                                                                                   // 3727
            m : '\'n minuut',                                                                                          // 3728
            mm : '%d minute',                                                                                          // 3729
            h : '\'n uur',                                                                                             // 3730
            hh : '%d ure',                                                                                             // 3731
            d : '\'n dag',                                                                                             // 3732
            dd : '%d dae',                                                                                             // 3733
            M : '\'n maand',                                                                                           // 3734
            MM : '%d maande',                                                                                          // 3735
            y : '\'n jaar',                                                                                            // 3736
            yy : '%d jaar'                                                                                             // 3737
        },                                                                                                             // 3738
        ordinalParse: /\d{1,2}(ste|de)/,                                                                               // 3739
        ordinal : function (number) {                                                                                  // 3740
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
        },                                                                                                             // 3742
        week : {                                                                                                       // 3743
            dow : 1, // Maandag is die eerste dag van die week.                                                        // 3744
            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.                           // 3745
        }                                                                                                              // 3746
    });                                                                                                                // 3747
                                                                                                                       // 3748
    //! moment.js locale configuration                                                                                 // 3749
    //! locale : Moroccan Arabic (ar-ma)                                                                               // 3750
    //! author : ElFadili Yassine : https://github.com/ElFadiliY                                                       // 3751
    //! author : Abdel Said : https://github.com/abdelsaid                                                             // 3752
                                                                                                                       // 3753
    var ar_ma = moment__default.defineLocale('ar-ma', {                                                                // 3754
        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),                   // 3755
        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),              // 3756
        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),                                   // 3757
        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),                                            // 3758
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),                                                                      // 3759
        longDateFormat : {                                                                                             // 3760
            LT : 'HH:mm',                                                                                              // 3761
            LTS : 'HH:mm:ss',                                                                                          // 3762
            L : 'DD/MM/YYYY',                                                                                          // 3763
            LL : 'D MMMM YYYY',                                                                                        // 3764
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 3765
            LLLL : 'dddd D MMMM YYYY HH:mm'                                                                            // 3766
        },                                                                                                             // 3767
        calendar : {                                                                                                   // 3768
            sameDay: '[اليوم على الساعة] LT',                                                                          // 3769
            nextDay: '[غدا على الساعة] LT',                                                                            // 3770
            nextWeek: 'dddd [على الساعة] LT',                                                                          // 3771
            lastDay: '[أمس على الساعة] LT',                                                                            // 3772
            lastWeek: 'dddd [على الساعة] LT',                                                                          // 3773
            sameElse: 'L'                                                                                              // 3774
        },                                                                                                             // 3775
        relativeTime : {                                                                                               // 3776
            future : 'في %s',                                                                                          // 3777
            past : 'منذ %s',                                                                                           // 3778
            s : 'ثوان',                                                                                                // 3779
            m : 'دقيقة',                                                                                               // 3780
            mm : '%d دقائق',                                                                                           // 3781
            h : 'ساعة',                                                                                                // 3782
            hh : '%d ساعات',                                                                                           // 3783
            d : 'يوم',                                                                                                 // 3784
            dd : '%d أيام',                                                                                            // 3785
            M : 'شهر',                                                                                                 // 3786
            MM : '%d أشهر',                                                                                            // 3787
            y : 'سنة',                                                                                                 // 3788
            yy : '%d سنوات'                                                                                            // 3789
        },                                                                                                             // 3790
        week : {                                                                                                       // 3791
            dow : 6, // Saturday is the first day of the week.                                                         // 3792
            doy : 12  // The week that contains Jan 1st is the first week of the year.                                 // 3793
        }                                                                                                              // 3794
    });                                                                                                                // 3795
                                                                                                                       // 3796
    //! moment.js locale configuration                                                                                 // 3797
    //! locale : Arabic Saudi Arabia (ar-sa)                                                                           // 3798
    //! author : Suhail Alkowaileet : https://github.com/xsoh                                                          // 3799
                                                                                                                       // 3800
    var ar_sa__symbolMap = {                                                                                           // 3801
        '1': '١',                                                                                                      // 3802
        '2': '٢',                                                                                                      // 3803
        '3': '٣',                                                                                                      // 3804
        '4': '٤',                                                                                                      // 3805
        '5': '٥',                                                                                                      // 3806
        '6': '٦',                                                                                                      // 3807
        '7': '٧',                                                                                                      // 3808
        '8': '٨',                                                                                                      // 3809
        '9': '٩',                                                                                                      // 3810
        '0': '٠'                                                                                                       // 3811
    }, ar_sa__numberMap = {                                                                                            // 3812
        '١': '1',                                                                                                      // 3813
        '٢': '2',                                                                                                      // 3814
        '٣': '3',                                                                                                      // 3815
        '٤': '4',                                                                                                      // 3816
        '٥': '5',                                                                                                      // 3817
        '٦': '6',                                                                                                      // 3818
        '٧': '7',                                                                                                      // 3819
        '٨': '8',                                                                                                      // 3820
        '٩': '9',                                                                                                      // 3821
        '٠': '0'                                                                                                       // 3822
    };                                                                                                                 // 3823
                                                                                                                       // 3824
    var ar_sa = moment__default.defineLocale('ar-sa', {                                                                // 3825
        months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),              // 3826
        monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),         // 3827
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),                                   // 3828
        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),                                            // 3829
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),                                                                      // 3830
        longDateFormat : {                                                                                             // 3831
            LT : 'HH:mm',                                                                                              // 3832
            LTS : 'HH:mm:ss',                                                                                          // 3833
            L : 'DD/MM/YYYY',                                                                                          // 3834
            LL : 'D MMMM YYYY',                                                                                        // 3835
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 3836
            LLLL : 'dddd D MMMM YYYY HH:mm'                                                                            // 3837
        },                                                                                                             // 3838
        meridiemParse: /ص|م/,                                                                                          // 3839
        isPM : function (input) {                                                                                      // 3840
            return 'م' === input;                                                                                      // 3841
        },                                                                                                             // 3842
        meridiem : function (hour, minute, isLower) {                                                                  // 3843
            if (hour < 12) {                                                                                           // 3844
                return 'ص';                                                                                            // 3845
            } else {                                                                                                   // 3846
                return 'م';                                                                                            // 3847
            }                                                                                                          // 3848
        },                                                                                                             // 3849
        calendar : {                                                                                                   // 3850
            sameDay: '[اليوم على الساعة] LT',                                                                          // 3851
            nextDay: '[غدا على الساعة] LT',                                                                            // 3852
            nextWeek: 'dddd [على الساعة] LT',                                                                          // 3853
            lastDay: '[أمس على الساعة] LT',                                                                            // 3854
            lastWeek: 'dddd [على الساعة] LT',                                                                          // 3855
            sameElse: 'L'                                                                                              // 3856
        },                                                                                                             // 3857
        relativeTime : {                                                                                               // 3858
            future : 'في %s',                                                                                          // 3859
            past : 'منذ %s',                                                                                           // 3860
            s : 'ثوان',                                                                                                // 3861
            m : 'دقيقة',                                                                                               // 3862
            mm : '%d دقائق',                                                                                           // 3863
            h : 'ساعة',                                                                                                // 3864
            hh : '%d ساعات',                                                                                           // 3865
            d : 'يوم',                                                                                                 // 3866
            dd : '%d أيام',                                                                                            // 3867
            M : 'شهر',                                                                                                 // 3868
            MM : '%d أشهر',                                                                                            // 3869
            y : 'سنة',                                                                                                 // 3870
            yy : '%d سنوات'                                                                                            // 3871
        },                                                                                                             // 3872
        preparse: function (string) {                                                                                  // 3873
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {                                                  // 3874
                return ar_sa__numberMap[match];                                                                        // 3875
            }).replace(/،/g, ',');                                                                                     // 3876
        },                                                                                                             // 3877
        postformat: function (string) {                                                                                // 3878
            return string.replace(/\d/g, function (match) {                                                            // 3879
                return ar_sa__symbolMap[match];                                                                        // 3880
            }).replace(/,/g, '،');                                                                                     // 3881
        },                                                                                                             // 3882
        week : {                                                                                                       // 3883
            dow : 6, // Saturday is the first day of the week.                                                         // 3884
            doy : 12  // The week that contains Jan 1st is the first week of the year.                                 // 3885
        }                                                                                                              // 3886
    });                                                                                                                // 3887
                                                                                                                       // 3888
    //! moment.js locale configuration                                                                                 // 3889
    //! locale  : Tunisian Arabic (ar-tn)                                                                              // 3890
                                                                                                                       // 3891
    var ar_tn = moment__default.defineLocale('ar-tn', {                                                                // 3892
        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),                   // 3893
        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),              // 3894
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),                                    // 3895
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),                                             // 3896
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),                                                                       // 3897
        longDateFormat: {                                                                                              // 3898
            LT: 'HH:mm',                                                                                               // 3899
            LTS: 'HH:mm:ss',                                                                                           // 3900
            L: 'DD/MM/YYYY',                                                                                           // 3901
            LL: 'D MMMM YYYY',                                                                                         // 3902
            LLL: 'D MMMM YYYY HH:mm',                                                                                  // 3903
            LLLL: 'dddd D MMMM YYYY HH:mm'                                                                             // 3904
        },                                                                                                             // 3905
        calendar: {                                                                                                    // 3906
            sameDay: '[اليوم على الساعة] LT',                                                                          // 3907
            nextDay: '[غدا على الساعة] LT',                                                                            // 3908
            nextWeek: 'dddd [على الساعة] LT',                                                                          // 3909
            lastDay: '[أمس على الساعة] LT',                                                                            // 3910
            lastWeek: 'dddd [على الساعة] LT',                                                                          // 3911
            sameElse: 'L'                                                                                              // 3912
        },                                                                                                             // 3913
        relativeTime: {                                                                                                // 3914
            future: 'في %s',                                                                                           // 3915
            past: 'منذ %s',                                                                                            // 3916
            s: 'ثوان',                                                                                                 // 3917
            m: 'دقيقة',                                                                                                // 3918
            mm: '%d دقائق',                                                                                            // 3919
            h: 'ساعة',                                                                                                 // 3920
            hh: '%d ساعات',                                                                                            // 3921
            d: 'يوم',                                                                                                  // 3922
            dd: '%d أيام',                                                                                             // 3923
            M: 'شهر',                                                                                                  // 3924
            MM: '%d أشهر',                                                                                             // 3925
            y: 'سنة',                                                                                                  // 3926
            yy: '%d سنوات'                                                                                             // 3927
        },                                                                                                             // 3928
        week: {                                                                                                        // 3929
            dow: 1, // Monday is the first day of the week.                                                            // 3930
            doy: 4 // The week that contains Jan 4th is the first week of the year.                                    // 3931
        }                                                                                                              // 3932
    });                                                                                                                // 3933
                                                                                                                       // 3934
    //! moment.js locale configuration                                                                                 // 3935
    //! Locale: Arabic (ar)                                                                                            // 3936
    //! Author: Abdel Said: https://github.com/abdelsaid                                                               // 3937
    //! Changes in months, weekdays: Ahmed Elkhatib                                                                    // 3938
    //! Native plural forms: forabi https://github.com/forabi                                                          // 3939
                                                                                                                       // 3940
    var ar__symbolMap = {                                                                                              // 3941
        '1': '١',                                                                                                      // 3942
        '2': '٢',                                                                                                      // 3943
        '3': '٣',                                                                                                      // 3944
        '4': '٤',                                                                                                      // 3945
        '5': '٥',                                                                                                      // 3946
        '6': '٦',                                                                                                      // 3947
        '7': '٧',                                                                                                      // 3948
        '8': '٨',                                                                                                      // 3949
        '9': '٩',                                                                                                      // 3950
        '0': '٠'                                                                                                       // 3951
    }, ar__numberMap = {                                                                                               // 3952
        '١': '1',                                                                                                      // 3953
        '٢': '2',                                                                                                      // 3954
        '٣': '3',                                                                                                      // 3955
        '٤': '4',                                                                                                      // 3956
        '٥': '5',                                                                                                      // 3957
        '٦': '6',                                                                                                      // 3958
        '٧': '7',                                                                                                      // 3959
        '٨': '8',                                                                                                      // 3960
        '٩': '9',                                                                                                      // 3961
        '٠': '0'                                                                                                       // 3962
    }, pluralForm = function (n) {                                                                                     // 3963
        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;    // 3964
    }, plurals = {                                                                                                     // 3965
        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],                // 3966
        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],               // 3967
        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],                     // 3968
        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],                           // 3969
        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],                            // 3970
        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']                           // 3971
    }, pluralize = function (u) {                                                                                      // 3972
        return function (number, withoutSuffix, string, isFuture) {                                                    // 3973
            var f = pluralForm(number),                                                                                // 3974
                str = plurals[u][pluralForm(number)];                                                                  // 3975
            if (f === 2) {                                                                                             // 3976
                str = str[withoutSuffix ? 0 : 1];                                                                      // 3977
            }                                                                                                          // 3978
            return str.replace(/%d/i, number);                                                                         // 3979
        };                                                                                                             // 3980
    }, ar__months = [                                                                                                  // 3981
        'كانون الثاني يناير',                                                                                          // 3982
        'شباط فبراير',                                                                                                 // 3983
        'آذار مارس',                                                                                                   // 3984
        'نيسان أبريل',                                                                                                 // 3985
        'أيار مايو',                                                                                                   // 3986
        'حزيران يونيو',                                                                                                // 3987
        'تموز يوليو',                                                                                                  // 3988
        'آب أغسطس',                                                                                                    // 3989
        'أيلول سبتمبر',                                                                                                // 3990
        'تشرين الأول أكتوبر',                                                                                          // 3991
        'تشرين الثاني نوفمبر',                                                                                         // 3992
        'كانون الأول ديسمبر'                                                                                           // 3993
    ];                                                                                                                 // 3994
                                                                                                                       // 3995
    var ar = moment__default.defineLocale('ar', {                                                                      // 3996
        months : ar__months,                                                                                           // 3997
        monthsShort : ar__months,                                                                                      // 3998
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),                                   // 3999
        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),                                            // 4000
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),                                                                      // 4001
        longDateFormat : {                                                                                             // 4002
            LT : 'HH:mm',                                                                                              // 4003
            LTS : 'HH:mm:ss',                                                                                          // 4004
            L : 'D/\u200FM/\u200FYYYY',                                                                                // 4005
            LL : 'D MMMM YYYY',                                                                                        // 4006
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 4007
            LLLL : 'dddd D MMMM YYYY HH:mm'                                                                            // 4008
        },                                                                                                             // 4009
        meridiemParse: /ص|م/,                                                                                          // 4010
        isPM : function (input) {                                                                                      // 4011
            return 'م' === input;                                                                                      // 4012
        },                                                                                                             // 4013
        meridiem : function (hour, minute, isLower) {                                                                  // 4014
            if (hour < 12) {                                                                                           // 4015
                return 'ص';                                                                                            // 4016
            } else {                                                                                                   // 4017
                return 'م';                                                                                            // 4018
            }                                                                                                          // 4019
        },                                                                                                             // 4020
        calendar : {                                                                                                   // 4021
            sameDay: '[اليوم عند الساعة] LT',                                                                          // 4022
            nextDay: '[غدًا عند الساعة] LT',                                                                           // 4023
            nextWeek: 'dddd [عند الساعة] LT',                                                                          // 4024
            lastDay: '[أمس عند الساعة] LT',                                                                            // 4025
            lastWeek: 'dddd [عند الساعة] LT',                                                                          // 4026
            sameElse: 'L'                                                                                              // 4027
        },                                                                                                             // 4028
        relativeTime : {                                                                                               // 4029
            future : 'بعد %s',                                                                                         // 4030
            past : 'منذ %s',                                                                                           // 4031
            s : pluralize('s'),                                                                                        // 4032
            m : pluralize('m'),                                                                                        // 4033
            mm : pluralize('m'),                                                                                       // 4034
            h : pluralize('h'),                                                                                        // 4035
            hh : pluralize('h'),                                                                                       // 4036
            d : pluralize('d'),                                                                                        // 4037
            dd : pluralize('d'),                                                                                       // 4038
            M : pluralize('M'),                                                                                        // 4039
            MM : pluralize('M'),                                                                                       // 4040
            y : pluralize('y'),                                                                                        // 4041
            yy : pluralize('y')                                                                                        // 4042
        },                                                                                                             // 4043
        preparse: function (string) {                                                                                  // 4044
            return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {                           // 4045
                return ar__numberMap[match];                                                                           // 4046
            }).replace(/،/g, ',');                                                                                     // 4047
        },                                                                                                             // 4048
        postformat: function (string) {                                                                                // 4049
            return string.replace(/\d/g, function (match) {                                                            // 4050
                return ar__symbolMap[match];                                                                           // 4051
            }).replace(/,/g, '،');                                                                                     // 4052
        },                                                                                                             // 4053
        week : {                                                                                                       // 4054
            dow : 6, // Saturday is the first day of the week.                                                         // 4055
            doy : 12  // The week that contains Jan 1st is the first week of the year.                                 // 4056
        }                                                                                                              // 4057
    });                                                                                                                // 4058
                                                                                                                       // 4059
    //! moment.js locale configuration                                                                                 // 4060
    //! locale : azerbaijani (az)                                                                                      // 4061
    //! author : topchiyev : https://github.com/topchiyev                                                              // 4062
                                                                                                                       // 4063
    var az__suffixes = {                                                                                               // 4064
        1: '-inci',                                                                                                    // 4065
        5: '-inci',                                                                                                    // 4066
        8: '-inci',                                                                                                    // 4067
        70: '-inci',                                                                                                   // 4068
        80: '-inci',                                                                                                   // 4069
        2: '-nci',                                                                                                     // 4070
        7: '-nci',                                                                                                     // 4071
        20: '-nci',                                                                                                    // 4072
        50: '-nci',                                                                                                    // 4073
        3: '-üncü',                                                                                                    // 4074
        4: '-üncü',                                                                                                    // 4075
        100: '-üncü',                                                                                                  // 4076
        6: '-ncı',                                                                                                     // 4077
        9: '-uncu',                                                                                                    // 4078
        10: '-uncu',                                                                                                   // 4079
        30: '-uncu',                                                                                                   // 4080
        60: '-ıncı',                                                                                                   // 4081
        90: '-ıncı'                                                                                                    // 4082
    };                                                                                                                 // 4083
                                                                                                                       // 4084
    var az = moment__default.defineLocale('az', {                                                                      // 4085
        months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),            // 4086
        monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),                                    // 4087
        weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),                    // 4088
        weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),                                                      // 4089
        weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),                                                               // 4090
        longDateFormat : {                                                                                             // 4091
            LT : 'HH:mm',                                                                                              // 4092
            LTS : 'HH:mm:ss',                                                                                          // 4093
            L : 'DD.MM.YYYY',                                                                                          // 4094
            LL : 'D MMMM YYYY',                                                                                        // 4095
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 4096
            LLLL : 'dddd, D MMMM YYYY HH:mm'                                                                           // 4097
        },                                                                                                             // 4098
        calendar : {                                                                                                   // 4099
            sameDay : '[bugün saat] LT',                                                                               // 4100
            nextDay : '[sabah saat] LT',                                                                               // 4101
            nextWeek : '[gələn həftə] dddd [saat] LT',                                                                 // 4102
            lastDay : '[dünən] LT',                                                                                    // 4103
            lastWeek : '[keçən həftə] dddd [saat] LT',                                                                 // 4104
            sameElse : 'L'                                                                                             // 4105
        },                                                                                                             // 4106
        relativeTime : {                                                                                               // 4107
            future : '%s sonra',                                                                                       // 4108
            past : '%s əvvəl',                                                                                         // 4109
            s : 'birneçə saniyyə',                                                                                     // 4110
            m : 'bir dəqiqə',                                                                                          // 4111
            mm : '%d dəqiqə',                                                                                          // 4112
            h : 'bir saat',                                                                                            // 4113
            hh : '%d saat',                                                                                            // 4114
            d : 'bir gün',                                                                                             // 4115
            dd : '%d gün',                                                                                             // 4116
            M : 'bir ay',                                                                                              // 4117
            MM : '%d ay',                                                                                              // 4118
            y : 'bir il',                                                                                              // 4119
            yy : '%d il'                                                                                               // 4120
        },                                                                                                             // 4121
        meridiemParse: /gecə|səhər|gündüz|axşam/,                                                                      // 4122
        isPM : function (input) {                                                                                      // 4123
            return /^(gündüz|axşam)$/.test(input);                                                                     // 4124
        },                                                                                                             // 4125
        meridiem : function (hour, minute, isLower) {                                                                  // 4126
            if (hour < 4) {                                                                                            // 4127
                return 'gecə';                                                                                         // 4128
            } else if (hour < 12) {                                                                                    // 4129
                return 'səhər';                                                                                        // 4130
            } else if (hour < 17) {                                                                                    // 4131
                return 'gündüz';                                                                                       // 4132
            } else {                                                                                                   // 4133
                return 'axşam';                                                                                        // 4134
            }                                                                                                          // 4135
        },                                                                                                             // 4136
        ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,                                                         // 4137
        ordinal : function (number) {                                                                                  // 4138
            if (number === 0) {  // special case for zero                                                              // 4139
                return number + '-ıncı';                                                                               // 4140
            }                                                                                                          // 4141
            var a = number % 10,                                                                                       // 4142
                b = number % 100 - a,                                                                                  // 4143
                c = number >= 100 ? 100 : null;                                                                        // 4144
            return number + (az__suffixes[a] || az__suffixes[b] || az__suffixes[c]);                                   // 4145
        },                                                                                                             // 4146
        week : {                                                                                                       // 4147
            dow : 1, // Monday is the first day of the week.                                                           // 4148
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 4149
        }                                                                                                              // 4150
    });                                                                                                                // 4151
                                                                                                                       // 4152
    //! moment.js locale configuration                                                                                 // 4153
    //! locale : belarusian (be)                                                                                       // 4154
    //! author : Dmitry Demidov : https://github.com/demidov91                                                         // 4155
    //! author: Praleska: http://praleska.pro/                                                                         // 4156
    //! Author : Menelion Elensúle : https://github.com/Oire                                                           // 4157
                                                                                                                       // 4158
    function be__plural(word, num) {                                                                                   // 4159
        var forms = word.split('_');                                                                                   // 4160
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }                                                                                                                  // 4162
    function be__relativeTimeWithPlural(number, withoutSuffix, key) {                                                  // 4163
        var format = {                                                                                                 // 4164
            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',                                 // 4165
            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',                                 // 4166
            'dd': 'дзень_дні_дзён',                                                                                    // 4167
            'MM': 'месяц_месяцы_месяцаў',                                                                              // 4168
            'yy': 'год_гады_гадоў'                                                                                     // 4169
        };                                                                                                             // 4170
        if (key === 'm') {                                                                                             // 4171
            return withoutSuffix ? 'хвіліна' : 'хвіліну';                                                              // 4172
        }                                                                                                              // 4173
        else if (key === 'h') {                                                                                        // 4174
            return withoutSuffix ? 'гадзіна' : 'гадзіну';                                                              // 4175
        }                                                                                                              // 4176
        else {                                                                                                         // 4177
            return number + ' ' + be__plural(format[key], +number);                                                    // 4178
        }                                                                                                              // 4179
    }                                                                                                                  // 4180
                                                                                                                       // 4181
    var be = moment__default.defineLocale('be', {                                                                      // 4182
        months : {                                                                                                     // 4183
            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
        },                                                                                                             // 4186
        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),                            // 4187
        weekdays : {                                                                                                   // 4188
            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),                              // 4189
            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),                          // 4190
            isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/                                                     // 4191
        },                                                                                                             // 4192
        weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),                                                             // 4193
        weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),                                                               // 4194
        longDateFormat : {                                                                                             // 4195
            LT : 'HH:mm',                                                                                              // 4196
            LTS : 'HH:mm:ss',                                                                                          // 4197
            L : 'DD.MM.YYYY',                                                                                          // 4198
            LL : 'D MMMM YYYY г.',                                                                                     // 4199
            LLL : 'D MMMM YYYY г., HH:mm',                                                                             // 4200
            LLLL : 'dddd, D MMMM YYYY г., HH:mm'                                                                       // 4201
        },                                                                                                             // 4202
        calendar : {                                                                                                   // 4203
            sameDay: '[Сёння ў] LT',                                                                                   // 4204
            nextDay: '[Заўтра ў] LT',                                                                                  // 4205
            lastDay: '[Учора ў] LT',                                                                                   // 4206
            nextWeek: function () {                                                                                    // 4207
                return '[У] dddd [ў] LT';                                                                              // 4208
            },                                                                                                         // 4209
            lastWeek: function () {                                                                                    // 4210
                switch (this.day()) {                                                                                  // 4211
                case 0:                                                                                                // 4212
                case 3:                                                                                                // 4213
                case 5:                                                                                                // 4214
                case 6:                                                                                                // 4215
                    return '[У мінулую] dddd [ў] LT';                                                                  // 4216
                case 1:                                                                                                // 4217
                case 2:                                                                                                // 4218
                case 4:                                                                                                // 4219
                    return '[У мінулы] dddd [ў] LT';                                                                   // 4220
                }                                                                                                      // 4221
            },                                                                                                         // 4222
            sameElse: 'L'                                                                                              // 4223
        },                                                                                                             // 4224
        relativeTime : {                                                                                               // 4225
            future : 'праз %s',                                                                                        // 4226
            past : '%s таму',                                                                                          // 4227
            s : 'некалькі секунд',                                                                                     // 4228
            m : be__relativeTimeWithPlural,                                                                            // 4229
            mm : be__relativeTimeWithPlural,                                                                           // 4230
            h : be__relativeTimeWithPlural,                                                                            // 4231
            hh : be__relativeTimeWithPlural,                                                                           // 4232
            d : 'дзень',                                                                                               // 4233
            dd : be__relativeTimeWithPlural,                                                                           // 4234
            M : 'месяц',                                                                                               // 4235
            MM : be__relativeTimeWithPlural,                                                                           // 4236
            y : 'год',                                                                                                 // 4237
            yy : be__relativeTimeWithPlural                                                                            // 4238
        },                                                                                                             // 4239
        meridiemParse: /ночы|раніцы|дня|вечара/,                                                                       // 4240
        isPM : function (input) {                                                                                      // 4241
            return /^(дня|вечара)$/.test(input);                                                                       // 4242
        },                                                                                                             // 4243
        meridiem : function (hour, minute, isLower) {                                                                  // 4244
            if (hour < 4) {                                                                                            // 4245
                return 'ночы';                                                                                         // 4246
            } else if (hour < 12) {                                                                                    // 4247
                return 'раніцы';                                                                                       // 4248
            } else if (hour < 17) {                                                                                    // 4249
                return 'дня';                                                                                          // 4250
            } else {                                                                                                   // 4251
                return 'вечара';                                                                                       // 4252
            }                                                                                                          // 4253
        },                                                                                                             // 4254
        ordinalParse: /\d{1,2}-(і|ы|га)/,                                                                              // 4255
        ordinal: function (number, period) {                                                                           // 4256
            switch (period) {                                                                                          // 4257
            case 'M':                                                                                                  // 4258
            case 'd':                                                                                                  // 4259
            case 'DDD':                                                                                                // 4260
            case 'w':                                                                                                  // 4261
            case 'W':                                                                                                  // 4262
                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
            case 'D':                                                                                                  // 4264
                return number + '-га';                                                                                 // 4265
            default:                                                                                                   // 4266
                return number;                                                                                         // 4267
            }                                                                                                          // 4268
        },                                                                                                             // 4269
        week : {                                                                                                       // 4270
            dow : 1, // Monday is the first day of the week.                                                           // 4271
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 4272
        }                                                                                                              // 4273
    });                                                                                                                // 4274
                                                                                                                       // 4275
    //! moment.js locale configuration                                                                                 // 4276
    //! locale : bulgarian (bg)                                                                                        // 4277
    //! author : Krasen Borisov : https://github.com/kraz                                                              // 4278
                                                                                                                       // 4279
    var bg = moment__default.defineLocale('bg', {                                                                      // 4280
        months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),       // 4281
        monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),                                    // 4282
        weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),                                // 4283
        weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),                                                      // 4284
        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),                                                               // 4285
        longDateFormat : {                                                                                             // 4286
            LT : 'H:mm',                                                                                               // 4287
            LTS : 'H:mm:ss',                                                                                           // 4288
            L : 'D.MM.YYYY',                                                                                           // 4289
            LL : 'D MMMM YYYY',                                                                                        // 4290
            LLL : 'D MMMM YYYY H:mm',                                                                                  // 4291
            LLLL : 'dddd, D MMMM YYYY H:mm'                                                                            // 4292
        },                                                                                                             // 4293
        calendar : {                                                                                                   // 4294
            sameDay : '[Днес в] LT',                                                                                   // 4295
            nextDay : '[Утре в] LT',                                                                                   // 4296
            nextWeek : 'dddd [в] LT',                                                                                  // 4297
            lastDay : '[Вчера в] LT',                                                                                  // 4298
            lastWeek : function () {                                                                                   // 4299
                switch (this.day()) {                                                                                  // 4300
                case 0:                                                                                                // 4301
                case 3:                                                                                                // 4302
                case 6:                                                                                                // 4303
                    return '[В изминалата] dddd [в] LT';                                                               // 4304
                case 1:                                                                                                // 4305
                case 2:                                                                                                // 4306
                case 4:                                                                                                // 4307
                case 5:                                                                                                // 4308
                    return '[В изминалия] dddd [в] LT';                                                                // 4309
                }                                                                                                      // 4310
            },                                                                                                         // 4311
            sameElse : 'L'                                                                                             // 4312
        },                                                                                                             // 4313
        relativeTime : {                                                                                               // 4314
            future : 'след %s',                                                                                        // 4315
            past : 'преди %s',                                                                                         // 4316
            s : 'няколко секунди',                                                                                     // 4317
            m : 'минута',                                                                                              // 4318
            mm : '%d минути',                                                                                          // 4319
            h : 'час',                                                                                                 // 4320
            hh : '%d часа',                                                                                            // 4321
            d : 'ден',                                                                                                 // 4322
            dd : '%d дни',                                                                                             // 4323
            M : 'месец',                                                                                               // 4324
            MM : '%d месеца',                                                                                          // 4325
            y : 'година',                                                                                              // 4326
            yy : '%d години'                                                                                           // 4327
        },                                                                                                             // 4328
        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,                                                                   // 4329
        ordinal : function (number) {                                                                                  // 4330
            var lastDigit = number % 10,                                                                               // 4331
                last2Digits = number % 100;                                                                            // 4332
            if (number === 0) {                                                                                        // 4333
                return number + '-ев';                                                                                 // 4334
            } else if (last2Digits === 0) {                                                                            // 4335
                return number + '-ен';                                                                                 // 4336
            } else if (last2Digits > 10 && last2Digits < 20) {                                                         // 4337
                return number + '-ти';                                                                                 // 4338
            } else if (lastDigit === 1) {                                                                              // 4339
                return number + '-ви';                                                                                 // 4340
            } else if (lastDigit === 2) {                                                                              // 4341
                return number + '-ри';                                                                                 // 4342
            } else if (lastDigit === 7 || lastDigit === 8) {                                                           // 4343
                return number + '-ми';                                                                                 // 4344
            } else {                                                                                                   // 4345
                return number + '-ти';                                                                                 // 4346
            }                                                                                                          // 4347
        },                                                                                                             // 4348
        week : {                                                                                                       // 4349
            dow : 1, // Monday is the first day of the week.                                                           // 4350
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 4351
        }                                                                                                              // 4352
    });                                                                                                                // 4353
                                                                                                                       // 4354
    //! moment.js locale configuration                                                                                 // 4355
    //! locale : Bengali (bn)                                                                                          // 4356
    //! author : Kaushik Gandhi : https://github.com/kaushikgandhi                                                     // 4357
                                                                                                                       // 4358
    var bn__symbolMap = {                                                                                              // 4359
        '1': '১',                                                                                                      // 4360
        '2': '২',                                                                                                      // 4361
        '3': '৩',                                                                                                      // 4362
        '4': '৪',                                                                                                      // 4363
        '5': '৫',                                                                                                      // 4364
        '6': '৬',                                                                                                      // 4365
        '7': '৭',                                                                                                      // 4366
        '8': '৮',                                                                                                      // 4367
        '9': '৯',                                                                                                      // 4368
        '0': '০'                                                                                                       // 4369
    },                                                                                                                 // 4370
    bn__numberMap = {                                                                                                  // 4371
        '১': '1',                                                                                                      // 4372
        '২': '2',                                                                                                      // 4373
        '৩': '3',                                                                                                      // 4374
        '৪': '4',                                                                                                      // 4375
        '৫': '5',                                                                                                      // 4376
        '৬': '6',                                                                                                      // 4377
        '৭': '7',                                                                                                      // 4378
        '৮': '8',                                                                                                      // 4379
        '৯': '9',                                                                                                      // 4380
        '০': '0'                                                                                                       // 4381
    };                                                                                                                 // 4382
                                                                                                                       // 4383
    var bn = moment__default.defineLocale('bn', {                                                                      // 4384
        months : 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),  // 4385
        monthsShort : 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split('_'),                             // 4386
        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রবার_শনিবার'.split('_'),                           // 4387
        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্র_শনি'.split('_'),                                           // 4388
        weekdaysMin : 'রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি'.split('_'),                                                         // 4389
        longDateFormat : {                                                                                             // 4390
            LT : 'A h:mm সময়',                                                                                         // 4391
            LTS : 'A h:mm:ss সময়',                                                                                     // 4392
            L : 'DD/MM/YYYY',                                                                                          // 4393
            LL : 'D MMMM YYYY',                                                                                        // 4394
            LLL : 'D MMMM YYYY, A h:mm সময়',                                                                           // 4395
            LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'                                                                     // 4396
        },                                                                                                             // 4397
        calendar : {                                                                                                   // 4398
            sameDay : '[আজ] LT',                                                                                       // 4399
            nextDay : '[আগামীকাল] LT',                                                                                 // 4400
            nextWeek : 'dddd, LT',                                                                                     // 4401
            lastDay : '[গতকাল] LT',                                                                                    // 4402
            lastWeek : '[গত] dddd, LT',                                                                                // 4403
            sameElse : 'L'                                                                                             // 4404
        },                                                                                                             // 4405
        relativeTime : {                                                                                               // 4406
            future : '%s পরে',                                                                                         // 4407
            past : '%s আগে',                                                                                           // 4408
            s : 'কয়েক সেকেন্ড',                                                                                        // 4409
            m : 'এক মিনিট',                                                                                            // 4410
            mm : '%d মিনিট',                                                                                           // 4411
            h : 'এক ঘন্টা',                                                                                            // 4412
            hh : '%d ঘন্টা',                                                                                           // 4413
            d : 'এক দিন',                                                                                              // 4414
            dd : '%d দিন',                                                                                             // 4415
            M : 'এক মাস',                                                                                              // 4416
            MM : '%d মাস',                                                                                             // 4417
            y : 'এক বছর',                                                                                              // 4418
            yy : '%d বছর'                                                                                              // 4419
        },                                                                                                             // 4420
        preparse: function (string) {                                                                                  // 4421
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {                                                  // 4422
                return bn__numberMap[match];                                                                           // 4423
            });                                                                                                        // 4424
        },                                                                                                             // 4425
        postformat: function (string) {                                                                                // 4426
            return string.replace(/\d/g, function (match) {                                                            // 4427
                return bn__symbolMap[match];                                                                           // 4428
            });                                                                                                        // 4429
        },                                                                                                             // 4430
        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,                                                                     // 4431
        meridiemHour : function (hour, meridiem) {                                                                     // 4432
            if (hour === 12) {                                                                                         // 4433
                hour = 0;                                                                                              // 4434
            }                                                                                                          // 4435
            if ((meridiem === 'রাত' && hour >= 4) ||                                                                   // 4436
                    (meridiem === 'দুপুর' && hour < 5) ||                                                              // 4437
                    meridiem === 'বিকাল') {                                                                            // 4438
                return hour + 12;                                                                                      // 4439
            } else {                                                                                                   // 4440
                return hour;                                                                                           // 4441
            }                                                                                                          // 4442
        },                                                                                                             // 4443
        meridiem : function (hour, minute, isLower) {                                                                  // 4444
            if (hour < 4) {                                                                                            // 4445
                return 'রাত';                                                                                          // 4446
            } else if (hour < 10) {                                                                                    // 4447
                return 'সকাল';                                                                                         // 4448
            } else if (hour < 17) {                                                                                    // 4449
                return 'দুপুর';                                                                                        // 4450
            } else if (hour < 20) {                                                                                    // 4451
                return 'বিকাল';                                                                                        // 4452
            } else {                                                                                                   // 4453
                return 'রাত';                                                                                          // 4454
            }                                                                                                          // 4455
        },                                                                                                             // 4456
        week : {                                                                                                       // 4457
            dow : 0, // Sunday is the first day of the week.                                                           // 4458
            doy : 6  // The week that contains Jan 1st is the first week of the year.                                  // 4459
        }                                                                                                              // 4460
    });                                                                                                                // 4461
                                                                                                                       // 4462
    //! moment.js locale configuration                                                                                 // 4463
    //! locale : tibetan (bo)                                                                                          // 4464
    //! author : Thupten N. Chakrishar : https://github.com/vajradog                                                   // 4465
                                                                                                                       // 4466
    var bo__symbolMap = {                                                                                              // 4467
        '1': '༡',                                                                                                      // 4468
        '2': '༢',                                                                                                      // 4469
        '3': '༣',                                                                                                      // 4470
        '4': '༤',                                                                                                      // 4471
        '5': '༥',                                                                                                      // 4472
        '6': '༦',                                                                                                      // 4473
        '7': '༧',                                                                                                      // 4474
        '8': '༨',                                                                                                      // 4475
        '9': '༩',                                                                                                      // 4476
        '0': '༠'                                                                                                       // 4477
    },                                                                                                                 // 4478
    bo__numberMap = {                                                                                                  // 4479
        '༡': '1',                                                                                                      // 4480
        '༢': '2',                                                                                                      // 4481
        '༣': '3',                                                                                                      // 4482
        '༤': '4',                                                                                                      // 4483
        '༥': '5',                                                                                                      // 4484
        '༦': '6',                                                                                                      // 4485
        '༧': '7',                                                                                                      // 4486
        '༨': '8',                                                                                                      // 4487
        '༩': '9',                                                                                                      // 4488
        '༠': '0'                                                                                                       // 4489
    };                                                                                                                 // 4490
                                                                                                                       // 4491
    var bo = moment__default.defineLocale('bo', {                                                                      // 4492
        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),         // 4495
        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),                                // 4496
        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),                                  // 4497
        longDateFormat : {                                                                                             // 4498
            LT : 'A h:mm',                                                                                             // 4499
            LTS : 'A h:mm:ss',                                                                                         // 4500
            L : 'DD/MM/YYYY',                                                                                          // 4501
            LL : 'D MMMM YYYY',                                                                                        // 4502
            LLL : 'D MMMM YYYY, A h:mm',                                                                               // 4503
            LLLL : 'dddd, D MMMM YYYY, A h:mm'                                                                         // 4504
        },                                                                                                             // 4505
        calendar : {                                                                                                   // 4506
            sameDay : '[དི་རིང] LT',                                                                                   // 4507
            nextDay : '[སང་ཉིན] LT',                                                                                   // 4508
            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',                                                                        // 4509
            lastDay : '[ཁ་སང] LT',                                                                                     // 4510
            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',                                                                    // 4511
            sameElse : 'L'                                                                                             // 4512
        },                                                                                                             // 4513
        relativeTime : {                                                                                               // 4514
            future : '%s ལ་',                                                                                          // 4515
            past : '%s སྔན་ལ',                                                                                         // 4516
            s : 'ལམ་སང',                                                                                               // 4517
            m : 'སྐར་མ་གཅིག',                                                                                          // 4518
            mm : '%d སྐར་མ',                                                                                           // 4519
            h : 'ཆུ་ཚོད་གཅིག',                                                                                         // 4520
            hh : '%d ཆུ་ཚོད',                                                                                          // 4521
            d : 'ཉིན་གཅིག',                                                                                            // 4522
            dd : '%d ཉིན་',                                                                                            // 4523
            M : 'ཟླ་བ་གཅིག',                                                                                           // 4524
            MM : '%d ཟླ་བ',                                                                                            // 4525
            y : 'ལོ་གཅིག',                                                                                             // 4526
            yy : '%d ལོ'                                                                                               // 4527
        },                                                                                                             // 4528
        preparse: function (string) {                                                                                  // 4529
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {                                                  // 4530
                return bo__numberMap[match];                                                                           // 4531
            });                                                                                                        // 4532
        },                                                                                                             // 4533
        postformat: function (string) {                                                                                // 4534
            return string.replace(/\d/g, function (match) {                                                            // 4535
                return bo__symbolMap[match];                                                                           // 4536
            });                                                                                                        // 4537
        },                                                                                                             // 4538
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,                                                        // 4539
        meridiemHour : function (hour, meridiem) {                                                                     // 4540
            if (hour === 12) {                                                                                         // 4541
                hour = 0;                                                                                              // 4542
            }                                                                                                          // 4543
            if ((meridiem === 'མཚན་མོ' && hour >= 4) ||                                                                // 4544
                    (meridiem === 'ཉིན་གུང' && hour < 5) ||                                                            // 4545
                    meridiem === 'དགོང་དག') {                                                                          // 4546
                return hour + 12;                                                                                      // 4547
            } else {                                                                                                   // 4548
                return hour;                                                                                           // 4549
            }                                                                                                          // 4550
        },                                                                                                             // 4551
        meridiem : function (hour, minute, isLower) {                                                                  // 4552
            if (hour < 4) {                                                                                            // 4553
                return 'མཚན་མོ';                                                                                       // 4554
            } else if (hour < 10) {                                                                                    // 4555
                return 'ཞོགས་ཀས';                                                                                      // 4556
            } else if (hour < 17) {                                                                                    // 4557
                return 'ཉིན་གུང';                                                                                      // 4558
            } else if (hour < 20) {                                                                                    // 4559
                return 'དགོང་དག';                                                                                      // 4560
            } else {                                                                                                   // 4561
                return 'མཚན་མོ';                                                                                       // 4562
            }                                                                                                          // 4563
        },                                                                                                             // 4564
        week : {                                                                                                       // 4565
            dow : 0, // Sunday is the first day of the week.                                                           // 4566
            doy : 6  // The week that contains Jan 1st is the first week of the year.                                  // 4567
        }                                                                                                              // 4568
    });                                                                                                                // 4569
                                                                                                                       // 4570
    //! moment.js locale configuration                                                                                 // 4571
    //! locale : breton (br)                                                                                           // 4572
    //! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou                                               // 4573
                                                                                                                       // 4574
    function relativeTimeWithMutation(number, withoutSuffix, key) {                                                    // 4575
        var format = {                                                                                                 // 4576
            'mm': 'munutenn',                                                                                          // 4577
            'MM': 'miz',                                                                                               // 4578
            'dd': 'devezh'                                                                                             // 4579
        };                                                                                                             // 4580
        return number + ' ' + mutation(format[key], number);                                                           // 4581
    }                                                                                                                  // 4582
    function specialMutationForYears(number) {                                                                         // 4583
        switch (lastNumber(number)) {                                                                                  // 4584
        case 1:                                                                                                        // 4585
        case 3:                                                                                                        // 4586
        case 4:                                                                                                        // 4587
        case 5:                                                                                                        // 4588
        case 9:                                                                                                        // 4589
            return number + ' bloaz';                                                                                  // 4590
        default:                                                                                                       // 4591
            return number + ' vloaz';                                                                                  // 4592
        }                                                                                                              // 4593
    }                                                                                                                  // 4594
    function lastNumber(number) {                                                                                      // 4595
        if (number > 9) {                                                                                              // 4596
            return lastNumber(number % 10);                                                                            // 4597
        }                                                                                                              // 4598
        return number;                                                                                                 // 4599
    }                                                                                                                  // 4600
    function mutation(text, number) {                                                                                  // 4601
        if (number === 2) {                                                                                            // 4602
            return softMutation(text);                                                                                 // 4603
        }                                                                                                              // 4604
        return text;                                                                                                   // 4605
    }                                                                                                                  // 4606
    function softMutation(text) {                                                                                      // 4607
        var mutationTable = {                                                                                          // 4608
            'm': 'v',                                                                                                  // 4609
            'b': 'v',                                                                                                  // 4610
            'd': 'z'                                                                                                   // 4611
        };                                                                                                             // 4612
        if (mutationTable[text.charAt(0)] === undefined) {                                                             // 4613
            return text;                                                                                               // 4614
        }                                                                                                              // 4615
        return mutationTable[text.charAt(0)] + text.substring(1);                                                      // 4616
    }                                                                                                                  // 4617
                                                                                                                       // 4618
    var br = moment__default.defineLocale('br', {                                                                      // 4619
        months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),          // 4620
        monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),                                  // 4621
        weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),                                           // 4622
        weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),                                                      // 4623
        weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),                                                              // 4624
        longDateFormat : {                                                                                             // 4625
            LT : 'h[e]mm A',                                                                                           // 4626
            LTS : 'h[e]mm:ss A',                                                                                       // 4627
            L : 'DD/MM/YYYY',                                                                                          // 4628
            LL : 'D [a viz] MMMM YYYY',                                                                                // 4629
            LLL : 'D [a viz] MMMM YYYY h[e]mm A',                                                                      // 4630
            LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'                                                                // 4631
        },                                                                                                             // 4632
        calendar : {                                                                                                   // 4633
            sameDay : '[Hiziv da] LT',                                                                                 // 4634
            nextDay : '[Warc\'hoazh da] LT',                                                                           // 4635
            nextWeek : 'dddd [da] LT',                                                                                 // 4636
            lastDay : '[Dec\'h da] LT',                                                                                // 4637
            lastWeek : 'dddd [paset da] LT',                                                                           // 4638
            sameElse : 'L'                                                                                             // 4639
        },                                                                                                             // 4640
        relativeTime : {                                                                                               // 4641
            future : 'a-benn %s',                                                                                      // 4642
            past : '%s \'zo',                                                                                          // 4643
            s : 'un nebeud segondennoù',                                                                               // 4644
            m : 'ur vunutenn',                                                                                         // 4645
            mm : relativeTimeWithMutation,                                                                             // 4646
            h : 'un eur',                                                                                              // 4647
            hh : '%d eur',                                                                                             // 4648
            d : 'un devezh',                                                                                           // 4649
            dd : relativeTimeWithMutation,                                                                             // 4650
            M : 'ur miz',                                                                                              // 4651
            MM : relativeTimeWithMutation,                                                                             // 4652
            y : 'ur bloaz',                                                                                            // 4653
            yy : specialMutationForYears                                                                               // 4654
        },                                                                                                             // 4655
        ordinalParse: /\d{1,2}(añ|vet)/,                                                                               // 4656
        ordinal : function (number) {                                                                                  // 4657
            var output = (number === 1) ? 'añ' : 'vet';                                                                // 4658
            return number + output;                                                                                    // 4659
        },                                                                                                             // 4660
        week : {                                                                                                       // 4661
            dow : 1, // Monday is the first day of the week.                                                           // 4662
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 4663
        }                                                                                                              // 4664
    });                                                                                                                // 4665
                                                                                                                       // 4666
    //! moment.js locale configuration                                                                                 // 4667
    //! locale : bosnian (bs)                                                                                          // 4668
    //! author : Nedim Cholich : https://github.com/frontyard                                                          // 4669
    //! based on (hr) translation by Bojan Marković                                                                    // 4670
                                                                                                                       // 4671
    function bs__translate(number, withoutSuffix, key) {                                                               // 4672
        var result = number + ' ';                                                                                     // 4673
        switch (key) {                                                                                                 // 4674
        case 'm':                                                                                                      // 4675
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';                                                    // 4676
        case 'mm':                                                                                                     // 4677
            if (number === 1) {                                                                                        // 4678
                result += 'minuta';                                                                                    // 4679
            } else if (number === 2 || number === 3 || number === 4) {                                                 // 4680
                result += 'minute';                                                                                    // 4681
            } else {                                                                                                   // 4682
                result += 'minuta';                                                                                    // 4683
            }                                                                                                          // 4684
            return result;                                                                                             // 4685
        case 'h':                                                                                                      // 4686
            return withoutSuffix ? 'jedan sat' : 'jednog sata';                                                        // 4687
        case 'hh':                                                                                                     // 4688
            if (number === 1) {                                                                                        // 4689
                result += 'sat';                                                                                       // 4690
            } else if (number === 2 || number === 3 || number === 4) {                                                 // 4691
                result += 'sata';                                                                                      // 4692
            } else {                                                                                                   // 4693
                result += 'sati';                                                                                      // 4694
            }                                                                                                          // 4695
            return result;                                                                                             // 4696
        case 'dd':                                                                                                     // 4697
            if (number === 1) {                                                                                        // 4698
                result += 'dan';                                                                                       // 4699
            } else {                                                                                                   // 4700
                result += 'dana';                                                                                      // 4701
            }                                                                                                          // 4702
            return result;                                                                                             // 4703
        case 'MM':                                                                                                     // 4704
            if (number === 1) {                                                                                        // 4705
                result += 'mjesec';                                                                                    // 4706
            } else if (number === 2 || number === 3 || number === 4) {                                                 // 4707
                result += 'mjeseca';                                                                                   // 4708
            } else {                                                                                                   // 4709
                result += 'mjeseci';                                                                                   // 4710
            }                                                                                                          // 4711
            return result;                                                                                             // 4712
        case 'yy':                                                                                                     // 4713
            if (number === 1) {                                                                                        // 4714
                result += 'godina';                                                                                    // 4715
            } else if (number === 2 || number === 3 || number === 4) {                                                 // 4716
                result += 'godine';                                                                                    // 4717
            } else {                                                                                                   // 4718
                result += 'godina';                                                                                    // 4719
            }                                                                                                          // 4720
            return result;                                                                                             // 4721
        }                                                                                                              // 4722
    }                                                                                                                  // 4723
                                                                                                                       // 4724
    var bs = moment__default.defineLocale('bs', {                                                                      // 4725
        months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),      // 4726
        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),                        // 4727
        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),                             // 4728
        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),                                               // 4729
        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),                                                               // 4730
        longDateFormat : {                                                                                             // 4731
            LT : 'H:mm',                                                                                               // 4732
            LTS : 'H:mm:ss',                                                                                           // 4733
            L : 'DD. MM. YYYY',                                                                                        // 4734
            LL : 'D. MMMM YYYY',                                                                                       // 4735
            LLL : 'D. MMMM YYYY H:mm',                                                                                 // 4736
            LLLL : 'dddd, D. MMMM YYYY H:mm'                                                                           // 4737
        },                                                                                                             // 4738
        calendar : {                                                                                                   // 4739
            sameDay  : '[danas u] LT',                                                                                 // 4740
            nextDay  : '[sutra u] LT',                                                                                 // 4741
            nextWeek : function () {                                                                                   // 4742
                switch (this.day()) {                                                                                  // 4743
                case 0:                                                                                                // 4744
                    return '[u] [nedjelju] [u] LT';                                                                    // 4745
                case 3:                                                                                                // 4746
                    return '[u] [srijedu] [u] LT';                                                                     // 4747
                case 6:                                                                                                // 4748
                    return '[u] [subotu] [u] LT';                                                                      // 4749
                case 1:                                                                                                // 4750
                case 2:                                                                                                // 4751
                case 4:                                                                                                // 4752
                case 5:                                                                                                // 4753
                    return '[u] dddd [u] LT';                                                                          // 4754
                }                                                                                                      // 4755
            },                                                                                                         // 4756
            lastDay  : '[jučer u] LT',                                                                                 // 4757
            lastWeek : function () {                                                                                   // 4758
                switch (this.day()) {                                                                                  // 4759
                case 0:                                                                                                // 4760
                case 3:                                                                                                // 4761
                    return '[prošlu] dddd [u] LT';                                                                     // 4762
                case 6:                                                                                                // 4763
                    return '[prošle] [subote] [u] LT';                                                                 // 4764
                case 1:                                                                                                // 4765
                case 2:                                                                                                // 4766
                case 4:                                                                                                // 4767
                case 5:                                                                                                // 4768
                    return '[prošli] dddd [u] LT';                                                                     // 4769
                }                                                                                                      // 4770
            },                                                                                                         // 4771
            sameElse : 'L'                                                                                             // 4772
        },                                                                                                             // 4773
        relativeTime : {                                                                                               // 4774
            future : 'za %s',                                                                                          // 4775
            past   : 'prije %s',                                                                                       // 4776
            s      : 'par sekundi',                                                                                    // 4777
            m      : bs__translate,                                                                                    // 4778
            mm     : bs__translate,                                                                                    // 4779
            h      : bs__translate,                                                                                    // 4780
            hh     : bs__translate,                                                                                    // 4781
            d      : 'dan',                                                                                            // 4782
            dd     : bs__translate,                                                                                    // 4783
            M      : 'mjesec',                                                                                         // 4784
            MM     : bs__translate,                                                                                    // 4785
            y      : 'godinu',                                                                                         // 4786
            yy     : bs__translate                                                                                     // 4787
        },                                                                                                             // 4788
        ordinalParse: /\d{1,2}\./,                                                                                     // 4789
        ordinal : '%d.',                                                                                               // 4790
        week : {                                                                                                       // 4791
            dow : 1, // Monday is the first day of the week.                                                           // 4792
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 4793
        }                                                                                                              // 4794
    });                                                                                                                // 4795
                                                                                                                       // 4796
    //! moment.js locale configuration                                                                                 // 4797
    //! locale : catalan (ca)                                                                                          // 4798
    //! author : Juan G. Hurtado : https://github.com/juanghurtado                                                     // 4799
                                                                                                                       // 4800
    var ca = moment__default.defineLocale('ca', {                                                                      // 4801
        months : 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),       // 4802
        monthsShort : 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),                        // 4803
        weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),                           // 4804
        weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),                                                      // 4805
        weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),                                                               // 4806
        longDateFormat : {                                                                                             // 4807
            LT : 'H:mm',                                                                                               // 4808
            LTS : 'H:mm:ss',                                                                                           // 4809
            L : 'DD/MM/YYYY',                                                                                          // 4810
            LL : 'D MMMM YYYY',                                                                                        // 4811
            LLL : 'D MMMM YYYY H:mm',                                                                                  // 4812
            LLLL : 'dddd D MMMM YYYY H:mm'                                                                             // 4813
        },                                                                                                             // 4814
        calendar : {                                                                                                   // 4815
            sameDay : function () {                                                                                    // 4816
                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';                                    // 4817
            },                                                                                                         // 4818
            nextDay : function () {                                                                                    // 4819
                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';                                    // 4820
            },                                                                                                         // 4821
            nextWeek : function () {                                                                                   // 4822
                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';                                    // 4823
            },                                                                                                         // 4824
            lastDay : function () {                                                                                    // 4825
                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';                                    // 4826
            },                                                                                                         // 4827
            lastWeek : function () {                                                                                   // 4828
                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';                        // 4829
            },                                                                                                         // 4830
            sameElse : 'L'                                                                                             // 4831
        },                                                                                                             // 4832
        relativeTime : {                                                                                               // 4833
            future : 'en %s',                                                                                          // 4834
            past : 'fa %s',                                                                                            // 4835
            s : 'uns segons',                                                                                          // 4836
            m : 'un minut',                                                                                            // 4837
            mm : '%d minuts',                                                                                          // 4838
            h : 'una hora',                                                                                            // 4839
            hh : '%d hores',                                                                                           // 4840
            d : 'un dia',                                                                                              // 4841
            dd : '%d dies',                                                                                            // 4842
            M : 'un mes',                                                                                              // 4843
            MM : '%d mesos',                                                                                           // 4844
            y : 'un any',                                                                                              // 4845
            yy : '%d anys'                                                                                             // 4846
        },                                                                                                             // 4847
        ordinalParse: /\d{1,2}(r|n|t|è|a)/,                                                                            // 4848
        ordinal : function (number, period) {                                                                          // 4849
            var output = (number === 1) ? 'r' :                                                                        // 4850
                (number === 2) ? 'n' :                                                                                 // 4851
                (number === 3) ? 'r' :                                                                                 // 4852
                (number === 4) ? 't' : 'è';                                                                            // 4853
            if (period === 'w' || period === 'W') {                                                                    // 4854
                output = 'a';                                                                                          // 4855
            }                                                                                                          // 4856
            return number + output;                                                                                    // 4857
        },                                                                                                             // 4858
        week : {                                                                                                       // 4859
            dow : 1, // Monday is the first day of the week.                                                           // 4860
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 4861
        }                                                                                                              // 4862
    });                                                                                                                // 4863
                                                                                                                       // 4864
    //! moment.js locale configuration                                                                                 // 4865
    //! locale : czech (cs)                                                                                            // 4866
    //! author : petrbela : https://github.com/petrbela                                                                // 4867
                                                                                                                       // 4868
    var cs__months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),   // 4869
        cs__monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');                                // 4870
    function cs__plural(n) {                                                                                           // 4871
        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);                                                               // 4872
    }                                                                                                                  // 4873
    function cs__translate(number, withoutSuffix, key, isFuture) {                                                     // 4874
        var result = number + ' ';                                                                                     // 4875
        switch (key) {                                                                                                 // 4876
        case 's':  // a few seconds / in a few seconds / a few seconds ago                                             // 4877
            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';                                       // 4878
        case 'm':  // a minute / in a minute / a minute ago                                                            // 4879
            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');                                       // 4880
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago                                                         // 4881
            if (withoutSuffix || isFuture) {                                                                           // 4882
                return result + (cs__plural(number) ? 'minuty' : 'minut');                                             // 4883
            } else {                                                                                                   // 4884
                return result + 'minutami';                                                                            // 4885
            }                                                                                                          // 4886
            break;                                                                                                     // 4887
        case 'h':  // an hour / in an hour / an hour ago                                                               // 4888
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');                                       // 4889
        case 'hh': // 9 hours / in 9 hours / 9 hours ago                                                               // 4890
            if (withoutSuffix || isFuture) {                                                                           // 4891
                return result + (cs__plural(number) ? 'hodiny' : 'hodin');                                             // 4892
            } else {                                                                                                   // 4893
                return result + 'hodinami';                                                                            // 4894
            }                                                                                                          // 4895
            break;                                                                                                     // 4896
        case 'd':  // a day / in a day / a day ago                                                                     // 4897
            return (withoutSuffix || isFuture) ? 'den' : 'dnem';                                                       // 4898
        case 'dd': // 9 days / in 9 days / 9 days ago                                                                  // 4899
            if (withoutSuffix || isFuture) {                                                                           // 4900
                return result + (cs__plural(number) ? 'dny' : 'dní');                                                  // 4901
            } else {                                                                                                   // 4902
                return result + 'dny';                                                                                 // 4903
            }                                                                                                          // 4904
            break;                                                                                                     // 4905
        case 'M':  // a month / in a month / a month ago                                                               // 4906
            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';                                                  // 4907
        case 'MM': // 9 months / in 9 months / 9 months ago                                                            // 4908
            if (withoutSuffix || isFuture) {                                                                           // 4909
                return result + (cs__plural(number) ? 'měsíce' : 'měsíců');                                            // 4910
            } else {                                                                                                   // 4911
                return result + 'měsíci';                                                                              // 4912
            }                                                                                                          // 4913
            break;                                                                                                     // 4914
        case 'y':  // a year / in a year / a year ago                                                                  // 4915
            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';                                                      // 4916
        case 'yy': // 9 years / in 9 years / 9 years ago                                                               // 4917
            if (withoutSuffix || isFuture) {                                                                           // 4918
                return result + (cs__plural(number) ? 'roky' : 'let');                                                 // 4919
            } else {                                                                                                   // 4920
                return result + 'lety';                                                                                // 4921
            }                                                                                                          // 4922
            break;                                                                                                     // 4923
        }                                                                                                              // 4924
    }                                                                                                                  // 4925
                                                                                                                       // 4926
    var cs = moment__default.defineLocale('cs', {                                                                      // 4927
        months : cs__months,                                                                                           // 4928
        monthsShort : cs__monthsShort,                                                                                 // 4929
        monthsParse : (function (months, monthsShort) {                                                                // 4930
            var i, _monthsParse = [];                                                                                  // 4931
            for (i = 0; i < 12; i++) {                                                                                 // 4932
                // use custom parser to solve problem with July (červenec)                                             // 4933
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');                     // 4934
            }                                                                                                          // 4935
            return _monthsParse;                                                                                       // 4936
        }(cs__months, cs__monthsShort)),                                                                               // 4937
        shortMonthsParse : (function (monthsShort) {                                                                   // 4938
            var i, _shortMonthsParse = [];                                                                             // 4939
            for (i = 0; i < 12; i++) {                                                                                 // 4940
                _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');                                    // 4941
            }                                                                                                          // 4942
            return _shortMonthsParse;                                                                                  // 4943
        }(cs__monthsShort)),                                                                                           // 4944
        longMonthsParse : (function (months) {                                                                         // 4945
            var i, _longMonthsParse = [];                                                                              // 4946
            for (i = 0; i < 12; i++) {                                                                                 // 4947
                _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');                                          // 4948
            }                                                                                                          // 4949
            return _longMonthsParse;                                                                                   // 4950
        }(cs__months)),                                                                                                // 4951
        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),                                      // 4952
        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),                                                             // 4953
        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),                                                               // 4954
        longDateFormat : {                                                                                             // 4955
            LT: 'H:mm',                                                                                                // 4956
            LTS : 'H:mm:ss',                                                                                           // 4957
            L : 'DD.MM.YYYY',                                                                                          // 4958
            LL : 'D. MMMM YYYY',                                                                                       // 4959
            LLL : 'D. MMMM YYYY H:mm',                                                                                 // 4960
            LLLL : 'dddd D. MMMM YYYY H:mm'                                                                            // 4961
        },                                                                                                             // 4962
        calendar : {                                                                                                   // 4963
            sameDay: '[dnes v] LT',                                                                                    // 4964
            nextDay: '[zítra v] LT',                                                                                   // 4965
            nextWeek: function () {                                                                                    // 4966
                switch (this.day()) {                                                                                  // 4967
                case 0:                                                                                                // 4968
                    return '[v neděli v] LT';                                                                          // 4969
                case 1:                                                                                                // 4970
                case 2:                                                                                                // 4971
                    return '[v] dddd [v] LT';                                                                          // 4972
                case 3:                                                                                                // 4973
                    return '[ve středu v] LT';                                                                         // 4974
                case 4:                                                                                                // 4975
                    return '[ve čtvrtek v] LT';                                                                        // 4976
                case 5:                                                                                                // 4977
                    return '[v pátek v] LT';                                                                           // 4978
                case 6:                                                                                                // 4979
                    return '[v sobotu v] LT';                                                                          // 4980
                }                                                                                                      // 4981
            },                                                                                                         // 4982
            lastDay: '[včera v] LT',                                                                                   // 4983
            lastWeek: function () {                                                                                    // 4984
                switch (this.day()) {                                                                                  // 4985
                case 0:                                                                                                // 4986
                    return '[minulou neděli v] LT';                                                                    // 4987
                case 1:                                                                                                // 4988
                case 2:                                                                                                // 4989
                    return '[minulé] dddd [v] LT';                                                                     // 4990
                case 3:                                                                                                // 4991
                    return '[minulou středu v] LT';                                                                    // 4992
                case 4:                                                                                                // 4993
                case 5:                                                                                                // 4994
                    return '[minulý] dddd [v] LT';                                                                     // 4995
                case 6:                                                                                                // 4996
                    return '[minulou sobotu v] LT';                                                                    // 4997
                }                                                                                                      // 4998
            },                                                                                                         // 4999
            sameElse: 'L'                                                                                              // 5000
        },                                                                                                             // 5001
        relativeTime : {                                                                                               // 5002
            future : 'za %s',                                                                                          // 5003
            past : 'před %s',                                                                                          // 5004
            s : cs__translate,                                                                                         // 5005
            m : cs__translate,                                                                                         // 5006
            mm : cs__translate,                                                                                        // 5007
            h : cs__translate,                                                                                         // 5008
            hh : cs__translate,                                                                                        // 5009
            d : cs__translate,                                                                                         // 5010
            dd : cs__translate,                                                                                        // 5011
            M : cs__translate,                                                                                         // 5012
            MM : cs__translate,                                                                                        // 5013
            y : cs__translate,                                                                                         // 5014
            yy : cs__translate                                                                                         // 5015
        },                                                                                                             // 5016
        ordinalParse : /\d{1,2}\./,                                                                                    // 5017
        ordinal : '%d.',                                                                                               // 5018
        week : {                                                                                                       // 5019
            dow : 1, // Monday is the first day of the week.                                                           // 5020
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 5021
        }                                                                                                              // 5022
    });                                                                                                                // 5023
                                                                                                                       // 5024
    //! moment.js locale configuration                                                                                 // 5025
    //! locale : chuvash (cv)                                                                                          // 5026
    //! author : Anatoly Mironov : https://github.com/mirontoli                                                        // 5027
                                                                                                                       // 5028
    var cv = moment__default.defineLocale('cv', {                                                                      // 5029
        months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),                           // 5030
        monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),                                    // 5031
        weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),                     // 5032
        weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),                                                       // 5033
        weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),                                                               // 5034
        longDateFormat : {                                                                                             // 5035
            LT : 'HH:mm',                                                                                              // 5036
            LTS : 'HH:mm:ss',                                                                                          // 5037
            L : 'DD-MM-YYYY',                                                                                          // 5038
            LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',                                                                // 5039
            LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',                                                        // 5040
            LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'                                                  // 5041
        },                                                                                                             // 5042
        calendar : {                                                                                                   // 5043
            sameDay: '[Паян] LT [сехетре]',                                                                            // 5044
            nextDay: '[Ыран] LT [сехетре]',                                                                            // 5045
            lastDay: '[Ӗнер] LT [сехетре]',                                                                            // 5046
            nextWeek: '[Ҫитес] dddd LT [сехетре]',                                                                     // 5047
            lastWeek: '[Иртнӗ] dddd LT [сехетре]',                                                                     // 5048
            sameElse: 'L'                                                                                              // 5049
        },                                                                                                             // 5050
        relativeTime : {                                                                                               // 5051
            future : function (output) {                                                                               // 5052
                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';                     // 5053
                return output + affix;                                                                                 // 5054
            },                                                                                                         // 5055
            past : '%s каялла',                                                                                        // 5056
            s : 'пӗр-ик ҫеккунт',                                                                                      // 5057
            m : 'пӗр минут',                                                                                           // 5058
            mm : '%d минут',                                                                                           // 5059
            h : 'пӗр сехет',                                                                                           // 5060
            hh : '%d сехет',                                                                                           // 5061
            d : 'пӗр кун',                                                                                             // 5062
            dd : '%d кун',                                                                                             // 5063
            M : 'пӗр уйӑх',                                                                                            // 5064
            MM : '%d уйӑх',                                                                                            // 5065
            y : 'пӗр ҫул',                                                                                             // 5066
            yy : '%d ҫул'                                                                                              // 5067
        },                                                                                                             // 5068
        ordinalParse: /\d{1,2}-мӗш/,                                                                                   // 5069
        ordinal : '%d-мӗш',                                                                                            // 5070
        week : {                                                                                                       // 5071
            dow : 1, // Monday is the first day of the week.                                                           // 5072
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 5073
        }                                                                                                              // 5074
    });                                                                                                                // 5075
                                                                                                                       // 5076
    //! moment.js locale configuration                                                                                 // 5077
    //! locale : Welsh (cy)                                                                                            // 5078
    //! author : Robert Allen                                                                                          // 5079
                                                                                                                       // 5080
    var cy = moment__default.defineLocale('cy', {                                                                      // 5081
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),   // 5082
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),                                  // 5083
        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),           // 5084
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),                                                      // 5085
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),                                                                // 5086
        // time formats are the same as en-gb                                                                          // 5087
        longDateFormat: {                                                                                              // 5088
            LT: 'HH:mm',                                                                                               // 5089
            LTS : 'HH:mm:ss',                                                                                          // 5090
            L: 'DD/MM/YYYY',                                                                                           // 5091
            LL: 'D MMMM YYYY',                                                                                         // 5092
            LLL: 'D MMMM YYYY HH:mm',                                                                                  // 5093
            LLLL: 'dddd, D MMMM YYYY HH:mm'                                                                            // 5094
        },                                                                                                             // 5095
        calendar: {                                                                                                    // 5096
            sameDay: '[Heddiw am] LT',                                                                                 // 5097
            nextDay: '[Yfory am] LT',                                                                                  // 5098
            nextWeek: 'dddd [am] LT',                                                                                  // 5099
            lastDay: '[Ddoe am] LT',                                                                                   // 5100
            lastWeek: 'dddd [diwethaf am] LT',                                                                         // 5101
            sameElse: 'L'                                                                                              // 5102
        },                                                                                                             // 5103
        relativeTime: {                                                                                                // 5104
            future: 'mewn %s',                                                                                         // 5105
            past: '%s yn ôl',                                                                                          // 5106
            s: 'ychydig eiliadau',                                                                                     // 5107
            m: 'munud',                                                                                                // 5108
            mm: '%d munud',                                                                                            // 5109
            h: 'awr',                                                                                                  // 5110
            hh: '%d awr',                                                                                              // 5111
            d: 'diwrnod',                                                                                              // 5112
            dd: '%d diwrnod',                                                                                          // 5113
            M: 'mis',                                                                                                  // 5114
            MM: '%d mis',                                                                                              // 5115
            y: 'blwyddyn',                                                                                             // 5116
            yy: '%d flynedd'                                                                                           // 5117
        },                                                                                                             // 5118
        ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,                                                              // 5119
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh                              // 5120
        ordinal: function (number) {                                                                                   // 5121
            var b = number,                                                                                            // 5122
                output = '',                                                                                           // 5123
                lookup = [                                                                                             // 5124
                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed               // 5125
                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed                    // 5126
                ];                                                                                                     // 5127
            if (b > 20) {                                                                                              // 5128
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {                                       // 5129
                    output = 'fed'; // not 30ain, 70ain or 90ain                                                       // 5130
                } else {                                                                                               // 5131
                    output = 'ain';                                                                                    // 5132
                }                                                                                                      // 5133
            } else if (b > 0) {                                                                                        // 5134
                output = lookup[b];                                                                                    // 5135
            }                                                                                                          // 5136
            return number + output;                                                                                    // 5137
        },                                                                                                             // 5138
        week : {                                                                                                       // 5139
            dow : 1, // Monday is the first day of the week.                                                           // 5140
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 5141
        }                                                                                                              // 5142
    });                                                                                                                // 5143
                                                                                                                       // 5144
    //! moment.js locale configuration                                                                                 // 5145
    //! locale : danish (da)                                                                                           // 5146
    //! author : Ulrik Nielsen : https://github.com/mrbase                                                             // 5147
                                                                                                                       // 5148
    var da = moment__default.defineLocale('da', {                                                                      // 5149
        months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),     // 5150
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),                                    // 5151
        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),                                    // 5152
        weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),                                                      // 5153
        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),                                                               // 5154
        longDateFormat : {                                                                                             // 5155
            LT : 'HH:mm',                                                                                              // 5156
            LTS : 'HH:mm:ss',                                                                                          // 5157
            L : 'DD/MM/YYYY',                                                                                          // 5158
            LL : 'D. MMMM YYYY',                                                                                       // 5159
            LLL : 'D. MMMM YYYY HH:mm',                                                                                // 5160
            LLLL : 'dddd [d.] D. MMMM YYYY HH:mm'                                                                      // 5161
        },                                                                                                             // 5162
        calendar : {                                                                                                   // 5163
            sameDay : '[I dag kl.] LT',                                                                                // 5164
            nextDay : '[I morgen kl.] LT',                                                                             // 5165
            nextWeek : 'dddd [kl.] LT',                                                                                // 5166
            lastDay : '[I går kl.] LT',                                                                                // 5167
            lastWeek : '[sidste] dddd [kl] LT',                                                                        // 5168
            sameElse : 'L'                                                                                             // 5169
        },                                                                                                             // 5170
        relativeTime : {                                                                                               // 5171
            future : 'om %s',                                                                                          // 5172
            past : '%s siden',                                                                                         // 5173
            s : 'få sekunder',                                                                                         // 5174
            m : 'et minut',                                                                                            // 5175
            mm : '%d minutter',                                                                                        // 5176
            h : 'en time',                                                                                             // 5177
            hh : '%d timer',                                                                                           // 5178
            d : 'en dag',                                                                                              // 5179
            dd : '%d dage',                                                                                            // 5180
            M : 'en måned',                                                                                            // 5181
            MM : '%d måneder',                                                                                         // 5182
            y : 'et år',                                                                                               // 5183
            yy : '%d år'                                                                                               // 5184
        },                                                                                                             // 5185
        ordinalParse: /\d{1,2}\./,                                                                                     // 5186
        ordinal : '%d.',                                                                                               // 5187
        week : {                                                                                                       // 5188
            dow : 1, // Monday is the first day of the week.                                                           // 5189
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 5190
        }                                                                                                              // 5191
    });                                                                                                                // 5192
                                                                                                                       // 5193
    //! moment.js locale configuration                                                                                 // 5194
    //! locale : austrian german (de-at)                                                                               // 5195
    //! author : lluchs : https://github.com/lluchs                                                                    // 5196
    //! author: Menelion Elensúle: https://github.com/Oire                                                             // 5197
    //! author : Martin Groller : https://github.com/MadMG                                                             // 5198
    //! author : Mikolaj Dadela : https://github.com/mik01aj                                                           // 5199
                                                                                                                       // 5200
    function de_at__processRelativeTime(number, withoutSuffix, key, isFuture) {                                        // 5201
        var format = {                                                                                                 // 5202
            'm': ['eine Minute', 'einer Minute'],                                                                      // 5203
            'h': ['eine Stunde', 'einer Stunde'],                                                                      // 5204
            'd': ['ein Tag', 'einem Tag'],                                                                             // 5205
            'dd': [number + ' Tage', number + ' Tagen'],                                                               // 5206
            'M': ['ein Monat', 'einem Monat'],                                                                         // 5207
            'MM': [number + ' Monate', number + ' Monaten'],                                                           // 5208
            'y': ['ein Jahr', 'einem Jahr'],                                                                           // 5209
            'yy': [number + ' Jahre', number + ' Jahren']                                                              // 5210
        };                                                                                                             // 5211
        return withoutSuffix ? format[key][0] : format[key][1];                                                        // 5212
    }                                                                                                                  // 5213
                                                                                                                       // 5214
    var de_at = moment__default.defineLocale('de-at', {                                                                // 5215
        months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),      // 5216
        monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),                       // 5217
        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),                           // 5218
        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),                                                      // 5219
        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),                                                               // 5220
        longDateFormat : {                                                                                             // 5221
            LT: 'HH:mm',                                                                                               // 5222
            LTS: 'HH:mm:ss',                                                                                           // 5223
            L : 'DD.MM.YYYY',                                                                                          // 5224
            LL : 'D. MMMM YYYY',                                                                                       // 5225
            LLL : 'D. MMMM YYYY HH:mm',                                                                                // 5226
            LLLL : 'dddd, D. MMMM YYYY HH:mm'                                                                          // 5227
        },                                                                                                             // 5228
        calendar : {                                                                                                   // 5229
            sameDay: '[heute um] LT [Uhr]',                                                                            // 5230
            sameElse: 'L',                                                                                             // 5231
            nextDay: '[morgen um] LT [Uhr]',                                                                           // 5232
            nextWeek: 'dddd [um] LT [Uhr]',                                                                            // 5233
            lastDay: '[gestern um] LT [Uhr]',                                                                          // 5234
            lastWeek: '[letzten] dddd [um] LT [Uhr]'                                                                   // 5235
        },                                                                                                             // 5236
        relativeTime : {                                                                                               // 5237
            future : 'in %s',                                                                                          // 5238
            past : 'vor %s',                                                                                           // 5239
            s : 'ein paar Sekunden',                                                                                   // 5240
            m : de_at__processRelativeTime,                                                                            // 5241
            mm : '%d Minuten',                                                                                         // 5242
            h : de_at__processRelativeTime,                                                                            // 5243
            hh : '%d Stunden',                                                                                         // 5244
            d : de_at__processRelativeTime,                                                                            // 5245
            dd : de_at__processRelativeTime,                                                                           // 5246
            M : de_at__processRelativeTime,                                                                            // 5247
            MM : de_at__processRelativeTime,                                                                           // 5248
            y : de_at__processRelativeTime,                                                                            // 5249
            yy : de_at__processRelativeTime                                                                            // 5250
        },                                                                                                             // 5251
        ordinalParse: /\d{1,2}\./,                                                                                     // 5252
        ordinal : '%d.',                                                                                               // 5253
        week : {                                                                                                       // 5254
            dow : 1, // Monday is the first day of the week.                                                           // 5255
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 5256
        }                                                                                                              // 5257
    });                                                                                                                // 5258
                                                                                                                       // 5259
    //! moment.js locale configuration                                                                                 // 5260
    //! locale : german (de)                                                                                           // 5261
    //! author : lluchs : https://github.com/lluchs                                                                    // 5262
    //! author: Menelion Elensúle: https://github.com/Oire                                                             // 5263
    //! author : Mikolaj Dadela : https://github.com/mik01aj                                                           // 5264
                                                                                                                       // 5265
    function de__processRelativeTime(number, withoutSuffix, key, isFuture) {                                           // 5266
        var format = {                                                                                                 // 5267
            'm': ['eine Minute', 'einer Minute'],                                                                      // 5268
            'h': ['eine Stunde', 'einer Stunde'],                                                                      // 5269
            'd': ['ein Tag', 'einem Tag'],                                                                             // 5270
            'dd': [number + ' Tage', number + ' Tagen'],                                                               // 5271
            'M': ['ein Monat', 'einem Monat'],                                                                         // 5272
            'MM': [number + ' Monate', number + ' Monaten'],                                                           // 5273
            'y': ['ein Jahr', 'einem Jahr'],                                                                           // 5274
            'yy': [number + ' Jahre', number + ' Jahren']                                                              // 5275
        };                                                                                                             // 5276
        return withoutSuffix ? format[key][0] : format[key][1];                                                        // 5277
    }                                                                                                                  // 5278
                                                                                                                       // 5279
    var de = moment__default.defineLocale('de', {                                                                      // 5280
        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),      // 5281
        monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),                       // 5282
        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),                           // 5283
        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),                                                      // 5284
        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),                                                               // 5285
        longDateFormat : {                                                                                             // 5286
            LT: 'HH:mm',                                                                                               // 5287
            LTS: 'HH:mm:ss',                                                                                           // 5288
            L : 'DD.MM.YYYY',                                                                                          // 5289
            LL : 'D. MMMM YYYY',                                                                                       // 5290
            LLL : 'D. MMMM YYYY HH:mm',                                                                                // 5291
            LLLL : 'dddd, D. MMMM YYYY HH:mm'                                                                          // 5292
        },                                                                                                             // 5293
        calendar : {                                                                                                   // 5294
            sameDay: '[heute um] LT [Uhr]',                                                                            // 5295
            sameElse: 'L',                                                                                             // 5296
            nextDay: '[morgen um] LT [Uhr]',                                                                           // 5297
            nextWeek: 'dddd [um] LT [Uhr]',                                                                            // 5298
            lastDay: '[gestern um] LT [Uhr]',                                                                          // 5299
            lastWeek: '[letzten] dddd [um] LT [Uhr]'                                                                   // 5300
        },                                                                                                             // 5301
        relativeTime : {                                                                                               // 5302
            future : 'in %s',                                                                                          // 5303
            past : 'vor %s',                                                                                           // 5304
            s : 'ein paar Sekunden',                                                                                   // 5305
            m : de__processRelativeTime,                                                                               // 5306
            mm : '%d Minuten',                                                                                         // 5307
            h : de__processRelativeTime,                                                                               // 5308
            hh : '%d Stunden',                                                                                         // 5309
            d : de__processRelativeTime,                                                                               // 5310
            dd : de__processRelativeTime,                                                                              // 5311
            M : de__processRelativeTime,                                                                               // 5312
            MM : de__processRelativeTime,                                                                              // 5313
            y : de__processRelativeTime,                                                                               // 5314
            yy : de__processRelativeTime                                                                               // 5315
        },                                                                                                             // 5316
        ordinalParse: /\d{1,2}\./,                                                                                     // 5317
        ordinal : '%d.',                                                                                               // 5318
        week : {                                                                                                       // 5319
            dow : 1, // Monday is the first day of the week.                                                           // 5320
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 5321
        }                                                                                                              // 5322
    });                                                                                                                // 5323
                                                                                                                       // 5324
    //! moment.js locale configuration                                                                                 // 5325
    //! locale : dhivehi (dv)                                                                                          // 5326
    //! author : Jawish Hameed : https://github.com/jawish                                                             // 5327
                                                                                                                       // 5328
    var dv__months = [                                                                                                 // 5329
        'ޖެނުއަރީ',                                                                                                    // 5330
        'ފެބްރުއަރީ',                                                                                                  // 5331
        'މާރިޗު',                                                                                                      // 5332
        'އޭޕްރީލު',                                                                                                    // 5333
        'މޭ',                                                                                                          // 5334
        'ޖޫން',                                                                                                        // 5335
        'ޖުލައި',                                                                                                      // 5336
        'އޯގަސްޓު',                                                                                                    // 5337
        'ސެޕްޓެމްބަރު',                                                                                                // 5338
        'އޮކްޓޯބަރު',                                                                                                  // 5339
        'ނޮވެމްބަރު',                                                                                                  // 5340
        'ޑިސެމްބަރު'                                                                                                   // 5341
    ], dv__weekdays = [                                                                                                // 5342
        'އާދިއްތަ',                                                                                                    // 5343
        'ހޯމަ',                                                                                                        // 5344
        'އަންގާރަ',                                                                                                    // 5345
        'ބުދަ',                                                                                                        // 5346
        'ބުރާސްފަތި',                                                                                                  // 5347
        'ހުކުރު',                                                                                                      // 5348
        'ހޮނިހިރު'                                                                                                     // 5349
    ];                                                                                                                 // 5350
                                                                                                                       // 5351
    var dv = moment__default.defineLocale('dv', {                                                                      // 5352
        months : dv__months,                                                                                           // 5353
        monthsShort : dv__months,                                                                                      // 5354
        weekdays : dv__weekdays,                                                                                       // 5355
        weekdaysShort : dv__weekdays,                                                                                  // 5356
        weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),                                                 // 5357
        longDateFormat : {                                                                                             // 5358
                                                                                                                       // 5359
            LT : 'HH:mm',                                                                                              // 5360
            LTS : 'HH:mm:ss',                                                                                          // 5361
            L : 'D/M/YYYY',                                                                                            // 5362
            LL : 'D MMMM YYYY',                                                                                        // 5363
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 5364
            LLLL : 'dddd D MMMM YYYY HH:mm'                                                                            // 5365
        },                                                                                                             // 5366
        meridiemParse: /މކ|މފ/,                                                                                        // 5367
        isPM : function (input) {                                                                                      // 5368
            return 'މފ' === input;                                                                                     // 5369
        },                                                                                                             // 5370
        meridiem : function (hour, minute, isLower) {                                                                  // 5371
            if (hour < 12) {                                                                                           // 5372
                return 'މކ';                                                                                           // 5373
            } else {                                                                                                   // 5374
                return 'މފ';                                                                                           // 5375
            }                                                                                                          // 5376
        },                                                                                                             // 5377
        calendar : {                                                                                                   // 5378
            sameDay : '[މިއަދު] LT',                                                                                   // 5379
            nextDay : '[މާދަމާ] LT',                                                                                   // 5380
            nextWeek : 'dddd LT',                                                                                      // 5381
            lastDay : '[އިއްޔެ] LT',                                                                                   // 5382
            lastWeek : '[ފާއިތުވި] dddd LT',                                                                           // 5383
            sameElse : 'L'                                                                                             // 5384
        },                                                                                                             // 5385
        relativeTime : {                                                                                               // 5386
            future : 'ތެރޭގައި %s',                                                                                    // 5387
            past : 'ކުރިން %s',                                                                                        // 5388
            s : 'ސިކުންތުކޮޅެއް',                                                                                      // 5389
            m : 'މިނިޓެއް',                                                                                            // 5390
            mm : 'މިނިޓު %d',                                                                                          // 5391
            h : 'ގަޑިއިރެއް',                                                                                          // 5392
            hh : 'ގަޑިއިރު %d',                                                                                        // 5393
            d : 'ދުވަހެއް',                                                                                            // 5394
            dd : 'ދުވަސް %d',                                                                                          // 5395
            M : 'މަހެއް',                                                                                              // 5396
            MM : 'މަސް %d',                                                                                            // 5397
            y : 'އަހަރެއް',                                                                                            // 5398
            yy : 'އަހަރު %d'                                                                                           // 5399
        },                                                                                                             // 5400
        preparse: function (string) {                                                                                  // 5401
            return string.replace(/،/g, ',');                                                                          // 5402
        },                                                                                                             // 5403
        postformat: function (string) {                                                                                // 5404
            return string.replace(/,/g, '،');                                                                          // 5405
        },                                                                                                             // 5406
        week : {                                                                                                       // 5407
            dow : 7,  // Sunday is the first day of the week.                                                          // 5408
            doy : 12  // The week that contains Jan 1st is the first week of the year.                                 // 5409
        }                                                                                                              // 5410
    });                                                                                                                // 5411
                                                                                                                       // 5412
    //! moment.js locale configuration                                                                                 // 5413
    //! locale : modern greek (el)                                                                                     // 5414
    //! author : Aggelos Karalias : https://github.com/mehiel                                                          // 5415
                                                                                                                       // 5416
    var el = moment__default.defineLocale('el', {                                                                      // 5417
        monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
        monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
        months : function (momentToFormat, format) {                                                                   // 5420
            if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'     // 5421
                return this._monthsGenitiveEl[momentToFormat.month()];                                                 // 5422
            } else {                                                                                                   // 5423
                return this._monthsNominativeEl[momentToFormat.month()];                                               // 5424
            }                                                                                                          // 5425
        },                                                                                                             // 5426
        monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),                                  // 5427
        weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),                                // 5428
        weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),                                                      // 5429
        weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),                                                               // 5430
        meridiem : function (hours, minutes, isLower) {                                                                // 5431
            if (hours > 11) {                                                                                          // 5432
                return isLower ? 'μμ' : 'ΜΜ';                                                                          // 5433
            } else {                                                                                                   // 5434
                return isLower ? 'πμ' : 'ΠΜ';                                                                          // 5435
            }                                                                                                          // 5436
        },                                                                                                             // 5437
        isPM : function (input) {                                                                                      // 5438
            return ((input + '').toLowerCase()[0] === 'μ');                                                            // 5439
        },                                                                                                             // 5440
        meridiemParse : /[ΠΜ]\.?Μ?\.?/i,                                                                               // 5441
        longDateFormat : {                                                                                             // 5442
            LT : 'h:mm A',                                                                                             // 5443
            LTS : 'h:mm:ss A',                                                                                         // 5444
            L : 'DD/MM/YYYY',                                                                                          // 5445
            LL : 'D MMMM YYYY',                                                                                        // 5446
            LLL : 'D MMMM YYYY h:mm A',                                                                                // 5447
            LLLL : 'dddd, D MMMM YYYY h:mm A'                                                                          // 5448
        },                                                                                                             // 5449
        calendarEl : {                                                                                                 // 5450
            sameDay : '[Σήμερα {}] LT',                                                                                // 5451
            nextDay : '[Αύριο {}] LT',                                                                                 // 5452
            nextWeek : 'dddd [{}] LT',                                                                                 // 5453
            lastDay : '[Χθες {}] LT',                                                                                  // 5454
            lastWeek : function () {                                                                                   // 5455
                switch (this.day()) {                                                                                  // 5456
                    case 6:                                                                                            // 5457
                        return '[το προηγούμενο] dddd [{}] LT';                                                        // 5458
                    default:                                                                                           // 5459
                        return '[την προηγούμενη] dddd [{}] LT';                                                       // 5460
                }                                                                                                      // 5461
            },                                                                                                         // 5462
            sameElse : 'L'                                                                                             // 5463
        },                                                                                                             // 5464
        calendar : function (key, mom) {                                                                               // 5465
            var output = this._calendarEl[key],                                                                        // 5466
                hours = mom && mom.hours();                                                                            // 5467
            if (isFunction(output)) {                                                                                  // 5468
                output = output.apply(mom);                                                                            // 5469
            }                                                                                                          // 5470
            return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));                                          // 5471
        },                                                                                                             // 5472
        relativeTime : {                                                                                               // 5473
            future : 'σε %s',                                                                                          // 5474
            past : '%s πριν',                                                                                          // 5475
            s : 'λίγα δευτερόλεπτα',                                                                                   // 5476
            m : 'ένα λεπτό',                                                                                           // 5477
            mm : '%d λεπτά',                                                                                           // 5478
            h : 'μία ώρα',                                                                                             // 5479
            hh : '%d ώρες',                                                                                            // 5480
            d : 'μία μέρα',                                                                                            // 5481
            dd : '%d μέρες',                                                                                           // 5482
            M : 'ένας μήνας',                                                                                          // 5483
            MM : '%d μήνες',                                                                                           // 5484
            y : 'ένας χρόνος',                                                                                         // 5485
            yy : '%d χρόνια'                                                                                           // 5486
        },                                                                                                             // 5487
        ordinalParse: /\d{1,2}η/,                                                                                      // 5488
        ordinal: '%dη',                                                                                                // 5489
        week : {                                                                                                       // 5490
            dow : 1, // Monday is the first day of the week.                                                           // 5491
            doy : 4  // The week that contains Jan 4st is the first week of the year.                                  // 5492
        }                                                                                                              // 5493
    });                                                                                                                // 5494
                                                                                                                       // 5495
    //! moment.js locale configuration                                                                                 // 5496
    //! locale : australian english (en-au)                                                                            // 5497
                                                                                                                       // 5498
    var en_au = moment__default.defineLocale('en-au', {                                                                // 5499
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),   // 5500
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),                                    // 5501
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),                              // 5502
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),                                                      // 5503
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),                                                               // 5504
        longDateFormat : {                                                                                             // 5505
            LT : 'h:mm A',                                                                                             // 5506
            LTS : 'h:mm:ss A',                                                                                         // 5507
            L : 'DD/MM/YYYY',                                                                                          // 5508
            LL : 'D MMMM YYYY',                                                                                        // 5509
            LLL : 'D MMMM YYYY h:mm A',                                                                                // 5510
            LLLL : 'dddd, D MMMM YYYY h:mm A'                                                                          // 5511
        },                                                                                                             // 5512
        calendar : {                                                                                                   // 5513
            sameDay : '[Today at] LT',                                                                                 // 5514
            nextDay : '[Tomorrow at] LT',                                                                              // 5515
            nextWeek : 'dddd [at] LT',                                                                                 // 5516
            lastDay : '[Yesterday at] LT',                                                                             // 5517
            lastWeek : '[Last] dddd [at] LT',                                                                          // 5518
            sameElse : 'L'                                                                                             // 5519
        },                                                                                                             // 5520
        relativeTime : {                                                                                               // 5521
            future : 'in %s',                                                                                          // 5522
            past : '%s ago',                                                                                           // 5523
            s : 'a few seconds',                                                                                       // 5524
            m : 'a minute',                                                                                            // 5525
            mm : '%d minutes',                                                                                         // 5526
            h : 'an hour',                                                                                             // 5527
            hh : '%d hours',                                                                                           // 5528
            d : 'a day',                                                                                               // 5529
            dd : '%d days',                                                                                            // 5530
            M : 'a month',                                                                                             // 5531
            MM : '%d months',                                                                                          // 5532
            y : 'a year',                                                                                              // 5533
            yy : '%d years'                                                                                            // 5534
        },                                                                                                             // 5535
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,                                                                          // 5536
        ordinal : function (number) {                                                                                  // 5537
            var b = number % 10,                                                                                       // 5538
                output = (~~(number % 100 / 10) === 1) ? 'th' :                                                        // 5539
                (b === 1) ? 'st' :                                                                                     // 5540
                (b === 2) ? 'nd' :                                                                                     // 5541
                (b === 3) ? 'rd' : 'th';                                                                               // 5542
            return number + output;                                                                                    // 5543
        },                                                                                                             // 5544
        week : {                                                                                                       // 5545
            dow : 1, // Monday is the first day of the week.                                                           // 5546
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 5547
        }                                                                                                              // 5548
    });                                                                                                                // 5549
                                                                                                                       // 5550
    //! moment.js locale configuration                                                                                 // 5551
    //! locale : canadian english (en-ca)                                                                              // 5552
    //! author : Jonathan Abourbih : https://github.com/jonbca                                                         // 5553
                                                                                                                       // 5554
    var en_ca = moment__default.defineLocale('en-ca', {                                                                // 5555
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),   // 5556
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),                                    // 5557
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),                              // 5558
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),                                                      // 5559
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),                                                               // 5560
        longDateFormat : {                                                                                             // 5561
            LT : 'h:mm A',                                                                                             // 5562
            LTS : 'h:mm:ss A',                                                                                         // 5563
            L : 'YYYY-MM-DD',                                                                                          // 5564
            LL : 'MMMM D, YYYY',                                                                                       // 5565
            LLL : 'MMMM D, YYYY h:mm A',                                                                               // 5566
            LLLL : 'dddd, MMMM D, YYYY h:mm A'                                                                         // 5567
        },                                                                                                             // 5568
        calendar : {                                                                                                   // 5569
            sameDay : '[Today at] LT',                                                                                 // 5570
            nextDay : '[Tomorrow at] LT',                                                                              // 5571
            nextWeek : 'dddd [at] LT',                                                                                 // 5572
            lastDay : '[Yesterday at] LT',                                                                             // 5573
            lastWeek : '[Last] dddd [at] LT',                                                                          // 5574
            sameElse : 'L'                                                                                             // 5575
        },                                                                                                             // 5576
        relativeTime : {                                                                                               // 5577
            future : 'in %s',                                                                                          // 5578
            past : '%s ago',                                                                                           // 5579
            s : 'a few seconds',                                                                                       // 5580
            m : 'a minute',                                                                                            // 5581
            mm : '%d minutes',                                                                                         // 5582
            h : 'an hour',                                                                                             // 5583
            hh : '%d hours',                                                                                           // 5584
            d : 'a day',                                                                                               // 5585
            dd : '%d days',                                                                                            // 5586
            M : 'a month',                                                                                             // 5587
            MM : '%d months',                                                                                          // 5588
            y : 'a year',                                                                                              // 5589
            yy : '%d years'                                                                                            // 5590
        },                                                                                                             // 5591
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,                                                                          // 5592
        ordinal : function (number) {                                                                                  // 5593
            var b = number % 10,                                                                                       // 5594
                output = (~~(number % 100 / 10) === 1) ? 'th' :                                                        // 5595
                (b === 1) ? 'st' :                                                                                     // 5596
                (b === 2) ? 'nd' :                                                                                     // 5597
                (b === 3) ? 'rd' : 'th';                                                                               // 5598
            return number + output;                                                                                    // 5599
        }                                                                                                              // 5600
    });                                                                                                                // 5601
                                                                                                                       // 5602
    //! moment.js locale configuration                                                                                 // 5603
    //! locale : great britain english (en-gb)                                                                         // 5604
    //! author : Chris Gedrim : https://github.com/chrisgedrim                                                         // 5605
                                                                                                                       // 5606
    var en_gb = moment__default.defineLocale('en-gb', {                                                                // 5607
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),   // 5608
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),                                    // 5609
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),                              // 5610
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),                                                      // 5611
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),                                                               // 5612
        longDateFormat : {                                                                                             // 5613
            LT : 'HH:mm',                                                                                              // 5614
            LTS : 'HH:mm:ss',                                                                                          // 5615
            L : 'DD/MM/YYYY',                                                                                          // 5616
            LL : 'D MMMM YYYY',                                                                                        // 5617
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 5618
            LLLL : 'dddd, D MMMM YYYY HH:mm'                                                                           // 5619
        },                                                                                                             // 5620
        calendar : {                                                                                                   // 5621
            sameDay : '[Today at] LT',                                                                                 // 5622
            nextDay : '[Tomorrow at] LT',                                                                              // 5623
            nextWeek : 'dddd [at] LT',                                                                                 // 5624
            lastDay : '[Yesterday at] LT',                                                                             // 5625
            lastWeek : '[Last] dddd [at] LT',                                                                          // 5626
            sameElse : 'L'                                                                                             // 5627
        },                                                                                                             // 5628
        relativeTime : {                                                                                               // 5629
            future : 'in %s',                                                                                          // 5630
            past : '%s ago',                                                                                           // 5631
            s : 'a few seconds',                                                                                       // 5632
            m : 'a minute',                                                                                            // 5633
            mm : '%d minutes',                                                                                         // 5634
            h : 'an hour',                                                                                             // 5635
            hh : '%d hours',                                                                                           // 5636
            d : 'a day',                                                                                               // 5637
            dd : '%d days',                                                                                            // 5638
            M : 'a month',                                                                                             // 5639
            MM : '%d months',                                                                                          // 5640
            y : 'a year',                                                                                              // 5641
            yy : '%d years'                                                                                            // 5642
        },                                                                                                             // 5643
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,                                                                          // 5644
        ordinal : function (number) {                                                                                  // 5645
            var b = number % 10,                                                                                       // 5646
                output = (~~(number % 100 / 10) === 1) ? 'th' :                                                        // 5647
                (b === 1) ? 'st' :                                                                                     // 5648
                (b === 2) ? 'nd' :                                                                                     // 5649
                (b === 3) ? 'rd' : 'th';                                                                               // 5650
            return number + output;                                                                                    // 5651
        },                                                                                                             // 5652
        week : {                                                                                                       // 5653
            dow : 1, // Monday is the first day of the week.                                                           // 5654
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 5655
        }                                                                                                              // 5656
    });                                                                                                                // 5657
                                                                                                                       // 5658
    //! moment.js locale configuration                                                                                 // 5659
    //! locale : Irish english (en-ie)                                                                                 // 5660
    //! author : Chris Cartlidge : https://github.com/chriscartlidge                                                   // 5661
                                                                                                                       // 5662
    var en_ie = moment__default.defineLocale('en-ie', {                                                                // 5663
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),   // 5664
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),                                    // 5665
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),                              // 5666
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),                                                      // 5667
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),                                                               // 5668
        longDateFormat : {                                                                                             // 5669
            LT : 'HH:mm',                                                                                              // 5670
            LTS : 'HH:mm:ss',                                                                                          // 5671
            L : 'DD-MM-YYYY',                                                                                          // 5672
            LL : 'D MMMM YYYY',                                                                                        // 5673
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 5674
            LLLL : 'dddd D MMMM YYYY HH:mm'                                                                            // 5675
        },                                                                                                             // 5676
        calendar : {                                                                                                   // 5677
            sameDay : '[Today at] LT',                                                                                 // 5678
            nextDay : '[Tomorrow at] LT',                                                                              // 5679
            nextWeek : 'dddd [at] LT',                                                                                 // 5680
            lastDay : '[Yesterday at] LT',                                                                             // 5681
            lastWeek : '[Last] dddd [at] LT',                                                                          // 5682
            sameElse : 'L'                                                                                             // 5683
        },                                                                                                             // 5684
        relativeTime : {                                                                                               // 5685
            future : 'in %s',                                                                                          // 5686
            past : '%s ago',                                                                                           // 5687
            s : 'a few seconds',                                                                                       // 5688
            m : 'a minute',                                                                                            // 5689
            mm : '%d minutes',                                                                                         // 5690
            h : 'an hour',                                                                                             // 5691
            hh : '%d hours',                                                                                           // 5692
            d : 'a day',                                                                                               // 5693
            dd : '%d days',                                                                                            // 5694
            M : 'a month',                                                                                             // 5695
            MM : '%d months',                                                                                          // 5696
            y : 'a year',                                                                                              // 5697
            yy : '%d years'                                                                                            // 5698
        },                                                                                                             // 5699
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,                                                                          // 5700
        ordinal : function (number) {                                                                                  // 5701
            var b = number % 10,                                                                                       // 5702
                output = (~~(number % 100 / 10) === 1) ? 'th' :                                                        // 5703
                (b === 1) ? 'st' :                                                                                     // 5704
                (b === 2) ? 'nd' :                                                                                     // 5705
                (b === 3) ? 'rd' : 'th';                                                                               // 5706
            return number + output;                                                                                    // 5707
        },                                                                                                             // 5708
        week : {                                                                                                       // 5709
            dow : 1, // Monday is the first day of the week.                                                           // 5710
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 5711
        }                                                                                                              // 5712
    });                                                                                                                // 5713
                                                                                                                       // 5714
    //! moment.js locale configuration                                                                                 // 5715
    //! locale : New Zealand english (en-nz)                                                                           // 5716
                                                                                                                       // 5717
    var en_nz = moment__default.defineLocale('en-nz', {                                                                // 5718
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),   // 5719
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),                                    // 5720
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),                              // 5721
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),                                                      // 5722
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),                                                               // 5723
        longDateFormat : {                                                                                             // 5724
            LT : 'h:mm A',                                                                                             // 5725
            LTS : 'h:mm:ss A',                                                                                         // 5726
            L : 'DD/MM/YYYY',                                                                                          // 5727
            LL : 'D MMMM YYYY',                                                                                        // 5728
            LLL : 'D MMMM YYYY h:mm A',                                                                                // 5729
            LLLL : 'dddd, D MMMM YYYY h:mm A'                                                                          // 5730
        },                                                                                                             // 5731
        calendar : {                                                                                                   // 5732
            sameDay : '[Today at] LT',                                                                                 // 5733
            nextDay : '[Tomorrow at] LT',                                                                              // 5734
            nextWeek : 'dddd [at] LT',                                                                                 // 5735
            lastDay : '[Yesterday at] LT',                                                                             // 5736
            lastWeek : '[Last] dddd [at] LT',                                                                          // 5737
            sameElse : 'L'                                                                                             // 5738
        },                                                                                                             // 5739
        relativeTime : {                                                                                               // 5740
            future : 'in %s',                                                                                          // 5741
            past : '%s ago',                                                                                           // 5742
            s : 'a few seconds',                                                                                       // 5743
            m : 'a minute',                                                                                            // 5744
            mm : '%d minutes',                                                                                         // 5745
            h : 'an hour',                                                                                             // 5746
            hh : '%d hours',                                                                                           // 5747
            d : 'a day',                                                                                               // 5748
            dd : '%d days',                                                                                            // 5749
            M : 'a month',                                                                                             // 5750
            MM : '%d months',                                                                                          // 5751
            y : 'a year',                                                                                              // 5752
            yy : '%d years'                                                                                            // 5753
        },                                                                                                             // 5754
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,                                                                          // 5755
        ordinal : function (number) {                                                                                  // 5756
            var b = number % 10,                                                                                       // 5757
                output = (~~(number % 100 / 10) === 1) ? 'th' :                                                        // 5758
                (b === 1) ? 'st' :                                                                                     // 5759
                (b === 2) ? 'nd' :                                                                                     // 5760
                (b === 3) ? 'rd' : 'th';                                                                               // 5761
            return number + output;                                                                                    // 5762
        },                                                                                                             // 5763
        week : {                                                                                                       // 5764
            dow : 1, // Monday is the first day of the week.                                                           // 5765
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 5766
        }                                                                                                              // 5767
    });                                                                                                                // 5768
                                                                                                                       // 5769
    //! moment.js locale configuration                                                                                 // 5770
    //! locale : esperanto (eo)                                                                                        // 5771
    //! author : Colin Dean : https://github.com/colindean                                                             // 5772
    //! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.                                   // 5773
    //!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!                                           // 5774
                                                                                                                       // 5775
    var eo = moment__default.defineLocale('eo', {                                                                      // 5776
        months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),                                    // 5778
        weekdays : 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),                                    // 5779
        weekdaysShort : 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),                                                    // 5780
        weekdaysMin : 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),                                                               // 5781
        longDateFormat : {                                                                                             // 5782
            LT : 'HH:mm',                                                                                              // 5783
            LTS : 'HH:mm:ss',                                                                                          // 5784
            L : 'YYYY-MM-DD',                                                                                          // 5785
            LL : 'D[-an de] MMMM, YYYY',                                                                               // 5786
            LLL : 'D[-an de] MMMM, YYYY HH:mm',                                                                        // 5787
            LLLL : 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'                                                             // 5788
        },                                                                                                             // 5789
        meridiemParse: /[ap]\.t\.m/i,                                                                                  // 5790
        isPM: function (input) {                                                                                       // 5791
            return input.charAt(0).toLowerCase() === 'p';                                                              // 5792
        },                                                                                                             // 5793
        meridiem : function (hours, minutes, isLower) {                                                                // 5794
            if (hours > 11) {                                                                                          // 5795
                return isLower ? 'p.t.m.' : 'P.T.M.';                                                                  // 5796
            } else {                                                                                                   // 5797
                return isLower ? 'a.t.m.' : 'A.T.M.';                                                                  // 5798
            }                                                                                                          // 5799
        },                                                                                                             // 5800
        calendar : {                                                                                                   // 5801
            sameDay : '[Hodiaŭ je] LT',                                                                                // 5802
            nextDay : '[Morgaŭ je] LT',                                                                                // 5803
            nextWeek : 'dddd [je] LT',                                                                                 // 5804
            lastDay : '[Hieraŭ je] LT',                                                                                // 5805
            lastWeek : '[pasinta] dddd [je] LT',                                                                       // 5806
            sameElse : 'L'                                                                                             // 5807
        },                                                                                                             // 5808
        relativeTime : {                                                                                               // 5809
            future : 'je %s',                                                                                          // 5810
            past : 'antaŭ %s',                                                                                         // 5811
            s : 'sekundoj',                                                                                            // 5812
            m : 'minuto',                                                                                              // 5813
            mm : '%d minutoj',                                                                                         // 5814
            h : 'horo',                                                                                                // 5815
            hh : '%d horoj',                                                                                           // 5816
            d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo                                                   // 5817
            dd : '%d tagoj',                                                                                           // 5818
            M : 'monato',                                                                                              // 5819
            MM : '%d monatoj',                                                                                         // 5820
            y : 'jaro',                                                                                                // 5821
            yy : '%d jaroj'                                                                                            // 5822
        },                                                                                                             // 5823
        ordinalParse: /\d{1,2}a/,                                                                                      // 5824
        ordinal : '%da',                                                                                               // 5825
        week : {                                                                                                       // 5826
            dow : 1, // Monday is the first day of the week.                                                           // 5827
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 5828
        }                                                                                                              // 5829
    });                                                                                                                // 5830
                                                                                                                       // 5831
    //! moment.js locale configuration                                                                                 // 5832
    //! locale : spanish (es)                                                                                          // 5833
    //! author : Julio Napurí : https://github.com/julionc                                                             // 5834
                                                                                                                       // 5835
    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),                     // 5836
        es__monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');                                // 5837
                                                                                                                       // 5838
    var es = moment__default.defineLocale('es', {                                                                      // 5839
        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort : function (m, format) {                                                                           // 5841
            if (/-MMM-/.test(format)) {                                                                                // 5842
                return es__monthsShort[m.month()];                                                                     // 5843
            } else {                                                                                                   // 5844
                return monthsShortDot[m.month()];                                                                      // 5845
            }                                                                                                          // 5846
        },                                                                                                             // 5847
        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),                                  // 5848
        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),                                               // 5849
        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),                                                               // 5850
        longDateFormat : {                                                                                             // 5851
            LT : 'H:mm',                                                                                               // 5852
            LTS : 'H:mm:ss',                                                                                           // 5853
            L : 'DD/MM/YYYY',                                                                                          // 5854
            LL : 'D [de] MMMM [de] YYYY',                                                                              // 5855
            LLL : 'D [de] MMMM [de] YYYY H:mm',                                                                        // 5856
            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'                                                                  // 5857
        },                                                                                                             // 5858
        calendar : {                                                                                                   // 5859
            sameDay : function () {                                                                                    // 5860
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';                                       // 5861
            },                                                                                                         // 5862
            nextDay : function () {                                                                                    // 5863
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';                                    // 5864
            },                                                                                                         // 5865
            nextWeek : function () {                                                                                   // 5866
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';                                      // 5867
            },                                                                                                         // 5868
            lastDay : function () {                                                                                    // 5869
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';                                      // 5870
            },                                                                                                         // 5871
            lastWeek : function () {                                                                                   // 5872
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';                          // 5873
            },                                                                                                         // 5874
            sameElse : 'L'                                                                                             // 5875
        },                                                                                                             // 5876
        relativeTime : {                                                                                               // 5877
            future : 'en %s',                                                                                          // 5878
            past : 'hace %s',                                                                                          // 5879
            s : 'unos segundos',                                                                                       // 5880
            m : 'un minuto',                                                                                           // 5881
            mm : '%d minutos',                                                                                         // 5882
            h : 'una hora',                                                                                            // 5883
            hh : '%d horas',                                                                                           // 5884
            d : 'un día',                                                                                              // 5885
            dd : '%d días',                                                                                            // 5886
            M : 'un mes',                                                                                              // 5887
            MM : '%d meses',                                                                                           // 5888
            y : 'un año',                                                                                              // 5889
            yy : '%d años'                                                                                             // 5890
        },                                                                                                             // 5891
        ordinalParse : /\d{1,2}º/,                                                                                     // 5892
        ordinal : '%dº',                                                                                               // 5893
        week : {                                                                                                       // 5894
            dow : 1, // Monday is the first day of the week.                                                           // 5895
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 5896
        }                                                                                                              // 5897
    });                                                                                                                // 5898
                                                                                                                       // 5899
    //! moment.js locale configuration                                                                                 // 5900
    //! locale : estonian (et)                                                                                         // 5901
    //! author : Henry Kehlmann : https://github.com/madhenry                                                          // 5902
    //! improvements : Illimar Tambek : https://github.com/ragulka                                                     // 5903
                                                                                                                       // 5904
    function et__processRelativeTime(number, withoutSuffix, key, isFuture) {                                           // 5905
        var format = {                                                                                                 // 5906
            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],                                                    // 5907
            'm' : ['ühe minuti', 'üks minut'],                                                                         // 5908
            'mm': [number + ' minuti', number + ' minutit'],                                                           // 5909
            'h' : ['ühe tunni', 'tund aega', 'üks tund'],                                                              // 5910
            'hh': [number + ' tunni', number + ' tundi'],                                                              // 5911
            'd' : ['ühe päeva', 'üks päev'],                                                                           // 5912
            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],                                                                  // 5913
            'MM': [number + ' kuu', number + ' kuud'],                                                                 // 5914
            'y' : ['ühe aasta', 'aasta', 'üks aasta'],                                                                 // 5915
            'yy': [number + ' aasta', number + ' aastat']                                                              // 5916
        };                                                                                                             // 5917
        if (withoutSuffix) {                                                                                           // 5918
            return format[key][2] ? format[key][2] : format[key][1];                                                   // 5919
        }                                                                                                              // 5920
        return isFuture ? format[key][0] : format[key][1];                                                             // 5921
    }                                                                                                                  // 5922
                                                                                                                       // 5923
    var et = moment__default.defineLocale('et', {                                                                      // 5924
        months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
        monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),                       // 5926
        weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),                   // 5927
        weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),                                                                    // 5928
        weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),                                                                    // 5929
        longDateFormat : {                                                                                             // 5930
            LT   : 'H:mm',                                                                                             // 5931
            LTS : 'H:mm:ss',                                                                                           // 5932
            L    : 'DD.MM.YYYY',                                                                                       // 5933
            LL   : 'D. MMMM YYYY',                                                                                     // 5934
            LLL  : 'D. MMMM YYYY H:mm',                                                                                // 5935
            LLLL : 'dddd, D. MMMM YYYY H:mm'                                                                           // 5936
        },                                                                                                             // 5937
        calendar : {                                                                                                   // 5938
            sameDay  : '[Täna,] LT',                                                                                   // 5939
            nextDay  : '[Homme,] LT',                                                                                  // 5940
            nextWeek : '[Järgmine] dddd LT',                                                                           // 5941
            lastDay  : '[Eile,] LT',                                                                                   // 5942
            lastWeek : '[Eelmine] dddd LT',                                                                            // 5943
            sameElse : 'L'                                                                                             // 5944
        },                                                                                                             // 5945
        relativeTime : {                                                                                               // 5946
            future : '%s pärast',                                                                                      // 5947
            past   : '%s tagasi',                                                                                      // 5948
            s      : et__processRelativeTime,                                                                          // 5949
            m      : et__processRelativeTime,                                                                          // 5950
            mm     : et__processRelativeTime,                                                                          // 5951
            h      : et__processRelativeTime,                                                                          // 5952
            hh     : et__processRelativeTime,                                                                          // 5953
            d      : et__processRelativeTime,                                                                          // 5954
            dd     : '%d päeva',                                                                                       // 5955
            M      : et__processRelativeTime,                                                                          // 5956
            MM     : et__processRelativeTime,                                                                          // 5957
            y      : et__processRelativeTime,                                                                          // 5958
            yy     : et__processRelativeTime                                                                           // 5959
        },                                                                                                             // 5960
        ordinalParse: /\d{1,2}\./,                                                                                     // 5961
        ordinal : '%d.',                                                                                               // 5962
        week : {                                                                                                       // 5963
            dow : 1, // Monday is the first day of the week.                                                           // 5964
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 5965
        }                                                                                                              // 5966
    });                                                                                                                // 5967
                                                                                                                       // 5968
    //! moment.js locale configuration                                                                                 // 5969
    //! locale : euskara (eu)                                                                                          // 5970
    //! author : Eneko Illarramendi : https://github.com/eillarra                                                      // 5971
                                                                                                                       // 5972
    var eu = moment__default.defineLocale('eu', {                                                                      // 5973
        months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
        monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),                        // 5975
        weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),                   // 5976
        weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),                                                      // 5977
        weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),                                                               // 5978
        longDateFormat : {                                                                                             // 5979
            LT : 'HH:mm',                                                                                              // 5980
            LTS : 'HH:mm:ss',                                                                                          // 5981
            L : 'YYYY-MM-DD',                                                                                          // 5982
            LL : 'YYYY[ko] MMMM[ren] D[a]',                                                                            // 5983
            LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',                                                                     // 5984
            LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',                                                              // 5985
            l : 'YYYY-M-D',                                                                                            // 5986
            ll : 'YYYY[ko] MMM D[a]',                                                                                  // 5987
            lll : 'YYYY[ko] MMM D[a] HH:mm',                                                                           // 5988
            llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'                                                                      // 5989
        },                                                                                                             // 5990
        calendar : {                                                                                                   // 5991
            sameDay : '[gaur] LT[etan]',                                                                               // 5992
            nextDay : '[bihar] LT[etan]',                                                                              // 5993
            nextWeek : 'dddd LT[etan]',                                                                                // 5994
            lastDay : '[atzo] LT[etan]',                                                                               // 5995
            lastWeek : '[aurreko] dddd LT[etan]',                                                                      // 5996
            sameElse : 'L'                                                                                             // 5997
        },                                                                                                             // 5998
        relativeTime : {                                                                                               // 5999
            future : '%s barru',                                                                                       // 6000
            past : 'duela %s',                                                                                         // 6001
            s : 'segundo batzuk',                                                                                      // 6002
            m : 'minutu bat',                                                                                          // 6003
            mm : '%d minutu',                                                                                          // 6004
            h : 'ordu bat',                                                                                            // 6005
            hh : '%d ordu',                                                                                            // 6006
            d : 'egun bat',                                                                                            // 6007
            dd : '%d egun',                                                                                            // 6008
            M : 'hilabete bat',                                                                                        // 6009
            MM : '%d hilabete',                                                                                        // 6010
            y : 'urte bat',                                                                                            // 6011
            yy : '%d urte'                                                                                             // 6012
        },                                                                                                             // 6013
        ordinalParse: /\d{1,2}\./,                                                                                     // 6014
        ordinal : '%d.',                                                                                               // 6015
        week : {                                                                                                       // 6016
            dow : 1, // Monday is the first day of the week.                                                           // 6017
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 6018
        }                                                                                                              // 6019
    });                                                                                                                // 6020
                                                                                                                       // 6021
    //! moment.js locale configuration                                                                                 // 6022
    //! locale : Persian (fa)                                                                                          // 6023
    //! author : Ebrahim Byagowi : https://github.com/ebraminio                                                        // 6024
                                                                                                                       // 6025
    var fa__symbolMap = {                                                                                              // 6026
        '1': '۱',                                                                                                      // 6027
        '2': '۲',                                                                                                      // 6028
        '3': '۳',                                                                                                      // 6029
        '4': '۴',                                                                                                      // 6030
        '5': '۵',                                                                                                      // 6031
        '6': '۶',                                                                                                      // 6032
        '7': '۷',                                                                                                      // 6033
        '8': '۸',                                                                                                      // 6034
        '9': '۹',                                                                                                      // 6035
        '0': '۰'                                                                                                       // 6036
    }, fa__numberMap = {                                                                                               // 6037
        '۱': '1',                                                                                                      // 6038
        '۲': '2',                                                                                                      // 6039
        '۳': '3',                                                                                                      // 6040
        '۴': '4',                                                                                                      // 6041
        '۵': '5',                                                                                                      // 6042
        '۶': '6',                                                                                                      // 6043
        '۷': '7',                                                                                                      // 6044
        '۸': '8',                                                                                                      // 6045
        '۹': '9',                                                                                                      // 6046
        '۰': '0'                                                                                                       // 6047
    };                                                                                                                 // 6048
                                                                                                                       // 6049
    var fa = moment__default.defineLocale('fa', {                                                                      // 6050
        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),                   // 6051
        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),              // 6052
        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),                     // 6053
        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),                // 6054
        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),                                                                      // 6055
        longDateFormat : {                                                                                             // 6056
            LT : 'HH:mm',                                                                                              // 6057
            LTS : 'HH:mm:ss',                                                                                          // 6058
            L : 'DD/MM/YYYY',                                                                                          // 6059
            LL : 'D MMMM YYYY',                                                                                        // 6060
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 6061
            LLLL : 'dddd, D MMMM YYYY HH:mm'                                                                           // 6062
        },                                                                                                             // 6063
        meridiemParse: /قبل از ظهر|بعد از ظهر/,                                                                        // 6064
        isPM: function (input) {                                                                                       // 6065
            return /بعد از ظهر/.test(input);                                                                           // 6066
        },                                                                                                             // 6067
        meridiem : function (hour, minute, isLower) {                                                                  // 6068
            if (hour < 12) {                                                                                           // 6069
                return 'قبل از ظهر';                                                                                   // 6070
            } else {                                                                                                   // 6071
                return 'بعد از ظهر';                                                                                   // 6072
            }                                                                                                          // 6073
        },                                                                                                             // 6074
        calendar : {                                                                                                   // 6075
            sameDay : '[امروز ساعت] LT',                                                                               // 6076
            nextDay : '[فردا ساعت] LT',                                                                                // 6077
            nextWeek : 'dddd [ساعت] LT',                                                                               // 6078
            lastDay : '[دیروز ساعت] LT',                                                                               // 6079
            lastWeek : 'dddd [پیش] [ساعت] LT',                                                                         // 6080
            sameElse : 'L'                                                                                             // 6081
        },                                                                                                             // 6082
        relativeTime : {                                                                                               // 6083
            future : 'در %s',                                                                                          // 6084
            past : '%s پیش',                                                                                           // 6085
            s : 'چندین ثانیه',                                                                                         // 6086
            m : 'یک دقیقه',                                                                                            // 6087
            mm : '%d دقیقه',                                                                                           // 6088
            h : 'یک ساعت',                                                                                             // 6089
            hh : '%d ساعت',                                                                                            // 6090
            d : 'یک روز',                                                                                              // 6091
            dd : '%d روز',                                                                                             // 6092
            M : 'یک ماه',                                                                                              // 6093
            MM : '%d ماه',                                                                                             // 6094
            y : 'یک سال',                                                                                              // 6095
            yy : '%d سال'                                                                                              // 6096
        },                                                                                                             // 6097
        preparse: function (string) {                                                                                  // 6098
            return string.replace(/[۰-۹]/g, function (match) {                                                         // 6099
                return fa__numberMap[match];                                                                           // 6100
            }).replace(/،/g, ',');                                                                                     // 6101
        },                                                                                                             // 6102
        postformat: function (string) {                                                                                // 6103
            return string.replace(/\d/g, function (match) {                                                            // 6104
                return fa__symbolMap[match];                                                                           // 6105
            }).replace(/,/g, '،');                                                                                     // 6106
        },                                                                                                             // 6107
        ordinalParse: /\d{1,2}م/,                                                                                      // 6108
        ordinal : '%dم',                                                                                               // 6109
        week : {                                                                                                       // 6110
            dow : 6, // Saturday is the first day of the week.                                                         // 6111
            doy : 12 // The week that contains Jan 1st is the first week of the year.                                  // 6112
        }                                                                                                              // 6113
    });                                                                                                                // 6114
                                                                                                                       // 6115
    //! moment.js locale configuration                                                                                 // 6116
    //! locale : finnish (fi)                                                                                          // 6117
    //! author : Tarmo Aidantausta : https://github.com/bleadof                                                        // 6118
                                                                                                                       // 6119
    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),              // 6120
        numbersFuture = [                                                                                              // 6121
            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',                                        // 6122
            numbersPast[7], numbersPast[8], numbersPast[9]                                                             // 6123
        ];                                                                                                             // 6124
    function fi__translate(number, withoutSuffix, key, isFuture) {                                                     // 6125
        var result = '';                                                                                               // 6126
        switch (key) {                                                                                                 // 6127
        case 's':                                                                                                      // 6128
            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';                                                 // 6129
        case 'm':                                                                                                      // 6130
            return isFuture ? 'minuutin' : 'minuutti';                                                                 // 6131
        case 'mm':                                                                                                     // 6132
            result = isFuture ? 'minuutin' : 'minuuttia';                                                              // 6133
            break;                                                                                                     // 6134
        case 'h':                                                                                                      // 6135
            return isFuture ? 'tunnin' : 'tunti';                                                                      // 6136
        case 'hh':                                                                                                     // 6137
            result = isFuture ? 'tunnin' : 'tuntia';                                                                   // 6138
            break;                                                                                                     // 6139
        case 'd':                                                                                                      // 6140
            return isFuture ? 'päivän' : 'päivä';                                                                      // 6141
        case 'dd':                                                                                                     // 6142
            result = isFuture ? 'päivän' : 'päivää';                                                                   // 6143
            break;                                                                                                     // 6144
        case 'M':                                                                                                      // 6145
            return isFuture ? 'kuukauden' : 'kuukausi';                                                                // 6146
        case 'MM':                                                                                                     // 6147
            result = isFuture ? 'kuukauden' : 'kuukautta';                                                             // 6148
            break;                                                                                                     // 6149
        case 'y':                                                                                                      // 6150
            return isFuture ? 'vuoden' : 'vuosi';                                                                      // 6151
        case 'yy':                                                                                                     // 6152
            result = isFuture ? 'vuoden' : 'vuotta';                                                                   // 6153
            break;                                                                                                     // 6154
        }                                                                                                              // 6155
        result = verbalNumber(number, isFuture) + ' ' + result;                                                        // 6156
        return result;                                                                                                 // 6157
    }                                                                                                                  // 6158
    function verbalNumber(number, isFuture) {                                                                          // 6159
        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;                        // 6160
    }                                                                                                                  // 6161
                                                                                                                       // 6162
    var fi = moment__default.defineLocale('fi', {                                                                      // 6163
        months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
        monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),               // 6165
        weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),                    // 6166
        weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),                                                             // 6167
        weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),                                                               // 6168
        longDateFormat : {                                                                                             // 6169
            LT : 'HH.mm',                                                                                              // 6170
            LTS : 'HH.mm.ss',                                                                                          // 6171
            L : 'DD.MM.YYYY',                                                                                          // 6172
            LL : 'Do MMMM[ta] YYYY',                                                                                   // 6173
            LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',                                                                     // 6174
            LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',                                                              // 6175
            l : 'D.M.YYYY',                                                                                            // 6176
            ll : 'Do MMM YYYY',                                                                                        // 6177
            lll : 'Do MMM YYYY, [klo] HH.mm',                                                                          // 6178
            llll : 'ddd, Do MMM YYYY, [klo] HH.mm'                                                                     // 6179
        },                                                                                                             // 6180
        calendar : {                                                                                                   // 6181
            sameDay : '[tänään] [klo] LT',                                                                             // 6182
            nextDay : '[huomenna] [klo] LT',                                                                           // 6183
            nextWeek : 'dddd [klo] LT',                                                                                // 6184
            lastDay : '[eilen] [klo] LT',                                                                              // 6185
            lastWeek : '[viime] dddd[na] [klo] LT',                                                                    // 6186
            sameElse : 'L'                                                                                             // 6187
        },                                                                                                             // 6188
        relativeTime : {                                                                                               // 6189
            future : '%s päästä',                                                                                      // 6190
            past : '%s sitten',                                                                                        // 6191
            s : fi__translate,                                                                                         // 6192
            m : fi__translate,                                                                                         // 6193
            mm : fi__translate,                                                                                        // 6194
            h : fi__translate,                                                                                         // 6195
            hh : fi__translate,                                                                                        // 6196
            d : fi__translate,                                                                                         // 6197
            dd : fi__translate,                                                                                        // 6198
            M : fi__translate,                                                                                         // 6199
            MM : fi__translate,                                                                                        // 6200
            y : fi__translate,                                                                                         // 6201
            yy : fi__translate                                                                                         // 6202
        },                                                                                                             // 6203
        ordinalParse: /\d{1,2}\./,                                                                                     // 6204
        ordinal : '%d.',                                                                                               // 6205
        week : {                                                                                                       // 6206
            dow : 1, // Monday is the first day of the week.                                                           // 6207
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 6208
        }                                                                                                              // 6209
    });                                                                                                                // 6210
                                                                                                                       // 6211
    //! moment.js locale configuration                                                                                 // 6212
    //! locale : faroese (fo)                                                                                          // 6213
    //! author : Ragnar Johannesen : https://github.com/ragnar123                                                      // 6214
                                                                                                                       // 6215
    var fo = moment__default.defineLocale('fo', {                                                                      // 6216
        months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),      // 6217
        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),                                    // 6218
        weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),             // 6219
        weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),                                                      // 6220
        weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),                                                               // 6221
        longDateFormat : {                                                                                             // 6222
            LT : 'HH:mm',                                                                                              // 6223
            LTS : 'HH:mm:ss',                                                                                          // 6224
            L : 'DD/MM/YYYY',                                                                                          // 6225
            LL : 'D MMMM YYYY',                                                                                        // 6226
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 6227
            LLLL : 'dddd D. MMMM, YYYY HH:mm'                                                                          // 6228
        },                                                                                                             // 6229
        calendar : {                                                                                                   // 6230
            sameDay : '[Í dag kl.] LT',                                                                                // 6231
            nextDay : '[Í morgin kl.] LT',                                                                             // 6232
            nextWeek : 'dddd [kl.] LT',                                                                                // 6233
            lastDay : '[Í gjár kl.] LT',                                                                               // 6234
            lastWeek : '[síðstu] dddd [kl] LT',                                                                        // 6235
            sameElse : 'L'                                                                                             // 6236
        },                                                                                                             // 6237
        relativeTime : {                                                                                               // 6238
            future : 'um %s',                                                                                          // 6239
            past : '%s síðani',                                                                                        // 6240
            s : 'fá sekund',                                                                                           // 6241
            m : 'ein minutt',                                                                                          // 6242
            mm : '%d minuttir',                                                                                        // 6243
            h : 'ein tími',                                                                                            // 6244
            hh : '%d tímar',                                                                                           // 6245
            d : 'ein dagur',                                                                                           // 6246
            dd : '%d dagar',                                                                                           // 6247
            M : 'ein mánaði',                                                                                          // 6248
            MM : '%d mánaðir',                                                                                         // 6249
            y : 'eitt ár',                                                                                             // 6250
            yy : '%d ár'                                                                                               // 6251
        },                                                                                                             // 6252
        ordinalParse: /\d{1,2}\./,                                                                                     // 6253
        ordinal : '%d.',                                                                                               // 6254
        week : {                                                                                                       // 6255
            dow : 1, // Monday is the first day of the week.                                                           // 6256
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 6257
        }                                                                                                              // 6258
    });                                                                                                                // 6259
                                                                                                                       // 6260
    //! moment.js locale configuration                                                                                 // 6261
    //! locale : canadian french (fr-ca)                                                                               // 6262
    //! author : Jonathan Abourbih : https://github.com/jonbca                                                         // 6263
                                                                                                                       // 6264
    var fr_ca = moment__default.defineLocale('fr-ca', {                                                                // 6265
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),    // 6266
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),                     // 6267
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),                                   // 6268
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),                                               // 6269
        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),                                                               // 6270
        longDateFormat : {                                                                                             // 6271
            LT : 'HH:mm',                                                                                              // 6272
            LTS : 'HH:mm:ss',                                                                                          // 6273
            L : 'YYYY-MM-DD',                                                                                          // 6274
            LL : 'D MMMM YYYY',                                                                                        // 6275
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 6276
            LLLL : 'dddd D MMMM YYYY HH:mm'                                                                            // 6277
        },                                                                                                             // 6278
        calendar : {                                                                                                   // 6279
            sameDay: '[Aujourd\'hui à] LT',                                                                            // 6280
            nextDay: '[Demain à] LT',                                                                                  // 6281
            nextWeek: 'dddd [à] LT',                                                                                   // 6282
            lastDay: '[Hier à] LT',                                                                                    // 6283
            lastWeek: 'dddd [dernier à] LT',                                                                           // 6284
            sameElse: 'L'                                                                                              // 6285
        },                                                                                                             // 6286
        relativeTime : {                                                                                               // 6287
            future : 'dans %s',                                                                                        // 6288
            past : 'il y a %s',                                                                                        // 6289
            s : 'quelques secondes',                                                                                   // 6290
            m : 'une minute',                                                                                          // 6291
            mm : '%d minutes',                                                                                         // 6292
            h : 'une heure',                                                                                           // 6293
            hh : '%d heures',                                                                                          // 6294
            d : 'un jour',                                                                                             // 6295
            dd : '%d jours',                                                                                           // 6296
            M : 'un mois',                                                                                             // 6297
            MM : '%d mois',                                                                                            // 6298
            y : 'un an',                                                                                               // 6299
            yy : '%d ans'                                                                                              // 6300
        },                                                                                                             // 6301
        ordinalParse: /\d{1,2}(er|e)/,                                                                                 // 6302
        ordinal : function (number) {                                                                                  // 6303
            return number + (number === 1 ? 'er' : 'e');                                                               // 6304
        }                                                                                                              // 6305
    });                                                                                                                // 6306
                                                                                                                       // 6307
    //! moment.js locale configuration                                                                                 // 6308
    //! locale : swiss french (fr)                                                                                     // 6309
    //! author : Gaspard Bucher : https://github.com/gaspard                                                           // 6310
                                                                                                                       // 6311
    var fr_ch = moment__default.defineLocale('fr-ch', {                                                                // 6312
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),    // 6313
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),                     // 6314
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),                                   // 6315
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),                                               // 6316
        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),                                                               // 6317
        longDateFormat : {                                                                                             // 6318
            LT : 'HH:mm',                                                                                              // 6319
            LTS : 'HH:mm:ss',                                                                                          // 6320
            L : 'DD.MM.YYYY',                                                                                          // 6321
            LL : 'D MMMM YYYY',                                                                                        // 6322
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 6323
            LLLL : 'dddd D MMMM YYYY HH:mm'                                                                            // 6324
        },                                                                                                             // 6325
        calendar : {                                                                                                   // 6326
            sameDay: '[Aujourd\'hui à] LT',                                                                            // 6327
            nextDay: '[Demain à] LT',                                                                                  // 6328
            nextWeek: 'dddd [à] LT',                                                                                   // 6329
            lastDay: '[Hier à] LT',                                                                                    // 6330
            lastWeek: 'dddd [dernier à] LT',                                                                           // 6331
            sameElse: 'L'                                                                                              // 6332
        },                                                                                                             // 6333
        relativeTime : {                                                                                               // 6334
            future : 'dans %s',                                                                                        // 6335
            past : 'il y a %s',                                                                                        // 6336
            s : 'quelques secondes',                                                                                   // 6337
            m : 'une minute',                                                                                          // 6338
            mm : '%d minutes',                                                                                         // 6339
            h : 'une heure',                                                                                           // 6340
            hh : '%d heures',                                                                                          // 6341
            d : 'un jour',                                                                                             // 6342
            dd : '%d jours',                                                                                           // 6343
            M : 'un mois',                                                                                             // 6344
            MM : '%d mois',                                                                                            // 6345
            y : 'un an',                                                                                               // 6346
            yy : '%d ans'                                                                                              // 6347
        },                                                                                                             // 6348
        ordinalParse: /\d{1,2}(er|e)/,                                                                                 // 6349
        ordinal : function (number) {                                                                                  // 6350
            return number + (number === 1 ? 'er' : 'e');                                                               // 6351
        },                                                                                                             // 6352
        week : {                                                                                                       // 6353
            dow : 1, // Monday is the first day of the week.                                                           // 6354
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 6355
        }                                                                                                              // 6356
    });                                                                                                                // 6357
                                                                                                                       // 6358
    //! moment.js locale configuration                                                                                 // 6359
    //! locale : french (fr)                                                                                           // 6360
    //! author : John Fischer : https://github.com/jfroffice                                                           // 6361
                                                                                                                       // 6362
    var fr = moment__default.defineLocale('fr', {                                                                      // 6363
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),    // 6364
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),                     // 6365
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),                                   // 6366
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),                                               // 6367
        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),                                                               // 6368
        longDateFormat : {                                                                                             // 6369
            LT : 'HH:mm',                                                                                              // 6370
            LTS : 'HH:mm:ss',                                                                                          // 6371
            L : 'DD/MM/YYYY',                                                                                          // 6372
            LL : 'D MMMM YYYY',                                                                                        // 6373
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 6374
            LLLL : 'dddd D MMMM YYYY HH:mm'                                                                            // 6375
        },                                                                                                             // 6376
        calendar : {                                                                                                   // 6377
            sameDay: '[Aujourd\'hui à] LT',                                                                            // 6378
            nextDay: '[Demain à] LT',                                                                                  // 6379
            nextWeek: 'dddd [à] LT',                                                                                   // 6380
            lastDay: '[Hier à] LT',                                                                                    // 6381
            lastWeek: 'dddd [dernier à] LT',                                                                           // 6382
            sameElse: 'L'                                                                                              // 6383
        },                                                                                                             // 6384
        relativeTime : {                                                                                               // 6385
            future : 'dans %s',                                                                                        // 6386
            past : 'il y a %s',                                                                                        // 6387
            s : 'quelques secondes',                                                                                   // 6388
            m : 'une minute',                                                                                          // 6389
            mm : '%d minutes',                                                                                         // 6390
            h : 'une heure',                                                                                           // 6391
            hh : '%d heures',                                                                                          // 6392
            d : 'un jour',                                                                                             // 6393
            dd : '%d jours',                                                                                           // 6394
            M : 'un mois',                                                                                             // 6395
            MM : '%d mois',                                                                                            // 6396
            y : 'un an',                                                                                               // 6397
            yy : '%d ans'                                                                                              // 6398
        },                                                                                                             // 6399
        ordinalParse: /\d{1,2}(er|)/,                                                                                  // 6400
        ordinal : function (number) {                                                                                  // 6401
            return number + (number === 1 ? 'er' : '');                                                                // 6402
        },                                                                                                             // 6403
        week : {                                                                                                       // 6404
            dow : 1, // Monday is the first day of the week.                                                           // 6405
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 6406
        }                                                                                                              // 6407
    });                                                                                                                // 6408
                                                                                                                       // 6409
    //! moment.js locale configuration                                                                                 // 6410
    //! locale : frisian (fy)                                                                                          // 6411
    //! author : Robin van der Vliet : https://github.com/robin0van0der0v                                              // 6412
                                                                                                                       // 6413
    var fy__monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),             // 6414
        fy__monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');                     // 6415
                                                                                                                       // 6416
    var fy = moment__default.defineLocale('fy', {                                                                      // 6417
        months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
        monthsShort : function (m, format) {                                                                           // 6419
            if (/-MMM-/.test(format)) {                                                                                // 6420
                return fy__monthsShortWithoutDots[m.month()];                                                          // 6421
            } else {                                                                                                   // 6422
                return fy__monthsShortWithDots[m.month()];                                                             // 6423
            }                                                                                                          // 6424
        },                                                                                                             // 6425
        weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),                                 // 6426
        weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),                                                      // 6427
        weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),                                                               // 6428
        longDateFormat : {                                                                                             // 6429
            LT : 'HH:mm',                                                                                              // 6430
            LTS : 'HH:mm:ss',                                                                                          // 6431
            L : 'DD-MM-YYYY',                                                                                          // 6432
            LL : 'D MMMM YYYY',                                                                                        // 6433
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 6434
            LLLL : 'dddd D MMMM YYYY HH:mm'                                                                            // 6435
        },                                                                                                             // 6436
        calendar : {                                                                                                   // 6437
            sameDay: '[hjoed om] LT',                                                                                  // 6438
            nextDay: '[moarn om] LT',                                                                                  // 6439
            nextWeek: 'dddd [om] LT',                                                                                  // 6440
            lastDay: '[juster om] LT',                                                                                 // 6441
            lastWeek: '[ôfrûne] dddd [om] LT',                                                                         // 6442
            sameElse: 'L'                                                                                              // 6443
        },                                                                                                             // 6444
        relativeTime : {                                                                                               // 6445
            future : 'oer %s',                                                                                         // 6446
            past : '%s lyn',                                                                                           // 6447
            s : 'in pear sekonden',                                                                                    // 6448
            m : 'ien minút',                                                                                           // 6449
            mm : '%d minuten',                                                                                         // 6450
            h : 'ien oere',                                                                                            // 6451
            hh : '%d oeren',                                                                                           // 6452
            d : 'ien dei',                                                                                             // 6453
            dd : '%d dagen',                                                                                           // 6454
            M : 'ien moanne',                                                                                          // 6455
            MM : '%d moannen',                                                                                         // 6456
            y : 'ien jier',                                                                                            // 6457
            yy : '%d jierren'                                                                                          // 6458
        },                                                                                                             // 6459
        ordinalParse: /\d{1,2}(ste|de)/,                                                                               // 6460
        ordinal : function (number) {                                                                                  // 6461
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');                           // 6462
        },                                                                                                             // 6463
        week : {                                                                                                       // 6464
            dow : 1, // Monday is the first day of the week.                                                           // 6465
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 6466
        }                                                                                                              // 6467
    });                                                                                                                // 6468
                                                                                                                       // 6469
    //! moment.js locale configuration                                                                                 // 6470
    //! locale : great britain scottish gealic (gd)                                                                    // 6471
    //! author : Jon Ashdown : https://github.com/jonashdown                                                           // 6472
                                                                                                                       // 6473
    var gd__months = [                                                                                                 // 6474
        'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
    ];                                                                                                                 // 6476
                                                                                                                       // 6477
    var gd__monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];
                                                                                                                       // 6479
    var gd__weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];     // 6480
                                                                                                                       // 6481
    var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];                                             // 6482
                                                                                                                       // 6483
    var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];                                                      // 6484
                                                                                                                       // 6485
    var gd = moment__default.defineLocale('gd', {                                                                      // 6486
        months : gd__months,                                                                                           // 6487
        monthsShort : gd__monthsShort,                                                                                 // 6488
        monthsParseExact : true,                                                                                       // 6489
        weekdays : gd__weekdays,                                                                                       // 6490
        weekdaysShort : weekdaysShort,                                                                                 // 6491
        weekdaysMin : weekdaysMin,                                                                                     // 6492
        longDateFormat : {                                                                                             // 6493
            LT : 'HH:mm',                                                                                              // 6494
            LTS : 'HH:mm:ss',                                                                                          // 6495
            L : 'DD/MM/YYYY',                                                                                          // 6496
            LL : 'D MMMM YYYY',                                                                                        // 6497
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 6498
            LLLL : 'dddd, D MMMM YYYY HH:mm'                                                                           // 6499
        },                                                                                                             // 6500
        calendar : {                                                                                                   // 6501
            sameDay : '[An-diugh aig] LT',                                                                             // 6502
            nextDay : '[A-màireach aig] LT',                                                                           // 6503
            nextWeek : 'dddd [aig] LT',                                                                                // 6504
            lastDay : '[An-dè aig] LT',                                                                                // 6505
            lastWeek : 'dddd [seo chaidh] [aig] LT',                                                                   // 6506
            sameElse : 'L'                                                                                             // 6507
        },                                                                                                             // 6508
        relativeTime : {                                                                                               // 6509
            future : 'ann an %s',                                                                                      // 6510
            past : 'bho chionn %s',                                                                                    // 6511
            s : 'beagan diogan',                                                                                       // 6512
            m : 'mionaid',                                                                                             // 6513
            mm : '%d mionaidean',                                                                                      // 6514
            h : 'uair',                                                                                                // 6515
            hh : '%d uairean',                                                                                         // 6516
            d : 'latha',                                                                                               // 6517
            dd : '%d latha',                                                                                           // 6518
            M : 'mìos',                                                                                                // 6519
            MM : '%d mìosan',                                                                                          // 6520
            y : 'bliadhna',                                                                                            // 6521
            yy : '%d bliadhna'                                                                                         // 6522
        },                                                                                                             // 6523
        ordinalParse : /\d{1,2}(d|na|mh)/,                                                                             // 6524
        ordinal : function (number) {                                                                                  // 6525
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';                                         // 6526
            return number + output;                                                                                    // 6527
        },                                                                                                             // 6528
        week : {                                                                                                       // 6529
            dow : 1, // Monday is the first day of the week.                                                           // 6530
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 6531
        }                                                                                                              // 6532
    });                                                                                                                // 6533
                                                                                                                       // 6534
    //! moment.js locale configuration                                                                                 // 6535
    //! locale : galician (gl)                                                                                         // 6536
    //! author : Juan G. Hurtado : https://github.com/juanghurtado                                                     // 6537
                                                                                                                       // 6538
    var gl = moment__default.defineLocale('gl', {                                                                      // 6539
        months : 'Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split('_'),  // 6540
        monthsShort : 'Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.'.split('_'),                        // 6541
        weekdays : 'Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado'.split('_'),                                      // 6542
        weekdaysShort : 'Dom._Lun._Mar._Mér._Xov._Ven._Sáb.'.split('_'),                                               // 6543
        weekdaysMin : 'Do_Lu_Ma_Mé_Xo_Ve_Sá'.split('_'),                                                               // 6544
        longDateFormat : {                                                                                             // 6545
            LT : 'H:mm',                                                                                               // 6546
            LTS : 'H:mm:ss',                                                                                           // 6547
            L : 'DD/MM/YYYY',                                                                                          // 6548
            LL : 'D MMMM YYYY',                                                                                        // 6549
            LLL : 'D MMMM YYYY H:mm',                                                                                  // 6550
            LLLL : 'dddd D MMMM YYYY H:mm'                                                                             // 6551
        },                                                                                                             // 6552
        calendar : {                                                                                                   // 6553
            sameDay : function () {                                                                                    // 6554
                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';                                        // 6555
            },                                                                                                         // 6556
            nextDay : function () {                                                                                    // 6557
                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';                                        // 6558
            },                                                                                                         // 6559
            nextWeek : function () {                                                                                   // 6560
                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';                                        // 6561
            },                                                                                                         // 6562
            lastDay : function () {                                                                                    // 6563
                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';                                         // 6564
            },                                                                                                         // 6565
            lastWeek : function () {                                                                                   // 6566
                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';                             // 6567
            },                                                                                                         // 6568
            sameElse : 'L'                                                                                             // 6569
        },                                                                                                             // 6570
        relativeTime : {                                                                                               // 6571
            future : function (str) {                                                                                  // 6572
                if (str === 'uns segundos') {                                                                          // 6573
                    return 'nuns segundos';                                                                            // 6574
                }                                                                                                      // 6575
                return 'en ' + str;                                                                                    // 6576
            },                                                                                                         // 6577
            past : 'hai %s',                                                                                           // 6578
            s : 'uns segundos',                                                                                        // 6579
            m : 'un minuto',                                                                                           // 6580
            mm : '%d minutos',                                                                                         // 6581
            h : 'unha hora',                                                                                           // 6582
            hh : '%d horas',                                                                                           // 6583
            d : 'un día',                                                                                              // 6584
            dd : '%d días',                                                                                            // 6585
            M : 'un mes',                                                                                              // 6586
            MM : '%d meses',                                                                                           // 6587
            y : 'un ano',                                                                                              // 6588
            yy : '%d anos'                                                                                             // 6589
        },                                                                                                             // 6590
        ordinalParse : /\d{1,2}º/,                                                                                     // 6591
        ordinal : '%dº',                                                                                               // 6592
        week : {                                                                                                       // 6593
            dow : 1, // Monday is the first day of the week.                                                           // 6594
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 6595
        }                                                                                                              // 6596
    });                                                                                                                // 6597
                                                                                                                       // 6598
    //! moment.js locale configuration                                                                                 // 6599
    //! locale : Hebrew (he)                                                                                           // 6600
    //! author : Tomer Cohen : https://github.com/tomer                                                                // 6601
    //! author : Moshe Simantov : https://github.com/DevelopmentIL                                                     // 6602
    //! author : Tal Ater : https://github.com/TalAter                                                                 // 6603
                                                                                                                       // 6604
    var he = moment__default.defineLocale('he', {                                                                      // 6605
        months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),                 // 6606
        monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),                          // 6607
        weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),                                                  // 6608
        weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),                                                             // 6609
        weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),                                                                      // 6610
        longDateFormat : {                                                                                             // 6611
            LT : 'HH:mm',                                                                                              // 6612
            LTS : 'HH:mm:ss',                                                                                          // 6613
            L : 'DD/MM/YYYY',                                                                                          // 6614
            LL : 'D [ב]MMMM YYYY',                                                                                     // 6615
            LLL : 'D [ב]MMMM YYYY HH:mm',                                                                              // 6616
            LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',                                                                       // 6617
            l : 'D/M/YYYY',                                                                                            // 6618
            ll : 'D MMM YYYY',                                                                                         // 6619
            lll : 'D MMM YYYY HH:mm',                                                                                  // 6620
            llll : 'ddd, D MMM YYYY HH:mm'                                                                             // 6621
        },                                                                                                             // 6622
        calendar : {                                                                                                   // 6623
            sameDay : '[היום ב־]LT',                                                                                   // 6624
            nextDay : '[מחר ב־]LT',                                                                                    // 6625
            nextWeek : 'dddd [בשעה] LT',                                                                               // 6626
            lastDay : '[אתמול ב־]LT',                                                                                  // 6627
            lastWeek : '[ביום] dddd [האחרון בשעה] LT',                                                                 // 6628
            sameElse : 'L'                                                                                             // 6629
        },                                                                                                             // 6630
        relativeTime : {                                                                                               // 6631
            future : 'בעוד %s',                                                                                        // 6632
            past : 'לפני %s',                                                                                          // 6633
            s : 'מספר שניות',                                                                                          // 6634
            m : 'דקה',                                                                                                 // 6635
            mm : '%d דקות',                                                                                            // 6636
            h : 'שעה',                                                                                                 // 6637
            hh : function (number) {                                                                                   // 6638
                if (number === 2) {                                                                                    // 6639
                    return 'שעתיים';                                                                                   // 6640
                }                                                                                                      // 6641
                return number + ' שעות';                                                                               // 6642
            },                                                                                                         // 6643
            d : 'יום',                                                                                                 // 6644
            dd : function (number) {                                                                                   // 6645
                if (number === 2) {                                                                                    // 6646
                    return 'יומיים';                                                                                   // 6647
                }                                                                                                      // 6648
                return number + ' ימים';                                                                               // 6649
            },                                                                                                         // 6650
            M : 'חודש',                                                                                                // 6651
            MM : function (number) {                                                                                   // 6652
                if (number === 2) {                                                                                    // 6653
                    return 'חודשיים';                                                                                  // 6654
                }                                                                                                      // 6655
                return number + ' חודשים';                                                                             // 6656
            },                                                                                                         // 6657
            y : 'שנה',                                                                                                 // 6658
            yy : function (number) {                                                                                   // 6659
                if (number === 2) {                                                                                    // 6660
                    return 'שנתיים';                                                                                   // 6661
                } else if (number % 10 === 0 && number !== 10) {                                                       // 6662
                    return number + ' שנה';                                                                            // 6663
                }                                                                                                      // 6664
                return number + ' שנים';                                                                               // 6665
            }                                                                                                          // 6666
        },                                                                                                             // 6667
        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,                                // 6668
        isPM : function (input) {                                                                                      // 6669
            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);                                                          // 6670
        },                                                                                                             // 6671
        meridiem : function (hour, minute, isLower) {                                                                  // 6672
            if (hour < 5) {                                                                                            // 6673
                return 'לפנות בוקר';                                                                                   // 6674
            } else if (hour < 10) {                                                                                    // 6675
                return 'בבוקר';                                                                                        // 6676
            } else if (hour < 12) {                                                                                    // 6677
                return isLower ? 'לפנה"צ' : 'לפני הצהריים';                                                            // 6678
            } else if (hour < 18) {                                                                                    // 6679
                return isLower ? 'אחה"צ' : 'אחרי הצהריים';                                                             // 6680
            } else {                                                                                                   // 6681
                return 'בערב';                                                                                         // 6682
            }                                                                                                          // 6683
        }                                                                                                              // 6684
    });                                                                                                                // 6685
                                                                                                                       // 6686
    //! moment.js locale configuration                                                                                 // 6687
    //! locale : hindi (hi)                                                                                            // 6688
    //! author : Mayank Singhal : https://github.com/mayanksinghal                                                     // 6689
                                                                                                                       // 6690
    var hi__symbolMap = {                                                                                              // 6691
        '1': '१',                                                                                                      // 6692
        '2': '२',                                                                                                      // 6693
        '3': '३',                                                                                                      // 6694
        '4': '४',                                                                                                      // 6695
        '5': '५',                                                                                                      // 6696
        '6': '६',                                                                                                      // 6697
        '7': '७',                                                                                                      // 6698
        '8': '८',                                                                                                      // 6699
        '9': '९',                                                                                                      // 6700
        '0': '०'                                                                                                       // 6701
    },                                                                                                                 // 6702
    hi__numberMap = {                                                                                                  // 6703
        '१': '1',                                                                                                      // 6704
        '२': '2',                                                                                                      // 6705
        '३': '3',                                                                                                      // 6706
        '४': '4',                                                                                                      // 6707
        '५': '5',                                                                                                      // 6708
        '६': '6',                                                                                                      // 6709
        '७': '7',                                                                                                      // 6710
        '८': '8',                                                                                                      // 6711
        '९': '9',                                                                                                      // 6712
        '०': '0'                                                                                                       // 6713
    };                                                                                                                 // 6714
                                                                                                                       // 6715
    var hi = moment__default.defineLocale('hi', {                                                                      // 6716
        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),             // 6717
        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),                         // 6718
        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),                                  // 6719
        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),                                                  // 6720
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),                                                                 // 6721
        longDateFormat : {                                                                                             // 6722
            LT : 'A h:mm बजे',                                                                                         // 6723
            LTS : 'A h:mm:ss बजे',                                                                                     // 6724
            L : 'DD/MM/YYYY',                                                                                          // 6725
            LL : 'D MMMM YYYY',                                                                                        // 6726
            LLL : 'D MMMM YYYY, A h:mm बजे',                                                                           // 6727
            LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'                                                                     // 6728
        },                                                                                                             // 6729
        calendar : {                                                                                                   // 6730
            sameDay : '[आज] LT',                                                                                       // 6731
            nextDay : '[कल] LT',                                                                                       // 6732
            nextWeek : 'dddd, LT',                                                                                     // 6733
            lastDay : '[कल] LT',                                                                                       // 6734
            lastWeek : '[पिछले] dddd, LT',                                                                             // 6735
            sameElse : 'L'                                                                                             // 6736
        },                                                                                                             // 6737
        relativeTime : {                                                                                               // 6738
            future : '%s में',                                                                                         // 6739
            past : '%s पहले',                                                                                          // 6740
            s : 'कुछ ही क्षण',                                                                                         // 6741
            m : 'एक मिनट',                                                                                             // 6742
            mm : '%d मिनट',                                                                                            // 6743
            h : 'एक घंटा',                                                                                             // 6744
            hh : '%d घंटे',                                                                                            // 6745
            d : 'एक दिन',                                                                                              // 6746
            dd : '%d दिन',                                                                                             // 6747
            M : 'एक महीने',                                                                                            // 6748
            MM : '%d महीने',                                                                                           // 6749
            y : 'एक वर्ष',                                                                                             // 6750
            yy : '%d वर्ष'                                                                                             // 6751
        },                                                                                                             // 6752
        preparse: function (string) {                                                                                  // 6753
            return string.replace(/[१२३४५६७८९०]/g, function (match) {                                                  // 6754
                return hi__numberMap[match];                                                                           // 6755
            });                                                                                                        // 6756
        },                                                                                                             // 6757
        postformat: function (string) {                                                                                // 6758
            return string.replace(/\d/g, function (match) {                                                            // 6759
                return hi__symbolMap[match];                                                                           // 6760
            });                                                                                                        // 6761
        },                                                                                                             // 6762
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists                                // 6763
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.                                      // 6764
        meridiemParse: /रात|सुबह|दोपहर|शाम/,                                                                           // 6765
        meridiemHour : function (hour, meridiem) {                                                                     // 6766
            if (hour === 12) {                                                                                         // 6767
                hour = 0;                                                                                              // 6768
            }                                                                                                          // 6769
            if (meridiem === 'रात') {                                                                                  // 6770
                return hour < 4 ? hour : hour + 12;                                                                    // 6771
            } else if (meridiem === 'सुबह') {                                                                          // 6772
                return hour;                                                                                           // 6773
            } else if (meridiem === 'दोपहर') {                                                                         // 6774
                return hour >= 10 ? hour : hour + 12;                                                                  // 6775
            } else if (meridiem === 'शाम') {                                                                           // 6776
                return hour + 12;                                                                                      // 6777
            }                                                                                                          // 6778
        },                                                                                                             // 6779
        meridiem : function (hour, minute, isLower) {                                                                  // 6780
            if (hour < 4) {                                                                                            // 6781
                return 'रात';                                                                                          // 6782
            } else if (hour < 10) {                                                                                    // 6783
                return 'सुबह';                                                                                         // 6784
            } else if (hour < 17) {                                                                                    // 6785
                return 'दोपहर';                                                                                        // 6786
            } else if (hour < 20) {                                                                                    // 6787
                return 'शाम';                                                                                          // 6788
            } else {                                                                                                   // 6789
                return 'रात';                                                                                          // 6790
            }                                                                                                          // 6791
        },                                                                                                             // 6792
        week : {                                                                                                       // 6793
            dow : 0, // Sunday is the first day of the week.                                                           // 6794
            doy : 6  // The week that contains Jan 1st is the first week of the year.                                  // 6795
        }                                                                                                              // 6796
    });                                                                                                                // 6797
                                                                                                                       // 6798
    //! moment.js locale configuration                                                                                 // 6799
    //! locale : hrvatski (hr)                                                                                         // 6800
    //! author : Bojan Marković : https://github.com/bmarkovic                                                         // 6801
                                                                                                                       // 6802
    function hr__translate(number, withoutSuffix, key) {                                                               // 6803
        var result = number + ' ';                                                                                     // 6804
        switch (key) {                                                                                                 // 6805
        case 'm':                                                                                                      // 6806
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';                                                    // 6807
        case 'mm':                                                                                                     // 6808
            if (number === 1) {                                                                                        // 6809
                result += 'minuta';                                                                                    // 6810
            } else if (number === 2 || number === 3 || number === 4) {                                                 // 6811
                result += 'minute';                                                                                    // 6812
            } else {                                                                                                   // 6813
                result += 'minuta';                                                                                    // 6814
            }                                                                                                          // 6815
            return result;                                                                                             // 6816
        case 'h':                                                                                                      // 6817
            return withoutSuffix ? 'jedan sat' : 'jednog sata';                                                        // 6818
        case 'hh':                                                                                                     // 6819
            if (number === 1) {                                                                                        // 6820
                result += 'sat';                                                                                       // 6821
            } else if (number === 2 || number === 3 || number === 4) {                                                 // 6822
                result += 'sata';                                                                                      // 6823
            } else {                                                                                                   // 6824
                result += 'sati';                                                                                      // 6825
            }                                                                                                          // 6826
            return result;                                                                                             // 6827
        case 'dd':                                                                                                     // 6828
            if (number === 1) {                                                                                        // 6829
                result += 'dan';                                                                                       // 6830
            } else {                                                                                                   // 6831
                result += 'dana';                                                                                      // 6832
            }                                                                                                          // 6833
            return result;                                                                                             // 6834
        case 'MM':                                                                                                     // 6835
            if (number === 1) {                                                                                        // 6836
                result += 'mjesec';                                                                                    // 6837
            } else if (number === 2 || number === 3 || number === 4) {                                                 // 6838
                result += 'mjeseca';                                                                                   // 6839
            } else {                                                                                                   // 6840
                result += 'mjeseci';                                                                                   // 6841
            }                                                                                                          // 6842
            return result;                                                                                             // 6843
        case 'yy':                                                                                                     // 6844
            if (number === 1) {                                                                                        // 6845
                result += 'godina';                                                                                    // 6846
            } else if (number === 2 || number === 3 || number === 4) {                                                 // 6847
                result += 'godine';                                                                                    // 6848
            } else {                                                                                                   // 6849
                result += 'godina';                                                                                    // 6850
            }                                                                                                          // 6851
            return result;                                                                                             // 6852
        }                                                                                                              // 6853
    }                                                                                                                  // 6854
                                                                                                                       // 6855
    var hr = moment__default.defineLocale('hr', {                                                                      // 6856
        months : {                                                                                                     // 6857
            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
        },                                                                                                             // 6860
        monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),                       // 6861
        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),                             // 6862
        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),                                               // 6863
        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),                                                               // 6864
        longDateFormat : {                                                                                             // 6865
            LT : 'H:mm',                                                                                               // 6866
            LTS : 'H:mm:ss',                                                                                           // 6867
            L : 'DD. MM. YYYY',                                                                                        // 6868
            LL : 'D. MMMM YYYY',                                                                                       // 6869
            LLL : 'D. MMMM YYYY H:mm',                                                                                 // 6870
            LLLL : 'dddd, D. MMMM YYYY H:mm'                                                                           // 6871
        },                                                                                                             // 6872
        calendar : {                                                                                                   // 6873
            sameDay  : '[danas u] LT',                                                                                 // 6874
            nextDay  : '[sutra u] LT',                                                                                 // 6875
            nextWeek : function () {                                                                                   // 6876
                switch (this.day()) {                                                                                  // 6877
                case 0:                                                                                                // 6878
                    return '[u] [nedjelju] [u] LT';                                                                    // 6879
                case 3:                                                                                                // 6880
                    return '[u] [srijedu] [u] LT';                                                                     // 6881
                case 6:                                                                                                // 6882
                    return '[u] [subotu] [u] LT';                                                                      // 6883
                case 1:                                                                                                // 6884
                case 2:                                                                                                // 6885
                case 4:                                                                                                // 6886
                case 5:                                                                                                // 6887
                    return '[u] dddd [u] LT';                                                                          // 6888
                }                                                                                                      // 6889
            },                                                                                                         // 6890
            lastDay  : '[jučer u] LT',                                                                                 // 6891
            lastWeek : function () {                                                                                   // 6892
                switch (this.day()) {                                                                                  // 6893
                case 0:                                                                                                // 6894
                case 3:                                                                                                // 6895
                    return '[prošlu] dddd [u] LT';                                                                     // 6896
                case 6:                                                                                                // 6897
                    return '[prošle] [subote] [u] LT';                                                                 // 6898
                case 1:                                                                                                // 6899
                case 2:                                                                                                // 6900
                case 4:                                                                                                // 6901
                case 5:                                                                                                // 6902
                    return '[prošli] dddd [u] LT';                                                                     // 6903
                }                                                                                                      // 6904
            },                                                                                                         // 6905
            sameElse : 'L'                                                                                             // 6906
        },                                                                                                             // 6907
        relativeTime : {                                                                                               // 6908
            future : 'za %s',                                                                                          // 6909
            past   : 'prije %s',                                                                                       // 6910
            s      : 'par sekundi',                                                                                    // 6911
            m      : hr__translate,                                                                                    // 6912
            mm     : hr__translate,                                                                                    // 6913
            h      : hr__translate,                                                                                    // 6914
            hh     : hr__translate,                                                                                    // 6915
            d      : 'dan',                                                                                            // 6916
            dd     : hr__translate,                                                                                    // 6917
            M      : 'mjesec',                                                                                         // 6918
            MM     : hr__translate,                                                                                    // 6919
            y      : 'godinu',                                                                                         // 6920
            yy     : hr__translate                                                                                     // 6921
        },                                                                                                             // 6922
        ordinalParse: /\d{1,2}\./,                                                                                     // 6923
        ordinal : '%d.',                                                                                               // 6924
        week : {                                                                                                       // 6925
            dow : 1, // Monday is the first day of the week.                                                           // 6926
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 6927
        }                                                                                                              // 6928
    });                                                                                                                // 6929
                                                                                                                       // 6930
    //! moment.js locale configuration                                                                                 // 6931
    //! locale : hungarian (hu)                                                                                        // 6932
    //! author : Adam Brunner : https://github.com/adambrunner                                                         // 6933
                                                                                                                       // 6934
    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');                      // 6935
    function hu__translate(number, withoutSuffix, key, isFuture) {                                                     // 6936
        var num = number,                                                                                              // 6937
            suffix;                                                                                                    // 6938
        switch (key) {                                                                                                 // 6939
        case 's':                                                                                                      // 6940
            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';                             // 6941
        case 'm':                                                                                                      // 6942
            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');                                           // 6943
        case 'mm':                                                                                                     // 6944
            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');                                             // 6945
        case 'h':                                                                                                      // 6946
            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');                                            // 6947
        case 'hh':                                                                                                     // 6948
            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');                                              // 6949
        case 'd':                                                                                                      // 6950
            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');                                            // 6951
        case 'dd':                                                                                                     // 6952
            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');                                              // 6953
        case 'M':                                                                                                      // 6954
            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');                                        // 6955
        case 'MM':                                                                                                     // 6956
            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');                                          // 6957
        case 'y':                                                                                                      // 6958
            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');                                               // 6959
        case 'yy':                                                                                                     // 6960
            return num + (isFuture || withoutSuffix ? ' év' : ' éve');                                                 // 6961
        }                                                                                                              // 6962
        return '';                                                                                                     // 6963
    }                                                                                                                  // 6964
    function week(isFuture) {                                                                                          // 6965
        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';                             // 6966
    }                                                                                                                  // 6967
                                                                                                                       // 6968
    var hu = moment__default.defineLocale('hu', {                                                                      // 6969
        months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
        monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),                                 // 6971
        weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),                                   // 6972
        weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),                                                    // 6973
        weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),                                                                 // 6974
        longDateFormat : {                                                                                             // 6975
            LT : 'H:mm',                                                                                               // 6976
            LTS : 'H:mm:ss',                                                                                           // 6977
            L : 'YYYY.MM.DD.',                                                                                         // 6978
            LL : 'YYYY. MMMM D.',                                                                                      // 6979
            LLL : 'YYYY. MMMM D. H:mm',                                                                                // 6980
            LLLL : 'YYYY. MMMM D., dddd H:mm'                                                                          // 6981
        },                                                                                                             // 6982
        meridiemParse: /de|du/i,                                                                                       // 6983
        isPM: function (input) {                                                                                       // 6984
            return input.charAt(1).toLowerCase() === 'u';                                                              // 6985
        },                                                                                                             // 6986
        meridiem : function (hours, minutes, isLower) {                                                                // 6987
            if (hours < 12) {                                                                                          // 6988
                return isLower === true ? 'de' : 'DE';                                                                 // 6989
            } else {                                                                                                   // 6990
                return isLower === true ? 'du' : 'DU';                                                                 // 6991
            }                                                                                                          // 6992
        },                                                                                                             // 6993
        calendar : {                                                                                                   // 6994
            sameDay : '[ma] LT[-kor]',                                                                                 // 6995
            nextDay : '[holnap] LT[-kor]',                                                                             // 6996
            nextWeek : function () {                                                                                   // 6997
                return week.call(this, true);                                                                          // 6998
            },                                                                                                         // 6999
            lastDay : '[tegnap] LT[-kor]',                                                                             // 7000
            lastWeek : function () {                                                                                   // 7001
                return week.call(this, false);                                                                         // 7002
            },                                                                                                         // 7003
            sameElse : 'L'                                                                                             // 7004
        },                                                                                                             // 7005
        relativeTime : {                                                                                               // 7006
            future : '%s múlva',                                                                                       // 7007
            past : '%s',                                                                                               // 7008
            s : hu__translate,                                                                                         // 7009
            m : hu__translate,                                                                                         // 7010
            mm : hu__translate,                                                                                        // 7011
            h : hu__translate,                                                                                         // 7012
            hh : hu__translate,                                                                                        // 7013
            d : hu__translate,                                                                                         // 7014
            dd : hu__translate,                                                                                        // 7015
            M : hu__translate,                                                                                         // 7016
            MM : hu__translate,                                                                                        // 7017
            y : hu__translate,                                                                                         // 7018
            yy : hu__translate                                                                                         // 7019
        },                                                                                                             // 7020
        ordinalParse: /\d{1,2}\./,                                                                                     // 7021
        ordinal : '%d.',                                                                                               // 7022
        week : {                                                                                                       // 7023
            dow : 1, // Monday is the first day of the week.                                                           // 7024
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 7025
        }                                                                                                              // 7026
    });                                                                                                                // 7027
                                                                                                                       // 7028
    //! moment.js locale configuration                                                                                 // 7029
    //! locale : Armenian (hy-am)                                                                                      // 7030
    //! author : Armendarabyan : https://github.com/armendarabyan                                                      // 7031
                                                                                                                       // 7032
    var hy_am = moment__default.defineLocale('hy-am', {                                                                // 7033
        months : {                                                                                                     // 7034
            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
        },                                                                                                             // 7037
        monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),                                    // 7038
        weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),                         // 7039
        weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),                                                     // 7040
        weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),                                                       // 7041
        longDateFormat : {                                                                                             // 7042
            LT : 'HH:mm',                                                                                              // 7043
            LTS : 'HH:mm:ss',                                                                                          // 7044
            L : 'DD.MM.YYYY',                                                                                          // 7045
            LL : 'D MMMM YYYY թ.',                                                                                     // 7046
            LLL : 'D MMMM YYYY թ., HH:mm',                                                                             // 7047
            LLLL : 'dddd, D MMMM YYYY թ., HH:mm'                                                                       // 7048
        },                                                                                                             // 7049
        calendar : {                                                                                                   // 7050
            sameDay: '[այսօր] LT',                                                                                     // 7051
            nextDay: '[վաղը] LT',                                                                                      // 7052
            lastDay: '[երեկ] LT',                                                                                      // 7053
            nextWeek: function () {                                                                                    // 7054
                return 'dddd [օրը ժամը] LT';                                                                           // 7055
            },                                                                                                         // 7056
            lastWeek: function () {                                                                                    // 7057
                return '[անցած] dddd [օրը ժամը] LT';                                                                   // 7058
            },                                                                                                         // 7059
            sameElse: 'L'                                                                                              // 7060
        },                                                                                                             // 7061
        relativeTime : {                                                                                               // 7062
            future : '%s հետո',                                                                                        // 7063
            past : '%s առաջ',                                                                                          // 7064
            s : 'մի քանի վայրկյան',                                                                                    // 7065
            m : 'րոպե',                                                                                                // 7066
            mm : '%d րոպե',                                                                                            // 7067
            h : 'ժամ',                                                                                                 // 7068
            hh : '%d ժամ',                                                                                             // 7069
            d : 'օր',                                                                                                  // 7070
            dd : '%d օր',                                                                                              // 7071
            M : 'ամիս',                                                                                                // 7072
            MM : '%d ամիս',                                                                                            // 7073
            y : 'տարի',                                                                                                // 7074
            yy : '%d տարի'                                                                                             // 7075
        },                                                                                                             // 7076
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,                                                            // 7077
        isPM: function (input) {                                                                                       // 7078
            return /^(ցերեկվա|երեկոյան)$/.test(input);                                                                 // 7079
        },                                                                                                             // 7080
        meridiem : function (hour) {                                                                                   // 7081
            if (hour < 4) {                                                                                            // 7082
                return 'գիշերվա';                                                                                      // 7083
            } else if (hour < 12) {                                                                                    // 7084
                return 'առավոտվա';                                                                                     // 7085
            } else if (hour < 17) {                                                                                    // 7086
                return 'ցերեկվա';                                                                                      // 7087
            } else {                                                                                                   // 7088
                return 'երեկոյան';                                                                                     // 7089
            }                                                                                                          // 7090
        },                                                                                                             // 7091
        ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,                                                                       // 7092
        ordinal: function (number, period) {                                                                           // 7093
            switch (period) {                                                                                          // 7094
            case 'DDD':                                                                                                // 7095
            case 'w':                                                                                                  // 7096
            case 'W':                                                                                                  // 7097
            case 'DDDo':                                                                                               // 7098
                if (number === 1) {                                                                                    // 7099
                    return number + '-ին';                                                                             // 7100
                }                                                                                                      // 7101
                return number + '-րդ';                                                                                 // 7102
            default:                                                                                                   // 7103
                return number;                                                                                         // 7104
            }                                                                                                          // 7105
        },                                                                                                             // 7106
        week : {                                                                                                       // 7107
            dow : 1, // Monday is the first day of the week.                                                           // 7108
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 7109
        }                                                                                                              // 7110
    });                                                                                                                // 7111
                                                                                                                       // 7112
    //! moment.js locale configuration                                                                                 // 7113
    //! locale : Bahasa Indonesia (id)                                                                                 // 7114
    //! author : Mohammad Satrio Utomo : https://github.com/tyok                                                       // 7115
    //! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan                // 7116
                                                                                                                       // 7117
    var id = moment__default.defineLocale('id', {                                                                      // 7118
        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),  // 7119
        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),                                    // 7120
        weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),                                            // 7121
        weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),                                                      // 7122
        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),                                                               // 7123
        longDateFormat : {                                                                                             // 7124
            LT : 'HH.mm',                                                                                              // 7125
            LTS : 'HH.mm.ss',                                                                                          // 7126
            L : 'DD/MM/YYYY',                                                                                          // 7127
            LL : 'D MMMM YYYY',                                                                                        // 7128
            LLL : 'D MMMM YYYY [pukul] HH.mm',                                                                         // 7129
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'                                                                   // 7130
        },                                                                                                             // 7131
        meridiemParse: /pagi|siang|sore|malam/,                                                                        // 7132
        meridiemHour : function (hour, meridiem) {                                                                     // 7133
            if (hour === 12) {                                                                                         // 7134
                hour = 0;                                                                                              // 7135
            }                                                                                                          // 7136
            if (meridiem === 'pagi') {                                                                                 // 7137
                return hour;                                                                                           // 7138
            } else if (meridiem === 'siang') {                                                                         // 7139
                return hour >= 11 ? hour : hour + 12;                                                                  // 7140
            } else if (meridiem === 'sore' || meridiem === 'malam') {                                                  // 7141
                return hour + 12;                                                                                      // 7142
            }                                                                                                          // 7143
        },                                                                                                             // 7144
        meridiem : function (hours, minutes, isLower) {                                                                // 7145
            if (hours < 11) {                                                                                          // 7146
                return 'pagi';                                                                                         // 7147
            } else if (hours < 15) {                                                                                   // 7148
                return 'siang';                                                                                        // 7149
            } else if (hours < 19) {                                                                                   // 7150
                return 'sore';                                                                                         // 7151
            } else {                                                                                                   // 7152
                return 'malam';                                                                                        // 7153
            }                                                                                                          // 7154
        },                                                                                                             // 7155
        calendar : {                                                                                                   // 7156
            sameDay : '[Hari ini pukul] LT',                                                                           // 7157
            nextDay : '[Besok pukul] LT',                                                                              // 7158
            nextWeek : 'dddd [pukul] LT',                                                                              // 7159
            lastDay : '[Kemarin pukul] LT',                                                                            // 7160
            lastWeek : 'dddd [lalu pukul] LT',                                                                         // 7161
            sameElse : 'L'                                                                                             // 7162
        },                                                                                                             // 7163
        relativeTime : {                                                                                               // 7164
            future : 'dalam %s',                                                                                       // 7165
            past : '%s yang lalu',                                                                                     // 7166
            s : 'beberapa detik',                                                                                      // 7167
            m : 'semenit',                                                                                             // 7168
            mm : '%d menit',                                                                                           // 7169
            h : 'sejam',                                                                                               // 7170
            hh : '%d jam',                                                                                             // 7171
            d : 'sehari',                                                                                              // 7172
            dd : '%d hari',                                                                                            // 7173
            M : 'sebulan',                                                                                             // 7174
            MM : '%d bulan',                                                                                           // 7175
            y : 'setahun',                                                                                             // 7176
            yy : '%d tahun'                                                                                            // 7177
        },                                                                                                             // 7178
        week : {                                                                                                       // 7179
            dow : 1, // Monday is the first day of the week.                                                           // 7180
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 7181
        }                                                                                                              // 7182
    });                                                                                                                // 7183
                                                                                                                       // 7184
    //! moment.js locale configuration                                                                                 // 7185
    //! locale : icelandic (is)                                                                                        // 7186
    //! author : Hinrik Örn Sigurðsson : https://github.com/hinrik                                                     // 7187
                                                                                                                       // 7188
    function is__plural(n) {                                                                                           // 7189
        if (n % 100 === 11) {                                                                                          // 7190
            return true;                                                                                               // 7191
        } else if (n % 10 === 1) {                                                                                     // 7192
            return false;                                                                                              // 7193
        }                                                                                                              // 7194
        return true;                                                                                                   // 7195
    }                                                                                                                  // 7196
    function is__translate(number, withoutSuffix, key, isFuture) {                                                     // 7197
        var result = number + ' ';                                                                                     // 7198
        switch (key) {                                                                                                 // 7199
        case 's':                                                                                                      // 7200
            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';                                // 7201
        case 'm':                                                                                                      // 7202
            return withoutSuffix ? 'mínúta' : 'mínútu';                                                                // 7203
        case 'mm':                                                                                                     // 7204
            if (is__plural(number)) {                                                                                  // 7205
                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');                                   // 7206
            } else if (withoutSuffix) {                                                                                // 7207
                return result + 'mínúta';                                                                              // 7208
            }                                                                                                          // 7209
            return result + 'mínútu';                                                                                  // 7210
        case 'hh':                                                                                                     // 7211
            if (is__plural(number)) {                                                                                  // 7212
                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');                       // 7213
            }                                                                                                          // 7214
            return result + 'klukkustund';                                                                             // 7215
        case 'd':                                                                                                      // 7216
            if (withoutSuffix) {                                                                                       // 7217
                return 'dagur';                                                                                        // 7218
            }                                                                                                          // 7219
            return isFuture ? 'dag' : 'degi';                                                                          // 7220
        case 'dd':                                                                                                     // 7221
            if (is__plural(number)) {                                                                                  // 7222
                if (withoutSuffix) {                                                                                   // 7223
                    return result + 'dagar';                                                                           // 7224
                }                                                                                                      // 7225
                return result + (isFuture ? 'daga' : 'dögum');                                                         // 7226
            } else if (withoutSuffix) {                                                                                // 7227
                return result + 'dagur';                                                                               // 7228
            }                                                                                                          // 7229
            return result + (isFuture ? 'dag' : 'degi');                                                               // 7230
        case 'M':                                                                                                      // 7231
            if (withoutSuffix) {                                                                                       // 7232
                return 'mánuður';                                                                                      // 7233
            }                                                                                                          // 7234
            return isFuture ? 'mánuð' : 'mánuði';                                                                      // 7235
        case 'MM':                                                                                                     // 7236
            if (is__plural(number)) {                                                                                  // 7237
                if (withoutSuffix) {                                                                                   // 7238
                    return result + 'mánuðir';                                                                         // 7239
                }                                                                                                      // 7240
                return result + (isFuture ? 'mánuði' : 'mánuðum');                                                     // 7241
            } else if (withoutSuffix) {                                                                                // 7242
                return result + 'mánuður';                                                                             // 7243
            }                                                                                                          // 7244
            return result + (isFuture ? 'mánuð' : 'mánuði');                                                           // 7245
        case 'y':                                                                                                      // 7246
            return withoutSuffix || isFuture ? 'ár' : 'ári';                                                           // 7247
        case 'yy':                                                                                                     // 7248
            if (is__plural(number)) {                                                                                  // 7249
                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');                                           // 7250
            }                                                                                                          // 7251
            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');                                                // 7252
        }                                                                                                              // 7253
    }                                                                                                                  // 7254
                                                                                                                       // 7255
    var is = moment__default.defineLocale('is', {                                                                      // 7256
        months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),       // 7257
        monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),                                    // 7258
        weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),      // 7259
        weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),                                                      // 7260
        weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),                                                               // 7261
        longDateFormat : {                                                                                             // 7262
            LT : 'H:mm',                                                                                               // 7263
            LTS : 'H:mm:ss',                                                                                           // 7264
            L : 'DD.MM.YYYY',                                                                                          // 7265
            LL : 'D. MMMM YYYY',                                                                                       // 7266
            LLL : 'D. MMMM YYYY [kl.] H:mm',                                                                           // 7267
            LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'                                                                     // 7268
        },                                                                                                             // 7269
        calendar : {                                                                                                   // 7270
            sameDay : '[í dag kl.] LT',                                                                                // 7271
            nextDay : '[á morgun kl.] LT',                                                                             // 7272
            nextWeek : 'dddd [kl.] LT',                                                                                // 7273
            lastDay : '[í gær kl.] LT',                                                                                // 7274
            lastWeek : '[síðasta] dddd [kl.] LT',                                                                      // 7275
            sameElse : 'L'                                                                                             // 7276
        },                                                                                                             // 7277
        relativeTime : {                                                                                               // 7278
            future : 'eftir %s',                                                                                       // 7279
            past : 'fyrir %s síðan',                                                                                   // 7280
            s : is__translate,                                                                                         // 7281
            m : is__translate,                                                                                         // 7282
            mm : is__translate,                                                                                        // 7283
            h : 'klukkustund',                                                                                         // 7284
            hh : is__translate,                                                                                        // 7285
            d : is__translate,                                                                                         // 7286
            dd : is__translate,                                                                                        // 7287
            M : is__translate,                                                                                         // 7288
            MM : is__translate,                                                                                        // 7289
            y : is__translate,                                                                                         // 7290
            yy : is__translate                                                                                         // 7291
        },                                                                                                             // 7292
        ordinalParse: /\d{1,2}\./,                                                                                     // 7293
        ordinal : '%d.',                                                                                               // 7294
        week : {                                                                                                       // 7295
            dow : 1, // Monday is the first day of the week.                                                           // 7296
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 7297
        }                                                                                                              // 7298
    });                                                                                                                // 7299
                                                                                                                       // 7300
    //! moment.js locale configuration                                                                                 // 7301
    //! locale : italian (it)                                                                                          // 7302
    //! author : Lorenzo : https://github.com/aliem                                                                    // 7303
    //! author: Mattia Larentis: https://github.com/nostalgiaz                                                         // 7304
                                                                                                                       // 7305
    var it = moment__default.defineLocale('it', {                                                                      // 7306
        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),                                    // 7308
        weekdays : 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),                              // 7309
        weekdaysShort : 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),                                                      // 7310
        weekdaysMin : 'Do_Lu_Ma_Me_Gi_Ve_Sa'.split('_'),                                                               // 7311
        longDateFormat : {                                                                                             // 7312
            LT : 'HH:mm',                                                                                              // 7313
            LTS : 'HH:mm:ss',                                                                                          // 7314
            L : 'DD/MM/YYYY',                                                                                          // 7315
            LL : 'D MMMM YYYY',                                                                                        // 7316
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 7317
            LLLL : 'dddd, D MMMM YYYY HH:mm'                                                                           // 7318
        },                                                                                                             // 7319
        calendar : {                                                                                                   // 7320
            sameDay: '[Oggi alle] LT',                                                                                 // 7321
            nextDay: '[Domani alle] LT',                                                                               // 7322
            nextWeek: 'dddd [alle] LT',                                                                                // 7323
            lastDay: '[Ieri alle] LT',                                                                                 // 7324
            lastWeek: function () {                                                                                    // 7325
                switch (this.day()) {                                                                                  // 7326
                    case 0:                                                                                            // 7327
                        return '[la scorsa] dddd [alle] LT';                                                           // 7328
                    default:                                                                                           // 7329
                        return '[lo scorso] dddd [alle] LT';                                                           // 7330
                }                                                                                                      // 7331
            },                                                                                                         // 7332
            sameElse: 'L'                                                                                              // 7333
        },                                                                                                             // 7334
        relativeTime : {                                                                                               // 7335
            future : function (s) {                                                                                    // 7336
                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;                                               // 7337
            },                                                                                                         // 7338
            past : '%s fa',                                                                                            // 7339
            s : 'alcuni secondi',                                                                                      // 7340
            m : 'un minuto',                                                                                           // 7341
            mm : '%d minuti',                                                                                          // 7342
            h : 'un\'ora',                                                                                             // 7343
            hh : '%d ore',                                                                                             // 7344
            d : 'un giorno',                                                                                           // 7345
            dd : '%d giorni',                                                                                          // 7346
            M : 'un mese',                                                                                             // 7347
            MM : '%d mesi',                                                                                            // 7348
            y : 'un anno',                                                                                             // 7349
            yy : '%d anni'                                                                                             // 7350
        },                                                                                                             // 7351
        ordinalParse : /\d{1,2}º/,                                                                                     // 7352
        ordinal: '%dº',                                                                                                // 7353
        week : {                                                                                                       // 7354
            dow : 1, // Monday is the first day of the week.                                                           // 7355
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 7356
        }                                                                                                              // 7357
    });                                                                                                                // 7358
                                                                                                                       // 7359
    //! moment.js locale configuration                                                                                 // 7360
    //! locale : japanese (ja)                                                                                         // 7361
    //! author : LI Long : https://github.com/baryon                                                                   // 7362
                                                                                                                       // 7363
    var ja = moment__default.defineLocale('ja', {                                                                      // 7364
        months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),                                                  // 7365
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),                                             // 7366
        weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),                                                           // 7367
        weekdaysShort : '日_月_火_水_木_金_土'.split('_'),                                                                    // 7368
        weekdaysMin : '日_月_火_水_木_金_土'.split('_'),                                                                      // 7369
        longDateFormat : {                                                                                             // 7370
            LT : 'Ah時m分',                                                                                              // 7371
            LTS : 'Ah時m分s秒',                                                                                           // 7372
            L : 'YYYY/MM/DD',                                                                                          // 7373
            LL : 'YYYY年M月D日',                                                                                          // 7374
            LLL : 'YYYY年M月D日Ah時m分',                                                                                    // 7375
            LLLL : 'YYYY年M月D日Ah時m分 dddd'                                                                               // 7376
        },                                                                                                             // 7377
        meridiemParse: /午前|午後/i,                                                                                       // 7378
        isPM : function (input) {                                                                                      // 7379
            return input === '午後';                                                                                     // 7380
        },                                                                                                             // 7381
        meridiem : function (hour, minute, isLower) {                                                                  // 7382
            if (hour < 12) {                                                                                           // 7383
                return '午前';                                                                                           // 7384
            } else {                                                                                                   // 7385
                return '午後';                                                                                           // 7386
            }                                                                                                          // 7387
        },                                                                                                             // 7388
        calendar : {                                                                                                   // 7389
            sameDay : '[今日] LT',                                                                                       // 7390
            nextDay : '[明日] LT',                                                                                       // 7391
            nextWeek : '[来週]dddd LT',                                                                                  // 7392
            lastDay : '[昨日] LT',                                                                                       // 7393
            lastWeek : '[前週]dddd LT',                                                                                  // 7394
            sameElse : 'L'                                                                                             // 7395
        },                                                                                                             // 7396
        ordinalParse : /\d{1,2}日/,                                                                                     // 7397
        ordinal : function (number, period) {                                                                          // 7398
            switch (period) {                                                                                          // 7399
            case 'd':                                                                                                  // 7400
            case 'D':                                                                                                  // 7401
            case 'DDD':                                                                                                // 7402
                return number + '日';                                                                                   // 7403
            default:                                                                                                   // 7404
                return number;                                                                                         // 7405
            }                                                                                                          // 7406
        },                                                                                                             // 7407
        relativeTime : {                                                                                               // 7408
            future : '%s後',                                                                                            // 7409
            past : '%s前',                                                                                              // 7410
            s : '数秒',                                                                                                  // 7411
            m : '1分',                                                                                                  // 7412
            mm : '%d分',                                                                                                // 7413
            h : '1時間',                                                                                                 // 7414
            hh : '%d時間',                                                                                               // 7415
            d : '1日',                                                                                                  // 7416
            dd : '%d日',                                                                                                // 7417
            M : '1ヶ月',                                                                                                 // 7418
            MM : '%dヶ月',                                                                                               // 7419
            y : '1年',                                                                                                  // 7420
            yy : '%d年'                                                                                                 // 7421
        }                                                                                                              // 7422
    });                                                                                                                // 7423
                                                                                                                       // 7424
    //! moment.js locale configuration                                                                                 // 7425
    //! locale : Boso Jowo (jv)                                                                                        // 7426
    //! author : Rony Lantip : https://github.com/lantip                                                               // 7427
    //! reference: http://jv.wikipedia.org/wiki/Basa_Jawa                                                              // 7428
                                                                                                                       // 7429
    var jv = moment__default.defineLocale('jv', {                                                                      // 7430
        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),  // 7431
        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),                                    // 7432
        weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),                                          // 7433
        weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),                                                      // 7434
        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),                                                               // 7435
        longDateFormat : {                                                                                             // 7436
            LT : 'HH.mm',                                                                                              // 7437
            LTS : 'HH.mm.ss',                                                                                          // 7438
            L : 'DD/MM/YYYY',                                                                                          // 7439
            LL : 'D MMMM YYYY',                                                                                        // 7440
            LLL : 'D MMMM YYYY [pukul] HH.mm',                                                                         // 7441
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'                                                                   // 7442
        },                                                                                                             // 7443
        meridiemParse: /enjing|siyang|sonten|ndalu/,                                                                   // 7444
        meridiemHour : function (hour, meridiem) {                                                                     // 7445
            if (hour === 12) {                                                                                         // 7446
                hour = 0;                                                                                              // 7447
            }                                                                                                          // 7448
            if (meridiem === 'enjing') {                                                                               // 7449
                return hour;                                                                                           // 7450
            } else if (meridiem === 'siyang') {                                                                        // 7451
                return hour >= 11 ? hour : hour + 12;                                                                  // 7452
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {                                                // 7453
                return hour + 12;                                                                                      // 7454
            }                                                                                                          // 7455
        },                                                                                                             // 7456
        meridiem : function (hours, minutes, isLower) {                                                                // 7457
            if (hours < 11) {                                                                                          // 7458
                return 'enjing';                                                                                       // 7459
            } else if (hours < 15) {                                                                                   // 7460
                return 'siyang';                                                                                       // 7461
            } else if (hours < 19) {                                                                                   // 7462
                return 'sonten';                                                                                       // 7463
            } else {                                                                                                   // 7464
                return 'ndalu';                                                                                        // 7465
            }                                                                                                          // 7466
        },                                                                                                             // 7467
        calendar : {                                                                                                   // 7468
            sameDay : '[Dinten puniko pukul] LT',                                                                      // 7469
            nextDay : '[Mbenjang pukul] LT',                                                                           // 7470
            nextWeek : 'dddd [pukul] LT',                                                                              // 7471
            lastDay : '[Kala wingi pukul] LT',                                                                         // 7472
            lastWeek : 'dddd [kepengker pukul] LT',                                                                    // 7473
            sameElse : 'L'                                                                                             // 7474
        },                                                                                                             // 7475
        relativeTime : {                                                                                               // 7476
            future : 'wonten ing %s',                                                                                  // 7477
            past : '%s ingkang kepengker',                                                                             // 7478
            s : 'sawetawis detik',                                                                                     // 7479
            m : 'setunggal menit',                                                                                     // 7480
            mm : '%d menit',                                                                                           // 7481
            h : 'setunggal jam',                                                                                       // 7482
            hh : '%d jam',                                                                                             // 7483
            d : 'sedinten',                                                                                            // 7484
            dd : '%d dinten',                                                                                          // 7485
            M : 'sewulan',                                                                                             // 7486
            MM : '%d wulan',                                                                                           // 7487
            y : 'setaun',                                                                                              // 7488
            yy : '%d taun'                                                                                             // 7489
        },                                                                                                             // 7490
        week : {                                                                                                       // 7491
            dow : 1, // Monday is the first day of the week.                                                           // 7492
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 7493
        }                                                                                                              // 7494
    });                                                                                                                // 7495
                                                                                                                       // 7496
    //! moment.js locale configuration                                                                                 // 7497
    //! locale : Georgian (ka)                                                                                         // 7498
    //! author : Irakli Janiashvili : https://github.com/irakli-janiashvili                                            // 7499
                                                                                                                       // 7500
    var ka = moment__default.defineLocale('ka', {                                                                      // 7501
        months : {                                                                                                     // 7502
            standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
            format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
        },                                                                                                             // 7505
        monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),                                    // 7506
        weekdays : {                                                                                                   // 7507
            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),                    // 7508
            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),                       // 7509
            isFormat: /(წინა|შემდეგ)/                                                                                  // 7510
        },                                                                                                             // 7511
        weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),                                                      // 7512
        weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),                                                               // 7513
        longDateFormat : {                                                                                             // 7514
            LT : 'h:mm A',                                                                                             // 7515
            LTS : 'h:mm:ss A',                                                                                         // 7516
            L : 'DD/MM/YYYY',                                                                                          // 7517
            LL : 'D MMMM YYYY',                                                                                        // 7518
            LLL : 'D MMMM YYYY h:mm A',                                                                                // 7519
            LLLL : 'dddd, D MMMM YYYY h:mm A'                                                                          // 7520
        },                                                                                                             // 7521
        calendar : {                                                                                                   // 7522
            sameDay : '[დღეს] LT[-ზე]',                                                                                // 7523
            nextDay : '[ხვალ] LT[-ზე]',                                                                                // 7524
            lastDay : '[გუშინ] LT[-ზე]',                                                                               // 7525
            nextWeek : '[შემდეგ] dddd LT[-ზე]',                                                                        // 7526
            lastWeek : '[წინა] dddd LT-ზე',                                                                            // 7527
            sameElse : 'L'                                                                                             // 7528
        },                                                                                                             // 7529
        relativeTime : {                                                                                               // 7530
            future : function (s) {                                                                                    // 7531
                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?                                                            // 7532
                    s.replace(/ი$/, 'ში') :                                                                            // 7533
                    s + 'ში';                                                                                          // 7534
            },                                                                                                         // 7535
            past : function (s) {                                                                                      // 7536
                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {                                                           // 7537
                    return s.replace(/(ი|ე)$/, 'ის წინ');                                                              // 7538
                }                                                                                                      // 7539
                if ((/წელი/).test(s)) {                                                                                // 7540
                    return s.replace(/წელი$/, 'წლის წინ');                                                             // 7541
                }                                                                                                      // 7542
            },                                                                                                         // 7543
            s : 'რამდენიმე წამი',                                                                                      // 7544
            m : 'წუთი',                                                                                                // 7545
            mm : '%d წუთი',                                                                                            // 7546
            h : 'საათი',                                                                                               // 7547
            hh : '%d საათი',                                                                                           // 7548
            d : 'დღე',                                                                                                 // 7549
            dd : '%d დღე',                                                                                             // 7550
            M : 'თვე',                                                                                                 // 7551
            MM : '%d თვე',                                                                                             // 7552
            y : 'წელი',                                                                                                // 7553
            yy : '%d წელი'                                                                                             // 7554
        },                                                                                                             // 7555
        ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,                                                                   // 7556
        ordinal : function (number) {                                                                                  // 7557
            if (number === 0) {                                                                                        // 7558
                return number;                                                                                         // 7559
            }                                                                                                          // 7560
            if (number === 1) {                                                                                        // 7561
                return number + '-ლი';                                                                                 // 7562
            }                                                                                                          // 7563
            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {                     // 7564
                return 'მე-' + number;                                                                                 // 7565
            }                                                                                                          // 7566
            return number + '-ე';                                                                                      // 7567
        },                                                                                                             // 7568
        week : {                                                                                                       // 7569
            dow : 1,                                                                                                   // 7570
            doy : 7                                                                                                    // 7571
        }                                                                                                              // 7572
    });                                                                                                                // 7573
                                                                                                                       // 7574
    //! moment.js locale configuration                                                                                 // 7575
    //! locale : kazakh (kk)                                                                                           // 7576
    //! authors : Nurlan Rakhimzhanov : https://github.com/nurlan                                                      // 7577
                                                                                                                       // 7578
    var kk__suffixes = {                                                                                               // 7579
        0: '-ші',                                                                                                      // 7580
        1: '-ші',                                                                                                      // 7581
        2: '-ші',                                                                                                      // 7582
        3: '-ші',                                                                                                      // 7583
        4: '-ші',                                                                                                      // 7584
        5: '-ші',                                                                                                      // 7585
        6: '-шы',                                                                                                      // 7586
        7: '-ші',                                                                                                      // 7587
        8: '-ші',                                                                                                      // 7588
        9: '-шы',                                                                                                      // 7589
        10: '-шы',                                                                                                     // 7590
        20: '-шы',                                                                                                     // 7591
        30: '-шы',                                                                                                     // 7592
        40: '-шы',                                                                                                     // 7593
        50: '-ші',                                                                                                     // 7594
        60: '-шы',                                                                                                     // 7595
        70: '-ші',                                                                                                     // 7596
        80: '-ші',                                                                                                     // 7597
        90: '-шы',                                                                                                     // 7598
        100: '-ші'                                                                                                     // 7599
    };                                                                                                                 // 7600
                                                                                                                       // 7601
    var kk = moment__default.defineLocale('kk', {                                                                      // 7602
        months : 'Қаңтар_Ақпан_Наурыз_Сәуір_Мамыр_Маусым_Шілде_Тамыз_Қыркүйек_Қазан_Қараша_Желтоқсан'.split('_'),      // 7603
        monthsShort : 'Қаң_Ақп_Нау_Сәу_Мам_Мау_Шіл_Там_Қыр_Қаз_Қар_Жел'.split('_'),                                    // 7604
        weekdays : 'Жексенбі_Дүйсенбі_Сейсенбі_Сәрсенбі_Бейсенбі_Жұма_Сенбі'.split('_'),                               // 7605
        weekdaysShort : 'Жек_Дүй_Сей_Сәр_Бей_Жұм_Сен'.split('_'),                                                      // 7606
        weekdaysMin : 'Жк_Дй_Сй_Ср_Бй_Жм_Сн'.split('_'),                                                               // 7607
        longDateFormat : {                                                                                             // 7608
            LT : 'HH:mm',                                                                                              // 7609
            LTS : 'HH:mm:ss',                                                                                          // 7610
            L : 'DD.MM.YYYY',                                                                                          // 7611
            LL : 'D MMMM YYYY',                                                                                        // 7612
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 7613
            LLLL : 'dddd, D MMMM YYYY HH:mm'                                                                           // 7614
        },                                                                                                             // 7615
        calendar : {                                                                                                   // 7616
            sameDay : '[Бүгін сағат] LT',                                                                              // 7617
            nextDay : '[Ертең сағат] LT',                                                                              // 7618
            nextWeek : 'dddd [сағат] LT',                                                                              // 7619
            lastDay : '[Кеше сағат] LT',                                                                               // 7620
            lastWeek : '[Өткен аптаның] dddd [сағат] LT',                                                              // 7621
            sameElse : 'L'                                                                                             // 7622
        },                                                                                                             // 7623
        relativeTime : {                                                                                               // 7624
            future : '%s ішінде',                                                                                      // 7625
            past : '%s бұрын',                                                                                         // 7626
            s : 'бірнеше секунд',                                                                                      // 7627
            m : 'бір минут',                                                                                           // 7628
            mm : '%d минут',                                                                                           // 7629
            h : 'бір сағат',                                                                                           // 7630
            hh : '%d сағат',                                                                                           // 7631
            d : 'бір күн',                                                                                             // 7632
            dd : '%d күн',                                                                                             // 7633
            M : 'бір ай',                                                                                              // 7634
            MM : '%d ай',                                                                                              // 7635
            y : 'бір жыл',                                                                                             // 7636
            yy : '%d жыл'                                                                                              // 7637
        },                                                                                                             // 7638
        ordinalParse: /\d{1,2}-(ші|шы)/,                                                                               // 7639
        ordinal : function (number) {                                                                                  // 7640
            var a = number % 10,                                                                                       // 7641
                b = number >= 100 ? 100 : null;                                                                        // 7642
            return number + (kk__suffixes[number] || kk__suffixes[a] || kk__suffixes[b]);                              // 7643
        },                                                                                                             // 7644
        week : {                                                                                                       // 7645
            dow : 1, // Monday is the first day of the week.                                                           // 7646
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 7647
        }                                                                                                              // 7648
    });                                                                                                                // 7649
                                                                                                                       // 7650
    //! moment.js locale configuration                                                                                 // 7651
    //! locale : khmer (km)                                                                                            // 7652
    //! author : Kruy Vanna : https://github.com/kruyvanna                                                             // 7653
                                                                                                                       // 7654
    var km = moment__default.defineLocale('km', {                                                                      // 7655
        months: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),                   // 7656
        monthsShort: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),              // 7657
        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),                                         // 7658
        weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),                                    // 7659
        weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),                                      // 7660
        longDateFormat: {                                                                                              // 7661
            LT: 'HH:mm',                                                                                               // 7662
            LTS : 'HH:mm:ss',                                                                                          // 7663
            L: 'DD/MM/YYYY',                                                                                           // 7664
            LL: 'D MMMM YYYY',                                                                                         // 7665
            LLL: 'D MMMM YYYY HH:mm',                                                                                  // 7666
            LLLL: 'dddd, D MMMM YYYY HH:mm'                                                                            // 7667
        },                                                                                                             // 7668
        calendar: {                                                                                                    // 7669
            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',                                                                              // 7670
            nextDay: '[ស្អែក ម៉ោង] LT',                                                                                // 7671
            nextWeek: 'dddd [ម៉ោង] LT',                                                                                // 7672
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',                                                                             // 7673
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',                                                                   // 7674
            sameElse: 'L'                                                                                              // 7675
        },                                                                                                             // 7676
        relativeTime: {                                                                                                // 7677
            future: '%sទៀត',                                                                                           // 7678
            past: '%sមុន',                                                                                             // 7679
            s: 'ប៉ុន្មានវិនាទី',                                                                                       // 7680
            m: 'មួយនាទី',                                                                                              // 7681
            mm: '%d នាទី',                                                                                             // 7682
            h: 'មួយម៉ោង',                                                                                              // 7683
            hh: '%d ម៉ោង',                                                                                             // 7684
            d: 'មួយថ្ងៃ',                                                                                              // 7685
            dd: '%d ថ្ងៃ',                                                                                             // 7686
            M: 'មួយខែ',                                                                                                // 7687
            MM: '%d ខែ',                                                                                               // 7688
            y: 'មួយឆ្នាំ',                                                                                             // 7689
            yy: '%d ឆ្នាំ'                                                                                             // 7690
        },                                                                                                             // 7691
        week: {                                                                                                        // 7692
            dow: 1, // Monday is the first day of the week.                                                            // 7693
            doy: 4 // The week that contains Jan 4th is the first week of the year.                                    // 7694
        }                                                                                                              // 7695
    });                                                                                                                // 7696
                                                                                                                       // 7697
    //! moment.js locale configuration                                                                                 // 7698
    //! locale : korean (ko)                                                                                           // 7699
    //!                                                                                                                // 7700
    //! authors                                                                                                        // 7701
    //!                                                                                                                // 7702
    //! - Kyungwook, Park : https://github.com/kyungw00k                                                               // 7703
    //! - Jeeeyul Lee <jeeeyul@gmail.com>                                                                              // 7704
                                                                                                                       // 7705
    var ko = moment__default.defineLocale('ko', {                                                                      // 7706
        months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),                                                  // 7707
        monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),                                             // 7708
        weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),                                                           // 7709
        weekdaysShort : '일_월_화_수_목_금_토'.split('_'),                                                                    // 7710
        weekdaysMin : '일_월_화_수_목_금_토'.split('_'),                                                                      // 7711
        longDateFormat : {                                                                                             // 7712
            LT : 'A h시 m분',                                                                                            // 7713
            LTS : 'A h시 m분 s초',                                                                                        // 7714
            L : 'YYYY.MM.DD',                                                                                          // 7715
            LL : 'YYYY년 MMMM D일',                                                                                      // 7716
            LLL : 'YYYY년 MMMM D일 A h시 m분',                                                                             // 7717
            LLLL : 'YYYY년 MMMM D일 dddd A h시 m분'                                                                        // 7718
        },                                                                                                             // 7719
        calendar : {                                                                                                   // 7720
            sameDay : '오늘 LT',                                                                                         // 7721
            nextDay : '내일 LT',                                                                                         // 7722
            nextWeek : 'dddd LT',                                                                                      // 7723
            lastDay : '어제 LT',                                                                                         // 7724
            lastWeek : '지난주 dddd LT',                                                                                  // 7725
            sameElse : 'L'                                                                                             // 7726
        },                                                                                                             // 7727
        relativeTime : {                                                                                               // 7728
            future : '%s 후',                                                                                           // 7729
            past : '%s 전',                                                                                             // 7730
            s : '몇초',                                                                                                  // 7731
            ss : '%d초',                                                                                                // 7732
            m : '일분',                                                                                                  // 7733
            mm : '%d분',                                                                                                // 7734
            h : '한시간',                                                                                                 // 7735
            hh : '%d시간',                                                                                               // 7736
            d : '하루',                                                                                                  // 7737
            dd : '%d일',                                                                                                // 7738
            M : '한달',                                                                                                  // 7739
            MM : '%d달',                                                                                                // 7740
            y : '일년',                                                                                                  // 7741
            yy : '%d년'                                                                                                 // 7742
        },                                                                                                             // 7743
        ordinalParse : /\d{1,2}일/,                                                                                     // 7744
        ordinal : '%d일',                                                                                               // 7745
        meridiemParse : /오전|오후/,                                                                                       // 7746
        isPM : function (token) {                                                                                      // 7747
            return token === '오후';                                                                                     // 7748
        },                                                                                                             // 7749
        meridiem : function (hour, minute, isUpper) {                                                                  // 7750
            return hour < 12 ? '오전' : '오후';                                                                            // 7751
        }                                                                                                              // 7752
    });                                                                                                                // 7753
                                                                                                                       // 7754
    //! moment.js locale configuration                                                                                 // 7755
    //! locale : Luxembourgish (lb)                                                                                    // 7756
    //! author : mweimerskirch : https://github.com/mweimerskirch, David Raison : https://github.com/kwisatz           // 7757
                                                                                                                       // 7758
    function lb__processRelativeTime(number, withoutSuffix, key, isFuture) {                                           // 7759
        var format = {                                                                                                 // 7760
            'm': ['eng Minutt', 'enger Minutt'],                                                                       // 7761
            'h': ['eng Stonn', 'enger Stonn'],                                                                         // 7762
            'd': ['een Dag', 'engem Dag'],                                                                             // 7763
            'M': ['ee Mount', 'engem Mount'],                                                                          // 7764
            'y': ['ee Joer', 'engem Joer']                                                                             // 7765
        };                                                                                                             // 7766
        return withoutSuffix ? format[key][0] : format[key][1];                                                        // 7767
    }                                                                                                                  // 7768
    function processFutureTime(string) {                                                                               // 7769
        var number = string.substr(0, string.indexOf(' '));                                                            // 7770
        if (eifelerRegelAppliesToNumber(number)) {                                                                     // 7771
            return 'a ' + string;                                                                                      // 7772
        }                                                                                                              // 7773
        return 'an ' + string;                                                                                         // 7774
    }                                                                                                                  // 7775
    function processPastTime(string) {                                                                                 // 7776
        var number = string.substr(0, string.indexOf(' '));                                                            // 7777
        if (eifelerRegelAppliesToNumber(number)) {                                                                     // 7778
            return 'viru ' + string;                                                                                   // 7779
        }                                                                                                              // 7780
        return 'virun ' + string;                                                                                      // 7781
    }                                                                                                                  // 7782
    /**                                                                                                                // 7783
     * Returns true if the word before the given number loses the '-n' ending.                                         // 7784
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'                                                                                // 7785
     *                                                                                                                 // 7786
     * @param number {integer}                                                                                         // 7787
     * @returns {boolean}                                                                                              // 7788
     */                                                                                                                // 7789
    function eifelerRegelAppliesToNumber(number) {                                                                     // 7790
        number = parseInt(number, 10);                                                                                 // 7791
        if (isNaN(number)) {                                                                                           // 7792
            return false;                                                                                              // 7793
        }                                                                                                              // 7794
        if (number < 0) {                                                                                              // 7795
            // Negative Number --> always true                                                                         // 7796
            return true;                                                                                               // 7797
        } else if (number < 10) {                                                                                      // 7798
            // Only 1 digit                                                                                            // 7799
            if (4 <= number && number <= 7) {                                                                          // 7800
                return true;                                                                                           // 7801
            }                                                                                                          // 7802
            return false;                                                                                              // 7803
        } else if (number < 100) {                                                                                     // 7804
            // 2 digits                                                                                                // 7805
            var lastDigit = number % 10, firstDigit = number / 10;                                                     // 7806
            if (lastDigit === 0) {                                                                                     // 7807
                return eifelerRegelAppliesToNumber(firstDigit);                                                        // 7808
            }                                                                                                          // 7809
            return eifelerRegelAppliesToNumber(lastDigit);                                                             // 7810
        } else if (number < 10000) {                                                                                   // 7811
            // 3 or 4 digits --> recursively check first digit                                                         // 7812
            while (number >= 10) {                                                                                     // 7813
                number = number / 10;                                                                                  // 7814
            }                                                                                                          // 7815
            return eifelerRegelAppliesToNumber(number);                                                                // 7816
        } else {                                                                                                       // 7817
            // Anything larger than 4 digits: recursively check first n-3 digits                                       // 7818
            number = number / 1000;                                                                                    // 7819
            return eifelerRegelAppliesToNumber(number);                                                                // 7820
        }                                                                                                              // 7821
    }                                                                                                                  // 7822
                                                                                                                       // 7823
    var lb = moment__default.defineLocale('lb', {                                                                      // 7824
        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),     // 7825
        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),                        // 7826
        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),                       // 7827
        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),                                                       // 7828
        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),                                                                // 7829
        longDateFormat: {                                                                                              // 7830
            LT: 'H:mm [Auer]',                                                                                         // 7831
            LTS: 'H:mm:ss [Auer]',                                                                                     // 7832
            L: 'DD.MM.YYYY',                                                                                           // 7833
            LL: 'D. MMMM YYYY',                                                                                        // 7834
            LLL: 'D. MMMM YYYY H:mm [Auer]',                                                                           // 7835
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'                                                                     // 7836
        },                                                                                                             // 7837
        calendar: {                                                                                                    // 7838
            sameDay: '[Haut um] LT',                                                                                   // 7839
            sameElse: 'L',                                                                                             // 7840
            nextDay: '[Muer um] LT',                                                                                   // 7841
            nextWeek: 'dddd [um] LT',                                                                                  // 7842
            lastDay: '[Gëschter um] LT',                                                                               // 7843
            lastWeek: function () {                                                                                    // 7844
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {                                                                                  // 7846
                    case 2:                                                                                            // 7847
                    case 4:                                                                                            // 7848
                        return '[Leschten] dddd [um] LT';                                                              // 7849
                    default:                                                                                           // 7850
                        return '[Leschte] dddd [um] LT';                                                               // 7851
                }                                                                                                      // 7852
            }                                                                                                          // 7853
        },                                                                                                             // 7854
        relativeTime : {                                                                                               // 7855
            future : processFutureTime,                                                                                // 7856
            past : processPastTime,                                                                                    // 7857
            s : 'e puer Sekonnen',                                                                                     // 7858
            m : lb__processRelativeTime,                                                                               // 7859
            mm : '%d Minutten',                                                                                        // 7860
            h : lb__processRelativeTime,                                                                               // 7861
            hh : '%d Stonnen',                                                                                         // 7862
            d : lb__processRelativeTime,                                                                               // 7863
            dd : '%d Deeg',                                                                                            // 7864
            M : lb__processRelativeTime,                                                                               // 7865
            MM : '%d Méint',                                                                                           // 7866
            y : lb__processRelativeTime,                                                                               // 7867
            yy : '%d Joer'                                                                                             // 7868
        },                                                                                                             // 7869
        ordinalParse: /\d{1,2}\./,                                                                                     // 7870
        ordinal: '%d.',                                                                                                // 7871
        week: {                                                                                                        // 7872
            dow: 1, // Monday is the first day of the week.                                                            // 7873
            doy: 4  // The week that contains Jan 4th is the first week of the year.                                   // 7874
        }                                                                                                              // 7875
    });                                                                                                                // 7876
                                                                                                                       // 7877
    //! moment.js locale configuration                                                                                 // 7878
    //! locale : lao (lo)                                                                                              // 7879
    //! author : Ryan Hart : https://github.com/ryanhart2                                                              // 7880
                                                                                                                       // 7881
    var lo = moment__default.defineLocale('lo', {                                                                      // 7882
        months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),              // 7883
        monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),         // 7884
        weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),                                                   // 7885
        weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),                                                // 7886
        weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),                                                                   // 7887
        longDateFormat : {                                                                                             // 7888
            LT : 'HH:mm',                                                                                              // 7889
            LTS : 'HH:mm:ss',                                                                                          // 7890
            L : 'DD/MM/YYYY',                                                                                          // 7891
            LL : 'D MMMM YYYY',                                                                                        // 7892
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 7893
            LLLL : 'ວັນdddd D MMMM YYYY HH:mm'                                                                         // 7894
        },                                                                                                             // 7895
        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,                                                                              // 7896
        isPM: function (input) {                                                                                       // 7897
            return input === 'ຕອນແລງ';                                                                                 // 7898
        },                                                                                                             // 7899
        meridiem : function (hour, minute, isLower) {                                                                  // 7900
            if (hour < 12) {                                                                                           // 7901
                return 'ຕອນເຊົ້າ';                                                                                     // 7902
            } else {                                                                                                   // 7903
                return 'ຕອນແລງ';                                                                                       // 7904
            }                                                                                                          // 7905
        },                                                                                                             // 7906
        calendar : {                                                                                                   // 7907
            sameDay : '[ມື້ນີ້ເວລາ] LT',                                                                               // 7908
            nextDay : '[ມື້ອື່ນເວລາ] LT',                                                                              // 7909
            nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',                                                                        // 7910
            lastDay : '[ມື້ວານນີ້ເວລາ] LT',                                                                            // 7911
            lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',                                                                    // 7912
            sameElse : 'L'                                                                                             // 7913
        },                                                                                                             // 7914
        relativeTime : {                                                                                               // 7915
            future : 'ອີກ %s',                                                                                         // 7916
            past : '%sຜ່ານມາ',                                                                                         // 7917
            s : 'ບໍ່ເທົ່າໃດວິນາທີ',                                                                                    // 7918
            m : '1 ນາທີ',                                                                                              // 7919
            mm : '%d ນາທີ',                                                                                            // 7920
            h : '1 ຊົ່ວໂມງ',                                                                                           // 7921
            hh : '%d ຊົ່ວໂມງ',                                                                                         // 7922
            d : '1 ມື້',                                                                                               // 7923
            dd : '%d ມື້',                                                                                             // 7924
            M : '1 ເດືອນ',                                                                                             // 7925
            MM : '%d ເດືອນ',                                                                                           // 7926
            y : '1 ປີ',                                                                                                // 7927
            yy : '%d ປີ'                                                                                               // 7928
        },                                                                                                             // 7929
        ordinalParse: /(ທີ່)\d{1,2}/,                                                                                  // 7930
        ordinal : function (number) {                                                                                  // 7931
            return 'ທີ່' + number;                                                                                     // 7932
        }                                                                                                              // 7933
    });                                                                                                                // 7934
                                                                                                                       // 7935
    //! moment.js locale configuration                                                                                 // 7936
    //! locale : Lithuanian (lt)                                                                                       // 7937
    //! author : Mindaugas Mozūras : https://github.com/mmozuras                                                       // 7938
                                                                                                                       // 7939
    var lt__units = {                                                                                                  // 7940
        'm' : 'minutė_minutės_minutę',                                                                                 // 7941
        'mm': 'minutės_minučių_minutes',                                                                               // 7942
        'h' : 'valanda_valandos_valandą',                                                                              // 7943
        'hh': 'valandos_valandų_valandas',                                                                             // 7944
        'd' : 'diena_dienos_dieną',                                                                                    // 7945
        'dd': 'dienos_dienų_dienas',                                                                                   // 7946
        'M' : 'mėnuo_mėnesio_mėnesį',                                                                                  // 7947
        'MM': 'mėnesiai_mėnesių_mėnesius',                                                                             // 7948
        'y' : 'metai_metų_metus',                                                                                      // 7949
        'yy': 'metai_metų_metus'                                                                                       // 7950
    };                                                                                                                 // 7951
    function translateSeconds(number, withoutSuffix, key, isFuture) {                                                  // 7952
        if (withoutSuffix) {                                                                                           // 7953
            return 'kelios sekundės';                                                                                  // 7954
        } else {                                                                                                       // 7955
            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';                                                   // 7956
        }                                                                                                              // 7957
    }                                                                                                                  // 7958
    function translateSingular(number, withoutSuffix, key, isFuture) {                                                 // 7959
        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);                             // 7960
    }                                                                                                                  // 7961
    function special(number) {                                                                                         // 7962
        return number % 10 === 0 || (number > 10 && number < 20);                                                      // 7963
    }                                                                                                                  // 7964
    function forms(key) {                                                                                              // 7965
        return lt__units[key].split('_');                                                                              // 7966
    }                                                                                                                  // 7967
    function lt__translate(number, withoutSuffix, key, isFuture) {                                                     // 7968
        var result = number + ' ';                                                                                     // 7969
        if (number === 1) {                                                                                            // 7970
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);                                // 7971
        } else if (withoutSuffix) {                                                                                    // 7972
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);                                         // 7973
        } else {                                                                                                       // 7974
            if (isFuture) {                                                                                            // 7975
                return result + forms(key)[1];                                                                         // 7976
            } else {                                                                                                   // 7977
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);                                     // 7978
            }                                                                                                          // 7979
        }                                                                                                              // 7980
    }                                                                                                                  // 7981
    var lt = moment__default.defineLocale('lt', {                                                                      // 7982
        months : {                                                                                                     // 7983
            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_')
        },                                                                                                             // 7986
        monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),                                    // 7987
        weekdays : {                                                                                                   // 7988
            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),    // 7989
            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
            isFormat: /dddd HH:mm/                                                                                     // 7991
        },                                                                                                             // 7992
        weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),                                                      // 7993
        weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),                                                                     // 7994
        longDateFormat : {                                                                                             // 7995
            LT : 'HH:mm',                                                                                              // 7996
            LTS : 'HH:mm:ss',                                                                                          // 7997
            L : 'YYYY-MM-DD',                                                                                          // 7998
            LL : 'YYYY [m.] MMMM D [d.]',                                                                              // 7999
            LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',                                                               // 8000
            LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',                                                        // 8001
            l : 'YYYY-MM-DD',                                                                                          // 8002
            ll : 'YYYY [m.] MMMM D [d.]',                                                                              // 8003
            lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',                                                               // 8004
            llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'                                                          // 8005
        },                                                                                                             // 8006
        calendar : {                                                                                                   // 8007
            sameDay : '[Šiandien] LT',                                                                                 // 8008
            nextDay : '[Rytoj] LT',                                                                                    // 8009
            nextWeek : 'dddd LT',                                                                                      // 8010
            lastDay : '[Vakar] LT',                                                                                    // 8011
            lastWeek : '[Praėjusį] dddd LT',                                                                           // 8012
            sameElse : 'L'                                                                                             // 8013
        },                                                                                                             // 8014
        relativeTime : {                                                                                               // 8015
            future : 'po %s',                                                                                          // 8016
            past : 'prieš %s',                                                                                         // 8017
            s : translateSeconds,                                                                                      // 8018
            m : translateSingular,                                                                                     // 8019
            mm : lt__translate,                                                                                        // 8020
            h : translateSingular,                                                                                     // 8021
            hh : lt__translate,                                                                                        // 8022
            d : translateSingular,                                                                                     // 8023
            dd : lt__translate,                                                                                        // 8024
            M : translateSingular,                                                                                     // 8025
            MM : lt__translate,                                                                                        // 8026
            y : translateSingular,                                                                                     // 8027
            yy : lt__translate                                                                                         // 8028
        },                                                                                                             // 8029
        ordinalParse: /\d{1,2}-oji/,                                                                                   // 8030
        ordinal : function (number) {                                                                                  // 8031
            return number + '-oji';                                                                                    // 8032
        },                                                                                                             // 8033
        week : {                                                                                                       // 8034
            dow : 1, // Monday is the first day of the week.                                                           // 8035
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 8036
        }                                                                                                              // 8037
    });                                                                                                                // 8038
                                                                                                                       // 8039
    //! moment.js locale configuration                                                                                 // 8040
    //! locale : latvian (lv)                                                                                          // 8041
    //! author : Kristaps Karlsons : https://github.com/skakri                                                         // 8042
    //! author : Jānis Elmeris : https://github.com/JanisE                                                             // 8043
                                                                                                                       // 8044
    var lv__units = {                                                                                                  // 8045
        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),                                                              // 8046
        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),                                                             // 8047
        'h': 'stundas_stundām_stunda_stundas'.split('_'),                                                              // 8048
        'hh': 'stundas_stundām_stunda_stundas'.split('_'),                                                             // 8049
        'd': 'dienas_dienām_diena_dienas'.split('_'),                                                                  // 8050
        'dd': 'dienas_dienām_diena_dienas'.split('_'),                                                                 // 8051
        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),                                                              // 8052
        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),                                                             // 8053
        'y': 'gada_gadiem_gads_gadi'.split('_'),                                                                       // 8054
        'yy': 'gada_gadiem_gads_gadi'.split('_')                                                                       // 8055
    };                                                                                                                 // 8056
    /**                                                                                                                // 8057
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.                    // 8058
     */                                                                                                                // 8059
    function lv__format(forms, number, withoutSuffix) {                                                                // 8060
        if (withoutSuffix) {                                                                                           // 8061
            // E.g. "21 minūte", "3 minūtes".                                                                          // 8062
            return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];                                           // 8063
        } else {                                                                                                       // 8064
            // E.g. "21 minūtes" as in "pēc 21 minūtes".                                                               // 8065
            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".                                                                 // 8066
            return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];                                           // 8067
        }                                                                                                              // 8068
    }                                                                                                                  // 8069
    function lv__relativeTimeWithPlural(number, withoutSuffix, key) {                                                  // 8070
        return number + ' ' + lv__format(lv__units[key], number, withoutSuffix);                                       // 8071
    }                                                                                                                  // 8072
    function relativeTimeWithSingular(number, withoutSuffix, key) {                                                    // 8073
        return lv__format(lv__units[key], number, withoutSuffix);                                                      // 8074
    }                                                                                                                  // 8075
    function relativeSeconds(number, withoutSuffix) {                                                                  // 8076
        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';                                                    // 8077
    }                                                                                                                  // 8078
                                                                                                                       // 8079
    var lv = moment__default.defineLocale('lv', {                                                                      // 8080
        months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),                                    // 8082
        weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),               // 8083
        weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),                                                                  // 8084
        weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),                                                                    // 8085
        longDateFormat : {                                                                                             // 8086
            LT : 'HH:mm',                                                                                              // 8087
            LTS : 'HH:mm:ss',                                                                                          // 8088
            L : 'DD.MM.YYYY.',                                                                                         // 8089
            LL : 'YYYY. [gada] D. MMMM',                                                                               // 8090
            LLL : 'YYYY. [gada] D. MMMM, HH:mm',                                                                       // 8091
            LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'                                                                 // 8092
        },                                                                                                             // 8093
        calendar : {                                                                                                   // 8094
            sameDay : '[Šodien pulksten] LT',                                                                          // 8095
            nextDay : '[Rīt pulksten] LT',                                                                             // 8096
            nextWeek : 'dddd [pulksten] LT',                                                                           // 8097
            lastDay : '[Vakar pulksten] LT',                                                                           // 8098
            lastWeek : '[Pagājušā] dddd [pulksten] LT',                                                                // 8099
            sameElse : 'L'                                                                                             // 8100
        },                                                                                                             // 8101
        relativeTime : {                                                                                               // 8102
            future : 'pēc %s',                                                                                         // 8103
            past : 'pirms %s',                                                                                         // 8104
            s : relativeSeconds,                                                                                       // 8105
            m : relativeTimeWithSingular,                                                                              // 8106
            mm : lv__relativeTimeWithPlural,                                                                           // 8107
            h : relativeTimeWithSingular,                                                                              // 8108
            hh : lv__relativeTimeWithPlural,                                                                           // 8109
            d : relativeTimeWithSingular,                                                                              // 8110
            dd : lv__relativeTimeWithPlural,                                                                           // 8111
            M : relativeTimeWithSingular,                                                                              // 8112
            MM : lv__relativeTimeWithPlural,                                                                           // 8113
            y : relativeTimeWithSingular,                                                                              // 8114
            yy : lv__relativeTimeWithPlural                                                                            // 8115
        },                                                                                                             // 8116
        ordinalParse: /\d{1,2}\./,                                                                                     // 8117
        ordinal : '%d.',                                                                                               // 8118
        week : {                                                                                                       // 8119
            dow : 1, // Monday is the first day of the week.                                                           // 8120
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 8121
        }                                                                                                              // 8122
    });                                                                                                                // 8123
                                                                                                                       // 8124
    //! moment.js locale configuration                                                                                 // 8125
    //! locale : Montenegrin (me)                                                                                      // 8126
    //! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac                                // 8127
                                                                                                                       // 8128
    var me__translator = {                                                                                             // 8129
        words: { //Different grammatical cases                                                                         // 8130
            m: ['jedan minut', 'jednog minuta'],                                                                       // 8131
            mm: ['minut', 'minuta', 'minuta'],                                                                         // 8132
            h: ['jedan sat', 'jednog sata'],                                                                           // 8133
            hh: ['sat', 'sata', 'sati'],                                                                               // 8134
            dd: ['dan', 'dana', 'dana'],                                                                               // 8135
            MM: ['mjesec', 'mjeseca', 'mjeseci'],                                                                      // 8136
            yy: ['godina', 'godine', 'godina']                                                                         // 8137
        },                                                                                                             // 8138
        correctGrammaticalCase: function (number, wordKey) {                                                           // 8139
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);                 // 8140
        },                                                                                                             // 8141
        translate: function (number, withoutSuffix, key) {                                                             // 8142
            var wordKey = me__translator.words[key];                                                                   // 8143
            if (key.length === 1) {                                                                                    // 8144
                return withoutSuffix ? wordKey[0] : wordKey[1];                                                        // 8145
            } else {                                                                                                   // 8146
                return number + ' ' + me__translator.correctGrammaticalCase(number, wordKey);                          // 8147
            }                                                                                                          // 8148
        }                                                                                                              // 8149
    };                                                                                                                 // 8150
                                                                                                                       // 8151
    var me = moment__default.defineLocale('me', {                                                                      // 8152
        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],    // 8154
        weekdays: ['nedjelja', 'ponedjeljak', 'utorak', 'srijeda', 'četvrtak', 'petak', 'subota'],                     // 8155
        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sri.', 'čet.', 'pet.', 'sub.'],                                       // 8156
        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],                                                       // 8157
        longDateFormat: {                                                                                              // 8158
            LT: 'H:mm',                                                                                                // 8159
            LTS : 'H:mm:ss',                                                                                           // 8160
            L: 'DD. MM. YYYY',                                                                                         // 8161
            LL: 'D. MMMM YYYY',                                                                                        // 8162
            LLL: 'D. MMMM YYYY H:mm',                                                                                  // 8163
            LLLL: 'dddd, D. MMMM YYYY H:mm'                                                                            // 8164
        },                                                                                                             // 8165
        calendar: {                                                                                                    // 8166
            sameDay: '[danas u] LT',                                                                                   // 8167
            nextDay: '[sjutra u] LT',                                                                                  // 8168
                                                                                                                       // 8169
            nextWeek: function () {                                                                                    // 8170
                switch (this.day()) {                                                                                  // 8171
                case 0:                                                                                                // 8172
                    return '[u] [nedjelju] [u] LT';                                                                    // 8173
                case 3:                                                                                                // 8174
                    return '[u] [srijedu] [u] LT';                                                                     // 8175
                case 6:                                                                                                // 8176
                    return '[u] [subotu] [u] LT';                                                                      // 8177
                case 1:                                                                                                // 8178
                case 2:                                                                                                // 8179
                case 4:                                                                                                // 8180
                case 5:                                                                                                // 8181
                    return '[u] dddd [u] LT';                                                                          // 8182
                }                                                                                                      // 8183
            },                                                                                                         // 8184
            lastDay  : '[juče u] LT',                                                                                  // 8185
            lastWeek : function () {                                                                                   // 8186
                var lastWeekDays = [                                                                                   // 8187
                    '[prošle] [nedjelje] [u] LT',                                                                      // 8188
                    '[prošlog] [ponedjeljka] [u] LT',                                                                  // 8189
                    '[prošlog] [utorka] [u] LT',                                                                       // 8190
                    '[prošle] [srijede] [u] LT',                                                                       // 8191
                    '[prošlog] [četvrtka] [u] LT',                                                                     // 8192
                    '[prošlog] [petka] [u] LT',                                                                        // 8193
                    '[prošle] [subote] [u] LT'                                                                         // 8194
                ];                                                                                                     // 8195
                return lastWeekDays[this.day()];                                                                       // 8196
            },                                                                                                         // 8197
            sameElse : 'L'                                                                                             // 8198
        },                                                                                                             // 8199
        relativeTime : {                                                                                               // 8200
            future : 'za %s',                                                                                          // 8201
            past   : 'prije %s',                                                                                       // 8202
            s      : 'nekoliko sekundi',                                                                               // 8203
            m      : me__translator.translate,                                                                         // 8204
            mm     : me__translator.translate,                                                                         // 8205
            h      : me__translator.translate,                                                                         // 8206
            hh     : me__translator.translate,                                                                         // 8207
            d      : 'dan',                                                                                            // 8208
            dd     : me__translator.translate,                                                                         // 8209
            M      : 'mjesec',                                                                                         // 8210
            MM     : me__translator.translate,                                                                         // 8211
            y      : 'godinu',                                                                                         // 8212
            yy     : me__translator.translate                                                                          // 8213
        },                                                                                                             // 8214
        ordinalParse: /\d{1,2}\./,                                                                                     // 8215
        ordinal : '%d.',                                                                                               // 8216
        week : {                                                                                                       // 8217
            dow : 1, // Monday is the first day of the week.                                                           // 8218
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 8219
        }                                                                                                              // 8220
    });                                                                                                                // 8221
                                                                                                                       // 8222
    //! moment.js locale configuration                                                                                 // 8223
    //! locale : macedonian (mk)                                                                                       // 8224
    //! author : Borislav Mickov : https://github.com/B0k0                                                             // 8225
                                                                                                                       // 8226
    var mk = moment__default.defineLocale('mk', {                                                                      // 8227
        months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),    // 8228
        monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),                                    // 8229
        weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),                                 // 8230
        weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),                                                      // 8231
        weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),                                                               // 8232
        longDateFormat : {                                                                                             // 8233
            LT : 'H:mm',                                                                                               // 8234
            LTS : 'H:mm:ss',                                                                                           // 8235
            L : 'D.MM.YYYY',                                                                                           // 8236
            LL : 'D MMMM YYYY',                                                                                        // 8237
            LLL : 'D MMMM YYYY H:mm',                                                                                  // 8238
            LLLL : 'dddd, D MMMM YYYY H:mm'                                                                            // 8239
        },                                                                                                             // 8240
        calendar : {                                                                                                   // 8241
            sameDay : '[Денес во] LT',                                                                                 // 8242
            nextDay : '[Утре во] LT',                                                                                  // 8243
            nextWeek : '[Во] dddd [во] LT',                                                                            // 8244
            lastDay : '[Вчера во] LT',                                                                                 // 8245
            lastWeek : function () {                                                                                   // 8246
                switch (this.day()) {                                                                                  // 8247
                case 0:                                                                                                // 8248
                case 3:                                                                                                // 8249
                case 6:                                                                                                // 8250
                    return '[Изминатата] dddd [во] LT';                                                                // 8251
                case 1:                                                                                                // 8252
                case 2:                                                                                                // 8253
                case 4:                                                                                                // 8254
                case 5:                                                                                                // 8255
                    return '[Изминатиот] dddd [во] LT';                                                                // 8256
                }                                                                                                      // 8257
            },                                                                                                         // 8258
            sameElse : 'L'                                                                                             // 8259
        },                                                                                                             // 8260
        relativeTime : {                                                                                               // 8261
            future : 'после %s',                                                                                       // 8262
            past : 'пред %s',                                                                                          // 8263
            s : 'неколку секунди',                                                                                     // 8264
            m : 'минута',                                                                                              // 8265
            mm : '%d минути',                                                                                          // 8266
            h : 'час',                                                                                                 // 8267
            hh : '%d часа',                                                                                            // 8268
            d : 'ден',                                                                                                 // 8269
            dd : '%d дена',                                                                                            // 8270
            M : 'месец',                                                                                               // 8271
            MM : '%d месеци',                                                                                          // 8272
            y : 'година',                                                                                              // 8273
            yy : '%d години'                                                                                           // 8274
        },                                                                                                             // 8275
        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,                                                                   // 8276
        ordinal : function (number) {                                                                                  // 8277
            var lastDigit = number % 10,                                                                               // 8278
                last2Digits = number % 100;                                                                            // 8279
            if (number === 0) {                                                                                        // 8280
                return number + '-ев';                                                                                 // 8281
            } else if (last2Digits === 0) {                                                                            // 8282
                return number + '-ен';                                                                                 // 8283
            } else if (last2Digits > 10 && last2Digits < 20) {                                                         // 8284
                return number + '-ти';                                                                                 // 8285
            } else if (lastDigit === 1) {                                                                              // 8286
                return number + '-ви';                                                                                 // 8287
            } else if (lastDigit === 2) {                                                                              // 8288
                return number + '-ри';                                                                                 // 8289
            } else if (lastDigit === 7 || lastDigit === 8) {                                                           // 8290
                return number + '-ми';                                                                                 // 8291
            } else {                                                                                                   // 8292
                return number + '-ти';                                                                                 // 8293
            }                                                                                                          // 8294
        },                                                                                                             // 8295
        week : {                                                                                                       // 8296
            dow : 1, // Monday is the first day of the week.                                                           // 8297
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 8298
        }                                                                                                              // 8299
    });                                                                                                                // 8300
                                                                                                                       // 8301
    //! moment.js locale configuration                                                                                 // 8302
    //! locale : malayalam (ml)                                                                                        // 8303
    //! author : Floyd Pink : https://github.com/floydpink                                                             // 8304
                                                                                                                       // 8305
    var ml = moment__default.defineLocale('ml', {                                                                      // 8306
        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),  // 8307
        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),             // 8308
        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),                 // 8309
        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),                                         // 8310
        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),                                                              // 8311
        longDateFormat : {                                                                                             // 8312
            LT : 'A h:mm -നു',                                                                                         // 8313
            LTS : 'A h:mm:ss -നു',                                                                                     // 8314
            L : 'DD/MM/YYYY',                                                                                          // 8315
            LL : 'D MMMM YYYY',                                                                                        // 8316
            LLL : 'D MMMM YYYY, A h:mm -നു',                                                                           // 8317
            LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'                                                                     // 8318
        },                                                                                                             // 8319
        calendar : {                                                                                                   // 8320
            sameDay : '[ഇന്ന്] LT',                                                                                    // 8321
            nextDay : '[നാളെ] LT',                                                                                     // 8322
            nextWeek : 'dddd, LT',                                                                                     // 8323
            lastDay : '[ഇന്നലെ] LT',                                                                                   // 8324
            lastWeek : '[കഴിഞ്ഞ] dddd, LT',                                                                            // 8325
            sameElse : 'L'                                                                                             // 8326
        },                                                                                                             // 8327
        relativeTime : {                                                                                               // 8328
            future : '%s കഴിഞ്ഞ്',                                                                                     // 8329
            past : '%s മുൻപ്',                                                                                         // 8330
            s : 'അൽപ നിമിഷങ്ങൾ',                                                                                       // 8331
            m : 'ഒരു മിനിറ്റ്',                                                                                        // 8332
            mm : '%d മിനിറ്റ്',                                                                                        // 8333
            h : 'ഒരു മണിക്കൂർ',                                                                                        // 8334
            hh : '%d മണിക്കൂർ',                                                                                        // 8335
            d : 'ഒരു ദിവസം',                                                                                           // 8336
            dd : '%d ദിവസം',                                                                                           // 8337
            M : 'ഒരു മാസം',                                                                                            // 8338
            MM : '%d മാസം',                                                                                            // 8339
            y : 'ഒരു വർഷം',                                                                                            // 8340
            yy : '%d വർഷം'                                                                                             // 8341
        },                                                                                                             // 8342
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,                                                // 8343
        meridiemHour : function (hour, meridiem) {                                                                     // 8344
            if (hour === 12) {                                                                                         // 8345
                hour = 0;                                                                                              // 8346
            }                                                                                                          // 8347
            if ((meridiem === 'രാത്രി' && hour >= 4) ||                                                                // 8348
                    meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||                                                                     // 8349
                    meridiem === 'വൈകുന്നേരം') {                                                                       // 8350
                return hour + 12;                                                                                      // 8351
            } else {                                                                                                   // 8352
                return hour;                                                                                           // 8353
            }                                                                                                          // 8354
        },                                                                                                             // 8355
        meridiem : function (hour, minute, isLower) {                                                                  // 8356
            if (hour < 4) {                                                                                            // 8357
                return 'രാത്രി';                                                                                       // 8358
            } else if (hour < 12) {                                                                                    // 8359
                return 'രാവിലെ';                                                                                       // 8360
            } else if (hour < 17) {                                                                                    // 8361
                return 'ഉച്ച കഴിഞ്ഞ്';                                                                                 // 8362
            } else if (hour < 20) {                                                                                    // 8363
                return 'വൈകുന്നേരം';                                                                                   // 8364
            } else {                                                                                                   // 8365
                return 'രാത്രി';                                                                                       // 8366
            }                                                                                                          // 8367
        }                                                                                                              // 8368
    });                                                                                                                // 8369
                                                                                                                       // 8370
    //! moment.js locale configuration                                                                                 // 8371
    //! locale : Marathi (mr)                                                                                          // 8372
    //! author : Harshad Kale : https://github.com/kalehv                                                              // 8373
    //! author : Vivek Athalye : https://github.com/vnathalye                                                          // 8374
                                                                                                                       // 8375
    var mr__symbolMap = {                                                                                              // 8376
        '1': '१',                                                                                                      // 8377
        '2': '२',                                                                                                      // 8378
        '3': '३',                                                                                                      // 8379
        '4': '४',                                                                                                      // 8380
        '5': '५',                                                                                                      // 8381
        '6': '६',                                                                                                      // 8382
        '7': '७',                                                                                                      // 8383
        '8': '८',                                                                                                      // 8384
        '9': '९',                                                                                                      // 8385
        '0': '०'                                                                                                       // 8386
    },                                                                                                                 // 8387
    mr__numberMap = {                                                                                                  // 8388
        '१': '1',                                                                                                      // 8389
        '२': '2',                                                                                                      // 8390
        '३': '3',                                                                                                      // 8391
        '४': '4',                                                                                                      // 8392
        '५': '5',                                                                                                      // 8393
        '६': '6',                                                                                                      // 8394
        '७': '7',                                                                                                      // 8395
        '८': '8',                                                                                                      // 8396
        '९': '9',                                                                                                      // 8397
        '०': '0'                                                                                                       // 8398
    };                                                                                                                 // 8399
                                                                                                                       // 8400
    function relativeTimeMr(number, withoutSuffix, string, isFuture)                                                   // 8401
    {                                                                                                                  // 8402
        var output = '';                                                                                               // 8403
        if (withoutSuffix) {                                                                                           // 8404
            switch (string) {                                                                                          // 8405
                case 's': output = 'काही सेकंद'; break;                                                                // 8406
                case 'm': output = 'एक मिनिट'; break;                                                                  // 8407
                case 'mm': output = '%d मिनिटे'; break;                                                                // 8408
                case 'h': output = 'एक तास'; break;                                                                    // 8409
                case 'hh': output = '%d तास'; break;                                                                   // 8410
                case 'd': output = 'एक दिवस'; break;                                                                   // 8411
                case 'dd': output = '%d दिवस'; break;                                                                  // 8412
                case 'M': output = 'एक महिना'; break;                                                                  // 8413
                case 'MM': output = '%d महिने'; break;                                                                 // 8414
                case 'y': output = 'एक वर्ष'; break;                                                                   // 8415
                case 'yy': output = '%d वर्षे'; break;                                                                 // 8416
            }                                                                                                          // 8417
        }                                                                                                              // 8418
        else {                                                                                                         // 8419
            switch (string) {                                                                                          // 8420
                case 's': output = 'काही सेकंदां'; break;                                                              // 8421
                case 'm': output = 'एका मिनिटा'; break;                                                                // 8422
                case 'mm': output = '%d मिनिटां'; break;                                                               // 8423
                case 'h': output = 'एका तासा'; break;                                                                  // 8424
                case 'hh': output = '%d तासां'; break;                                                                 // 8425
                case 'd': output = 'एका दिवसा'; break;                                                                 // 8426
                case 'dd': output = '%d दिवसां'; break;                                                                // 8427
                case 'M': output = 'एका महिन्या'; break;                                                               // 8428
                case 'MM': output = '%d महिन्यां'; break;                                                              // 8429
                case 'y': output = 'एका वर्षा'; break;                                                                 // 8430
                case 'yy': output = '%d वर्षां'; break;                                                                // 8431
            }                                                                                                          // 8432
        }                                                                                                              // 8433
        return output.replace(/%d/i, number);                                                                          // 8434
    }                                                                                                                  // 8435
                                                                                                                       // 8436
    var mr = moment__default.defineLocale('mr', {                                                                      // 8437
        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),   // 8438
        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),       // 8439
        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),                                  // 8440
        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),                                                  // 8441
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),                                                                 // 8442
        longDateFormat : {                                                                                             // 8443
            LT : 'A h:mm वाजता',                                                                                       // 8444
            LTS : 'A h:mm:ss वाजता',                                                                                   // 8445
            L : 'DD/MM/YYYY',                                                                                          // 8446
            LL : 'D MMMM YYYY',                                                                                        // 8447
            LLL : 'D MMMM YYYY, A h:mm वाजता',                                                                         // 8448
            LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'                                                                   // 8449
        },                                                                                                             // 8450
        calendar : {                                                                                                   // 8451
            sameDay : '[आज] LT',                                                                                       // 8452
            nextDay : '[उद्या] LT',                                                                                    // 8453
            nextWeek : 'dddd, LT',                                                                                     // 8454
            lastDay : '[काल] LT',                                                                                      // 8455
            lastWeek: '[मागील] dddd, LT',                                                                              // 8456
            sameElse : 'L'                                                                                             // 8457
        },                                                                                                             // 8458
        relativeTime : {                                                                                               // 8459
            future: '%sमध्ये',                                                                                         // 8460
            past: '%sपूर्वी',                                                                                          // 8461
            s: relativeTimeMr,                                                                                         // 8462
            m: relativeTimeMr,                                                                                         // 8463
            mm: relativeTimeMr,                                                                                        // 8464
            h: relativeTimeMr,                                                                                         // 8465
            hh: relativeTimeMr,                                                                                        // 8466
            d: relativeTimeMr,                                                                                         // 8467
            dd: relativeTimeMr,                                                                                        // 8468
            M: relativeTimeMr,                                                                                         // 8469
            MM: relativeTimeMr,                                                                                        // 8470
            y: relativeTimeMr,                                                                                         // 8471
            yy: relativeTimeMr                                                                                         // 8472
        },                                                                                                             // 8473
        preparse: function (string) {                                                                                  // 8474
            return string.replace(/[१२३४५६७८९०]/g, function (match) {                                                  // 8475
                return mr__numberMap[match];                                                                           // 8476
            });                                                                                                        // 8477
        },                                                                                                             // 8478
        postformat: function (string) {                                                                                // 8479
            return string.replace(/\d/g, function (match) {                                                            // 8480
                return mr__symbolMap[match];                                                                           // 8481
            });                                                                                                        // 8482
        },                                                                                                             // 8483
        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,                                                                 // 8484
        meridiemHour : function (hour, meridiem) {                                                                     // 8485
            if (hour === 12) {                                                                                         // 8486
                hour = 0;                                                                                              // 8487
            }                                                                                                          // 8488
            if (meridiem === 'रात्री') {                                                                               // 8489
                return hour < 4 ? hour : hour + 12;                                                                    // 8490
            } else if (meridiem === 'सकाळी') {                                                                         // 8491
                return hour;                                                                                           // 8492
            } else if (meridiem === 'दुपारी') {                                                                        // 8493
                return hour >= 10 ? hour : hour + 12;                                                                  // 8494
            } else if (meridiem === 'सायंकाळी') {                                                                      // 8495
                return hour + 12;                                                                                      // 8496
            }                                                                                                          // 8497
        },                                                                                                             // 8498
        meridiem: function (hour, minute, isLower) {                                                                   // 8499
            if (hour < 4) {                                                                                            // 8500
                return 'रात्री';                                                                                       // 8501
            } else if (hour < 10) {                                                                                    // 8502
                return 'सकाळी';                                                                                        // 8503
            } else if (hour < 17) {                                                                                    // 8504
                return 'दुपारी';                                                                                       // 8505
            } else if (hour < 20) {                                                                                    // 8506
                return 'सायंकाळी';                                                                                     // 8507
            } else {                                                                                                   // 8508
                return 'रात्री';                                                                                       // 8509
            }                                                                                                          // 8510
        },                                                                                                             // 8511
        week : {                                                                                                       // 8512
            dow : 0, // Sunday is the first day of the week.                                                           // 8513
            doy : 6  // The week that contains Jan 1st is the first week of the year.                                  // 8514
        }                                                                                                              // 8515
    });                                                                                                                // 8516
                                                                                                                       // 8517
    //! moment.js locale configuration                                                                                 // 8518
    //! locale : Bahasa Malaysia (ms-MY)                                                                               // 8519
    //! author : Weldan Jamili : https://github.com/weldan                                                             // 8520
                                                                                                                       // 8521
    var ms_my = moment__default.defineLocale('ms-my', {                                                                // 8522
        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),       // 8523
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),                                    // 8524
        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),                                            // 8525
        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),                                                      // 8526
        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),                                                               // 8527
        longDateFormat : {                                                                                             // 8528
            LT : 'HH.mm',                                                                                              // 8529
            LTS : 'HH.mm.ss',                                                                                          // 8530
            L : 'DD/MM/YYYY',                                                                                          // 8531
            LL : 'D MMMM YYYY',                                                                                        // 8532
            LLL : 'D MMMM YYYY [pukul] HH.mm',                                                                         // 8533
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'                                                                   // 8534
        },                                                                                                             // 8535
        meridiemParse: /pagi|tengahari|petang|malam/,                                                                  // 8536
        meridiemHour: function (hour, meridiem) {                                                                      // 8537
            if (hour === 12) {                                                                                         // 8538
                hour = 0;                                                                                              // 8539
            }                                                                                                          // 8540
            if (meridiem === 'pagi') {                                                                                 // 8541
                return hour;                                                                                           // 8542
            } else if (meridiem === 'tengahari') {                                                                     // 8543
                return hour >= 11 ? hour : hour + 12;                                                                  // 8544
            } else if (meridiem === 'petang' || meridiem === 'malam') {                                                // 8545
                return hour + 12;                                                                                      // 8546
            }                                                                                                          // 8547
        },                                                                                                             // 8548
        meridiem : function (hours, minutes, isLower) {                                                                // 8549
            if (hours < 11) {                                                                                          // 8550
                return 'pagi';                                                                                         // 8551
            } else if (hours < 15) {                                                                                   // 8552
                return 'tengahari';                                                                                    // 8553
            } else if (hours < 19) {                                                                                   // 8554
                return 'petang';                                                                                       // 8555
            } else {                                                                                                   // 8556
                return 'malam';                                                                                        // 8557
            }                                                                                                          // 8558
        },                                                                                                             // 8559
        calendar : {                                                                                                   // 8560
            sameDay : '[Hari ini pukul] LT',                                                                           // 8561
            nextDay : '[Esok pukul] LT',                                                                               // 8562
            nextWeek : 'dddd [pukul] LT',                                                                              // 8563
            lastDay : '[Kelmarin pukul] LT',                                                                           // 8564
            lastWeek : 'dddd [lepas pukul] LT',                                                                        // 8565
            sameElse : 'L'                                                                                             // 8566
        },                                                                                                             // 8567
        relativeTime : {                                                                                               // 8568
            future : 'dalam %s',                                                                                       // 8569
            past : '%s yang lepas',                                                                                    // 8570
            s : 'beberapa saat',                                                                                       // 8571
            m : 'seminit',                                                                                             // 8572
            mm : '%d minit',                                                                                           // 8573
            h : 'sejam',                                                                                               // 8574
            hh : '%d jam',                                                                                             // 8575
            d : 'sehari',                                                                                              // 8576
            dd : '%d hari',                                                                                            // 8577
            M : 'sebulan',                                                                                             // 8578
            MM : '%d bulan',                                                                                           // 8579
            y : 'setahun',                                                                                             // 8580
            yy : '%d tahun'                                                                                            // 8581
        },                                                                                                             // 8582
        week : {                                                                                                       // 8583
            dow : 1, // Monday is the first day of the week.                                                           // 8584
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 8585
        }                                                                                                              // 8586
    });                                                                                                                // 8587
                                                                                                                       // 8588
    //! moment.js locale configuration                                                                                 // 8589
    //! locale : Bahasa Malaysia (ms-MY)                                                                               // 8590
    //! author : Weldan Jamili : https://github.com/weldan                                                             // 8591
                                                                                                                       // 8592
    var locale_ms = moment__default.defineLocale('ms', {                                                               // 8593
        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),       // 8594
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),                                    // 8595
        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),                                            // 8596
        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),                                                      // 8597
        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),                                                               // 8598
        longDateFormat : {                                                                                             // 8599
            LT : 'HH.mm',                                                                                              // 8600
            LTS : 'HH.mm.ss',                                                                                          // 8601
            L : 'DD/MM/YYYY',                                                                                          // 8602
            LL : 'D MMMM YYYY',                                                                                        // 8603
            LLL : 'D MMMM YYYY [pukul] HH.mm',                                                                         // 8604
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'                                                                   // 8605
        },                                                                                                             // 8606
        meridiemParse: /pagi|tengahari|petang|malam/,                                                                  // 8607
        meridiemHour: function (hour, meridiem) {                                                                      // 8608
            if (hour === 12) {                                                                                         // 8609
                hour = 0;                                                                                              // 8610
            }                                                                                                          // 8611
            if (meridiem === 'pagi') {                                                                                 // 8612
                return hour;                                                                                           // 8613
            } else if (meridiem === 'tengahari') {                                                                     // 8614
                return hour >= 11 ? hour : hour + 12;                                                                  // 8615
            } else if (meridiem === 'petang' || meridiem === 'malam') {                                                // 8616
                return hour + 12;                                                                                      // 8617
            }                                                                                                          // 8618
        },                                                                                                             // 8619
        meridiem : function (hours, minutes, isLower) {                                                                // 8620
            if (hours < 11) {                                                                                          // 8621
                return 'pagi';                                                                                         // 8622
            } else if (hours < 15) {                                                                                   // 8623
                return 'tengahari';                                                                                    // 8624
            } else if (hours < 19) {                                                                                   // 8625
                return 'petang';                                                                                       // 8626
            } else {                                                                                                   // 8627
                return 'malam';                                                                                        // 8628
            }                                                                                                          // 8629
        },                                                                                                             // 8630
        calendar : {                                                                                                   // 8631
            sameDay : '[Hari ini pukul] LT',                                                                           // 8632
            nextDay : '[Esok pukul] LT',                                                                               // 8633
            nextWeek : 'dddd [pukul] LT',                                                                              // 8634
            lastDay : '[Kelmarin pukul] LT',                                                                           // 8635
            lastWeek : 'dddd [lepas pukul] LT',                                                                        // 8636
            sameElse : 'L'                                                                                             // 8637
        },                                                                                                             // 8638
        relativeTime : {                                                                                               // 8639
            future : 'dalam %s',                                                                                       // 8640
            past : '%s yang lepas',                                                                                    // 8641
            s : 'beberapa saat',                                                                                       // 8642
            m : 'seminit',                                                                                             // 8643
            mm : '%d minit',                                                                                           // 8644
            h : 'sejam',                                                                                               // 8645
            hh : '%d jam',                                                                                             // 8646
            d : 'sehari',                                                                                              // 8647
            dd : '%d hari',                                                                                            // 8648
            M : 'sebulan',                                                                                             // 8649
            MM : '%d bulan',                                                                                           // 8650
            y : 'setahun',                                                                                             // 8651
            yy : '%d tahun'                                                                                            // 8652
        },                                                                                                             // 8653
        week : {                                                                                                       // 8654
            dow : 1, // Monday is the first day of the week.                                                           // 8655
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 8656
        }                                                                                                              // 8657
    });                                                                                                                // 8658
                                                                                                                       // 8659
    //! moment.js locale configuration                                                                                 // 8660
    //! locale : Burmese (my)                                                                                          // 8661
    //! author : Squar team, mysquar.com                                                                               // 8662
                                                                                                                       // 8663
    var my__symbolMap = {                                                                                              // 8664
        '1': '၁',                                                                                                      // 8665
        '2': '၂',                                                                                                      // 8666
        '3': '၃',                                                                                                      // 8667
        '4': '၄',                                                                                                      // 8668
        '5': '၅',                                                                                                      // 8669
        '6': '၆',                                                                                                      // 8670
        '7': '၇',                                                                                                      // 8671
        '8': '၈',                                                                                                      // 8672
        '9': '၉',                                                                                                      // 8673
        '0': '၀'                                                                                                       // 8674
    }, my__numberMap = {                                                                                               // 8675
        '၁': '1',                                                                                                      // 8676
        '၂': '2',                                                                                                      // 8677
        '၃': '3',                                                                                                      // 8678
        '၄': '4',                                                                                                      // 8679
        '၅': '5',                                                                                                      // 8680
        '၆': '6',                                                                                                      // 8681
        '၇': '7',                                                                                                      // 8682
        '၈': '8',                                                                                                      // 8683
        '၉': '9',                                                                                                      // 8684
        '၀': '0'                                                                                                       // 8685
    };                                                                                                                 // 8686
                                                                                                                       // 8687
    var my = moment__default.defineLocale('my', {                                                                      // 8688
        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),                                    // 8690
        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),                                  // 8691
        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),                                                          // 8692
        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),                                                            // 8693
                                                                                                                       // 8694
        longDateFormat: {                                                                                              // 8695
            LT: 'HH:mm',                                                                                               // 8696
            LTS: 'HH:mm:ss',                                                                                           // 8697
            L: 'DD/MM/YYYY',                                                                                           // 8698
            LL: 'D MMMM YYYY',                                                                                         // 8699
            LLL: 'D MMMM YYYY HH:mm',                                                                                  // 8700
            LLLL: 'dddd D MMMM YYYY HH:mm'                                                                             // 8701
        },                                                                                                             // 8702
        calendar: {                                                                                                    // 8703
            sameDay: '[ယနေ.] LT [မှာ]',                                                                                // 8704
            nextDay: '[မနက်ဖြန်] LT [မှာ]',                                                                            // 8705
            nextWeek: 'dddd LT [မှာ]',                                                                                 // 8706
            lastDay: '[မနေ.က] LT [မှာ]',                                                                               // 8707
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',                                                                    // 8708
            sameElse: 'L'                                                                                              // 8709
        },                                                                                                             // 8710
        relativeTime: {                                                                                                // 8711
            future: 'လာမည့် %s မှာ',                                                                                   // 8712
            past: 'လွန်ခဲ့သော %s က',                                                                                   // 8713
            s: 'စက္ကန်.အနည်းငယ်',                                                                                      // 8714
            m: 'တစ်မိနစ်',                                                                                             // 8715
            mm: '%d မိနစ်',                                                                                            // 8716
            h: 'တစ်နာရီ',                                                                                              // 8717
            hh: '%d နာရီ',                                                                                             // 8718
            d: 'တစ်ရက်',                                                                                               // 8719
            dd: '%d ရက်',                                                                                              // 8720
            M: 'တစ်လ',                                                                                                 // 8721
            MM: '%d လ',                                                                                                // 8722
            y: 'တစ်နှစ်',                                                                                              // 8723
            yy: '%d နှစ်'                                                                                              // 8724
        },                                                                                                             // 8725
        preparse: function (string) {                                                                                  // 8726
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {                                                  // 8727
                return my__numberMap[match];                                                                           // 8728
            });                                                                                                        // 8729
        },                                                                                                             // 8730
        postformat: function (string) {                                                                                // 8731
            return string.replace(/\d/g, function (match) {                                                            // 8732
                return my__symbolMap[match];                                                                           // 8733
            });                                                                                                        // 8734
        },                                                                                                             // 8735
        week: {                                                                                                        // 8736
            dow: 1, // Monday is the first day of the week.                                                            // 8737
            doy: 4 // The week that contains Jan 1st is the first week of the year.                                    // 8738
        }                                                                                                              // 8739
    });                                                                                                                // 8740
                                                                                                                       // 8741
    //! moment.js locale configuration                                                                                 // 8742
    //! locale : norwegian bokmål (nb)                                                                                 // 8743
    //! authors : Espen Hovlandsdal : https://github.com/rexxars                                                       // 8744
    //!           Sigurd Gartmann : https://github.com/sigurdga                                                        // 8745
                                                                                                                       // 8746
    var nb = moment__default.defineLocale('nb', {                                                                      // 8747
        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),      // 8748
        monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),                        // 8749
        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),                                    // 8750
        weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),                                                      // 8751
        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),                                                               // 8752
        longDateFormat : {                                                                                             // 8753
            LT : 'HH:mm',                                                                                              // 8754
            LTS : 'HH:mm:ss',                                                                                          // 8755
            L : 'DD.MM.YYYY',                                                                                          // 8756
            LL : 'D. MMMM YYYY',                                                                                       // 8757
            LLL : 'D. MMMM YYYY [kl.] HH:mm',                                                                          // 8758
            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'                                                                     // 8759
        },                                                                                                             // 8760
        calendar : {                                                                                                   // 8761
            sameDay: '[i dag kl.] LT',                                                                                 // 8762
            nextDay: '[i morgen kl.] LT',                                                                              // 8763
            nextWeek: 'dddd [kl.] LT',                                                                                 // 8764
            lastDay: '[i går kl.] LT',                                                                                 // 8765
            lastWeek: '[forrige] dddd [kl.] LT',                                                                       // 8766
            sameElse: 'L'                                                                                              // 8767
        },                                                                                                             // 8768
        relativeTime : {                                                                                               // 8769
            future : 'om %s',                                                                                          // 8770
            past : 'for %s siden',                                                                                     // 8771
            s : 'noen sekunder',                                                                                       // 8772
            m : 'ett minutt',                                                                                          // 8773
            mm : '%d minutter',                                                                                        // 8774
            h : 'en time',                                                                                             // 8775
            hh : '%d timer',                                                                                           // 8776
            d : 'en dag',                                                                                              // 8777
            dd : '%d dager',                                                                                           // 8778
            M : 'en måned',                                                                                            // 8779
            MM : '%d måneder',                                                                                         // 8780
            y : 'ett år',                                                                                              // 8781
            yy : '%d år'                                                                                               // 8782
        },                                                                                                             // 8783
        ordinalParse: /\d{1,2}\./,                                                                                     // 8784
        ordinal : '%d.',                                                                                               // 8785
        week : {                                                                                                       // 8786
            dow : 1, // Monday is the first day of the week.                                                           // 8787
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 8788
        }                                                                                                              // 8789
    });                                                                                                                // 8790
                                                                                                                       // 8791
    //! moment.js locale configuration                                                                                 // 8792
    //! locale : nepali/nepalese                                                                                       // 8793
    //! author : suvash : https://github.com/suvash                                                                    // 8794
                                                                                                                       // 8795
    var ne__symbolMap = {                                                                                              // 8796
        '1': '१',                                                                                                      // 8797
        '2': '२',                                                                                                      // 8798
        '3': '३',                                                                                                      // 8799
        '4': '४',                                                                                                      // 8800
        '5': '५',                                                                                                      // 8801
        '6': '६',                                                                                                      // 8802
        '7': '७',                                                                                                      // 8803
        '8': '८',                                                                                                      // 8804
        '9': '९',                                                                                                      // 8805
        '0': '०'                                                                                                       // 8806
    },                                                                                                                 // 8807
    ne__numberMap = {                                                                                                  // 8808
        '१': '1',                                                                                                      // 8809
        '२': '2',                                                                                                      // 8810
        '३': '3',                                                                                                      // 8811
        '४': '4',                                                                                                      // 8812
        '५': '5',                                                                                                      // 8813
        '६': '6',                                                                                                      // 8814
        '७': '7',                                                                                                      // 8815
        '८': '8',                                                                                                      // 8816
        '९': '9',                                                                                                      // 8817
        '०': '0'                                                                                                       // 8818
    };                                                                                                                 // 8819
                                                                                                                       // 8820
    var ne = moment__default.defineLocale('ne', {                                                                      // 8821
        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),    // 8822
        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),               // 8823
        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),                                 // 8824
        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),                                          // 8825
        weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),                                                          // 8826
        longDateFormat : {                                                                                             // 8827
            LT : 'Aको h:mm बजे',                                                                                       // 8828
            LTS : 'Aको h:mm:ss बजे',                                                                                   // 8829
            L : 'DD/MM/YYYY',                                                                                          // 8830
            LL : 'D MMMM YYYY',                                                                                        // 8831
            LLL : 'D MMMM YYYY, Aको h:mm बजे',                                                                         // 8832
            LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'                                                                   // 8833
        },                                                                                                             // 8834
        preparse: function (string) {                                                                                  // 8835
            return string.replace(/[१२३४५६७८९०]/g, function (match) {                                                  // 8836
                return ne__numberMap[match];                                                                           // 8837
            });                                                                                                        // 8838
        },                                                                                                             // 8839
        postformat: function (string) {                                                                                // 8840
            return string.replace(/\d/g, function (match) {                                                            // 8841
                return ne__symbolMap[match];                                                                           // 8842
            });                                                                                                        // 8843
        },                                                                                                             // 8844
        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,                                                                       // 8845
        meridiemHour : function (hour, meridiem) {                                                                     // 8846
            if (hour === 12) {                                                                                         // 8847
                hour = 0;                                                                                              // 8848
            }                                                                                                          // 8849
            if (meridiem === 'राति') {                                                                                 // 8850
                return hour < 4 ? hour : hour + 12;                                                                    // 8851
            } else if (meridiem === 'बिहान') {                                                                         // 8852
                return hour;                                                                                           // 8853
            } else if (meridiem === 'दिउँसो') {                                                                        // 8854
                return hour >= 10 ? hour : hour + 12;                                                                  // 8855
            } else if (meridiem === 'साँझ') {                                                                          // 8856
                return hour + 12;                                                                                      // 8857
            }                                                                                                          // 8858
        },                                                                                                             // 8859
        meridiem : function (hour, minute, isLower) {                                                                  // 8860
            if (hour < 3) {                                                                                            // 8861
                return 'राति';                                                                                         // 8862
            } else if (hour < 12) {                                                                                    // 8863
                return 'बिहान';                                                                                        // 8864
            } else if (hour < 16) {                                                                                    // 8865
                return 'दिउँसो';                                                                                       // 8866
            } else if (hour < 20) {                                                                                    // 8867
                return 'साँझ';                                                                                         // 8868
            } else {                                                                                                   // 8869
                return 'राति';                                                                                         // 8870
            }                                                                                                          // 8871
        },                                                                                                             // 8872
        calendar : {                                                                                                   // 8873
            sameDay : '[आज] LT',                                                                                       // 8874
            nextDay : '[भोलि] LT',                                                                                     // 8875
            nextWeek : '[आउँदो] dddd[,] LT',                                                                           // 8876
            lastDay : '[हिजो] LT',                                                                                     // 8877
            lastWeek : '[गएको] dddd[,] LT',                                                                            // 8878
            sameElse : 'L'                                                                                             // 8879
        },                                                                                                             // 8880
        relativeTime : {                                                                                               // 8881
            future : '%sमा',                                                                                           // 8882
            past : '%s अगाडि',                                                                                         // 8883
            s : 'केही क्षण',                                                                                           // 8884
            m : 'एक मिनेट',                                                                                            // 8885
            mm : '%d मिनेट',                                                                                           // 8886
            h : 'एक घण्टा',                                                                                            // 8887
            hh : '%d घण्टा',                                                                                           // 8888
            d : 'एक दिन',                                                                                              // 8889
            dd : '%d दिन',                                                                                             // 8890
            M : 'एक महिना',                                                                                            // 8891
            MM : '%d महिना',                                                                                           // 8892
            y : 'एक बर्ष',                                                                                             // 8893
            yy : '%d बर्ष'                                                                                             // 8894
        },                                                                                                             // 8895
        week : {                                                                                                       // 8896
            dow : 0, // Sunday is the first day of the week.                                                           // 8897
            doy : 6  // The week that contains Jan 1st is the first week of the year.                                  // 8898
        }                                                                                                              // 8899
    });                                                                                                                // 8900
                                                                                                                       // 8901
    //! moment.js locale configuration                                                                                 // 8902
    //! locale : dutch (nl)                                                                                            // 8903
    //! author : Joris Röling : https://github.com/jjupiter                                                            // 8904
                                                                                                                       // 8905
    var nl__monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),             // 8906
        nl__monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');                     // 8907
                                                                                                                       // 8908
    var nl = moment__default.defineLocale('nl', {                                                                      // 8909
        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort : function (m, format) {                                                                           // 8911
            if (/-MMM-/.test(format)) {                                                                                // 8912
                return nl__monthsShortWithoutDots[m.month()];                                                          // 8913
            } else {                                                                                                   // 8914
                return nl__monthsShortWithDots[m.month()];                                                             // 8915
            }                                                                                                          // 8916
        },                                                                                                             // 8917
        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),                            // 8918
        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),                                                      // 8919
        weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),                                                               // 8920
        longDateFormat : {                                                                                             // 8921
            LT : 'HH:mm',                                                                                              // 8922
            LTS : 'HH:mm:ss',                                                                                          // 8923
            L : 'DD-MM-YYYY',                                                                                          // 8924
            LL : 'D MMMM YYYY',                                                                                        // 8925
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 8926
            LLLL : 'dddd D MMMM YYYY HH:mm'                                                                            // 8927
        },                                                                                                             // 8928
        calendar : {                                                                                                   // 8929
            sameDay: '[vandaag om] LT',                                                                                // 8930
            nextDay: '[morgen om] LT',                                                                                 // 8931
            nextWeek: 'dddd [om] LT',                                                                                  // 8932
            lastDay: '[gisteren om] LT',                                                                               // 8933
            lastWeek: '[afgelopen] dddd [om] LT',                                                                      // 8934
            sameElse: 'L'                                                                                              // 8935
        },                                                                                                             // 8936
        relativeTime : {                                                                                               // 8937
            future : 'over %s',                                                                                        // 8938
            past : '%s geleden',                                                                                       // 8939
            s : 'een paar seconden',                                                                                   // 8940
            m : 'één minuut',                                                                                          // 8941
            mm : '%d minuten',                                                                                         // 8942
            h : 'één uur',                                                                                             // 8943
            hh : '%d uur',                                                                                             // 8944
            d : 'één dag',                                                                                             // 8945
            dd : '%d dagen',                                                                                           // 8946
            M : 'één maand',                                                                                           // 8947
            MM : '%d maanden',                                                                                         // 8948
            y : 'één jaar',                                                                                            // 8949
            yy : '%d jaar'                                                                                             // 8950
        },                                                                                                             // 8951
        ordinalParse: /\d{1,2}(ste|de)/,                                                                               // 8952
        ordinal : function (number) {                                                                                  // 8953
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');                           // 8954
        },                                                                                                             // 8955
        week : {                                                                                                       // 8956
            dow : 1, // Monday is the first day of the week.                                                           // 8957
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 8958
        }                                                                                                              // 8959
    });                                                                                                                // 8960
                                                                                                                       // 8961
    //! moment.js locale configuration                                                                                 // 8962
    //! locale : norwegian nynorsk (nn)                                                                                // 8963
    //! author : https://github.com/mechuwind                                                                          // 8964
                                                                                                                       // 8965
    var nn = moment__default.defineLocale('nn', {                                                                      // 8966
        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),      // 8967
        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),                                    // 8968
        weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),                                    // 8969
        weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),                                                      // 8970
        weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),                                                               // 8971
        longDateFormat : {                                                                                             // 8972
            LT : 'HH:mm',                                                                                              // 8973
            LTS : 'HH:mm:ss',                                                                                          // 8974
            L : 'DD.MM.YYYY',                                                                                          // 8975
            LL : 'D. MMMM YYYY',                                                                                       // 8976
            LLL : 'D. MMMM YYYY [kl.] H:mm',                                                                           // 8977
            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'                                                                     // 8978
        },                                                                                                             // 8979
        calendar : {                                                                                                   // 8980
            sameDay: '[I dag klokka] LT',                                                                              // 8981
            nextDay: '[I morgon klokka] LT',                                                                           // 8982
            nextWeek: 'dddd [klokka] LT',                                                                              // 8983
            lastDay: '[I går klokka] LT',                                                                              // 8984
            lastWeek: '[Føregåande] dddd [klokka] LT',                                                                 // 8985
            sameElse: 'L'                                                                                              // 8986
        },                                                                                                             // 8987
        relativeTime : {                                                                                               // 8988
            future : 'om %s',                                                                                          // 8989
            past : 'for %s sidan',                                                                                     // 8990
            s : 'nokre sekund',                                                                                        // 8991
            m : 'eit minutt',                                                                                          // 8992
            mm : '%d minutt',                                                                                          // 8993
            h : 'ein time',                                                                                            // 8994
            hh : '%d timar',                                                                                           // 8995
            d : 'ein dag',                                                                                             // 8996
            dd : '%d dagar',                                                                                           // 8997
            M : 'ein månad',                                                                                           // 8998
            MM : '%d månader',                                                                                         // 8999
            y : 'eit år',                                                                                              // 9000
            yy : '%d år'                                                                                               // 9001
        },                                                                                                             // 9002
        ordinalParse: /\d{1,2}\./,                                                                                     // 9003
        ordinal : '%d.',                                                                                               // 9004
        week : {                                                                                                       // 9005
            dow : 1, // Monday is the first day of the week.                                                           // 9006
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 9007
        }                                                                                                              // 9008
    });                                                                                                                // 9009
                                                                                                                       // 9010
    //! moment.js locale configuration                                                                                 // 9011
    //! locale : punjabi india (pa-in)                                                                                 // 9012
    //! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit                                               // 9013
                                                                                                                       // 9014
    var pa_in__symbolMap = {                                                                                           // 9015
        '1': '੧',                                                                                                      // 9016
        '2': '੨',                                                                                                      // 9017
        '3': '੩',                                                                                                      // 9018
        '4': '੪',                                                                                                      // 9019
        '5': '੫',                                                                                                      // 9020
        '6': '੬',                                                                                                      // 9021
        '7': '੭',                                                                                                      // 9022
        '8': '੮',                                                                                                      // 9023
        '9': '੯',                                                                                                      // 9024
        '0': '੦'                                                                                                       // 9025
    },                                                                                                                 // 9026
    pa_in__numberMap = {                                                                                               // 9027
        '੧': '1',                                                                                                      // 9028
        '੨': '2',                                                                                                      // 9029
        '੩': '3',                                                                                                      // 9030
        '੪': '4',                                                                                                      // 9031
        '੫': '5',                                                                                                      // 9032
        '੬': '6',                                                                                                      // 9033
        '੭': '7',                                                                                                      // 9034
        '੮': '8',                                                                                                      // 9035
        '੯': '9',                                                                                                      // 9036
        '੦': '0'                                                                                                       // 9037
    };                                                                                                                 // 9038
                                                                                                                       // 9039
    var pa_in = moment__default.defineLocale('pa-in', {                                                                // 9040
        // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.        // 9041
        months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),                     // 9042
        monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),                // 9043
        weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),                                // 9044
        weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),                                                   // 9045
        weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),                                                     // 9046
        longDateFormat : {                                                                                             // 9047
            LT : 'A h:mm ਵਜੇ',                                                                                         // 9048
            LTS : 'A h:mm:ss ਵਜੇ',                                                                                     // 9049
            L : 'DD/MM/YYYY',                                                                                          // 9050
            LL : 'D MMMM YYYY',                                                                                        // 9051
            LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',                                                                           // 9052
            LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'                                                                     // 9053
        },                                                                                                             // 9054
        calendar : {                                                                                                   // 9055
            sameDay : '[ਅਜ] LT',                                                                                       // 9056
            nextDay : '[ਕਲ] LT',                                                                                       // 9057
            nextWeek : 'dddd, LT',                                                                                     // 9058
            lastDay : '[ਕਲ] LT',                                                                                       // 9059
            lastWeek : '[ਪਿਛਲੇ] dddd, LT',                                                                             // 9060
            sameElse : 'L'                                                                                             // 9061
        },                                                                                                             // 9062
        relativeTime : {                                                                                               // 9063
            future : '%s ਵਿੱਚ',                                                                                        // 9064
            past : '%s ਪਿਛਲੇ',                                                                                         // 9065
            s : 'ਕੁਝ ਸਕਿੰਟ',                                                                                           // 9066
            m : 'ਇਕ ਮਿੰਟ',                                                                                             // 9067
            mm : '%d ਮਿੰਟ',                                                                                            // 9068
            h : 'ਇੱਕ ਘੰਟਾ',                                                                                            // 9069
            hh : '%d ਘੰਟੇ',                                                                                            // 9070
            d : 'ਇੱਕ ਦਿਨ',                                                                                             // 9071
            dd : '%d ਦਿਨ',                                                                                             // 9072
            M : 'ਇੱਕ ਮਹੀਨਾ',                                                                                           // 9073
            MM : '%d ਮਹੀਨੇ',                                                                                           // 9074
            y : 'ਇੱਕ ਸਾਲ',                                                                                             // 9075
            yy : '%d ਸਾਲ'                                                                                              // 9076
        },                                                                                                             // 9077
        preparse: function (string) {                                                                                  // 9078
            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {                                                  // 9079
                return pa_in__numberMap[match];                                                                        // 9080
            });                                                                                                        // 9081
        },                                                                                                             // 9082
        postformat: function (string) {                                                                                // 9083
            return string.replace(/\d/g, function (match) {                                                            // 9084
                return pa_in__symbolMap[match];                                                                        // 9085
            });                                                                                                        // 9086
        },                                                                                                             // 9087
        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists                              // 9088
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.                                    // 9089
        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,                                                                         // 9090
        meridiemHour : function (hour, meridiem) {                                                                     // 9091
            if (hour === 12) {                                                                                         // 9092
                hour = 0;                                                                                              // 9093
            }                                                                                                          // 9094
            if (meridiem === 'ਰਾਤ') {                                                                                  // 9095
                return hour < 4 ? hour : hour + 12;                                                                    // 9096
            } else if (meridiem === 'ਸਵੇਰ') {                                                                          // 9097
                return hour;                                                                                           // 9098
            } else if (meridiem === 'ਦੁਪਹਿਰ') {                                                                        // 9099
                return hour >= 10 ? hour : hour + 12;                                                                  // 9100
            } else if (meridiem === 'ਸ਼ਾਮ') {                                                                          // 9101
                return hour + 12;                                                                                      // 9102
            }                                                                                                          // 9103
        },                                                                                                             // 9104
        meridiem : function (hour, minute, isLower) {                                                                  // 9105
            if (hour < 4) {                                                                                            // 9106
                return 'ਰਾਤ';                                                                                          // 9107
            } else if (hour < 10) {                                                                                    // 9108
                return 'ਸਵੇਰ';                                                                                         // 9109
            } else if (hour < 17) {                                                                                    // 9110
                return 'ਦੁਪਹਿਰ';                                                                                       // 9111
            } else if (hour < 20) {                                                                                    // 9112
                return 'ਸ਼ਾਮ';                                                                                         // 9113
            } else {                                                                                                   // 9114
                return 'ਰਾਤ';                                                                                          // 9115
            }                                                                                                          // 9116
        },                                                                                                             // 9117
        week : {                                                                                                       // 9118
            dow : 0, // Sunday is the first day of the week.                                                           // 9119
            doy : 6  // The week that contains Jan 1st is the first week of the year.                                  // 9120
        }                                                                                                              // 9121
    });                                                                                                                // 9122
                                                                                                                       // 9123
    //! moment.js locale configuration                                                                                 // 9124
    //! locale : polish (pl)                                                                                           // 9125
    //! author : Rafal Hirsz : https://github.com/evoL                                                                 // 9126
                                                                                                                       // 9127
    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
    function pl__plural(n) {                                                                                           // 9130
        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);                                              // 9131
    }                                                                                                                  // 9132
    function pl__translate(number, withoutSuffix, key) {                                                               // 9133
        var result = number + ' ';                                                                                     // 9134
        switch (key) {                                                                                                 // 9135
        case 'm':                                                                                                      // 9136
            return withoutSuffix ? 'minuta' : 'minutę';                                                                // 9137
        case 'mm':                                                                                                     // 9138
            return result + (pl__plural(number) ? 'minuty' : 'minut');                                                 // 9139
        case 'h':                                                                                                      // 9140
            return withoutSuffix  ? 'godzina'  : 'godzinę';                                                            // 9141
        case 'hh':                                                                                                     // 9142
            return result + (pl__plural(number) ? 'godziny' : 'godzin');                                               // 9143
        case 'MM':                                                                                                     // 9144
            return result + (pl__plural(number) ? 'miesiące' : 'miesięcy');                                            // 9145
        case 'yy':                                                                                                     // 9146
            return result + (pl__plural(number) ? 'lata' : 'lat');                                                     // 9147
        }                                                                                                              // 9148
    }                                                                                                                  // 9149
                                                                                                                       // 9150
    var pl = moment__default.defineLocale('pl', {                                                                      // 9151
        months : function (momentToFormat, format) {                                                                   // 9152
            if (format === '') {                                                                                       // 9153
                // Hack: if format empty we know this is used to generate                                              // 9154
                // RegExp by moment. Give then back both valid forms of months                                         // 9155
                // in RegExp ready format.                                                                             // 9156
                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
            } else if (/D MMMM/.test(format)) {                                                                        // 9158
                return monthsSubjective[momentToFormat.month()];                                                       // 9159
            } else {                                                                                                   // 9160
                return monthsNominative[momentToFormat.month()];                                                       // 9161
            }                                                                                                          // 9162
        },                                                                                                             // 9163
        monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),                                    // 9164
        weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),                            // 9165
        weekdaysShort : 'nie_pon_wt_śr_czw_pt_sb'.split('_'),                                                          // 9166
        weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),                                                               // 9167
        longDateFormat : {                                                                                             // 9168
            LT : 'HH:mm',                                                                                              // 9169
            LTS : 'HH:mm:ss',                                                                                          // 9170
            L : 'DD.MM.YYYY',                                                                                          // 9171
            LL : 'D MMMM YYYY',                                                                                        // 9172
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 9173
            LLLL : 'dddd, D MMMM YYYY HH:mm'                                                                           // 9174
        },                                                                                                             // 9175
        calendar : {                                                                                                   // 9176
            sameDay: '[Dziś o] LT',                                                                                    // 9177
            nextDay: '[Jutro o] LT',                                                                                   // 9178
            nextWeek: '[W] dddd [o] LT',                                                                               // 9179
            lastDay: '[Wczoraj o] LT',                                                                                 // 9180
            lastWeek: function () {                                                                                    // 9181
                switch (this.day()) {                                                                                  // 9182
                case 0:                                                                                                // 9183
                    return '[W zeszłą niedzielę o] LT';                                                                // 9184
                case 3:                                                                                                // 9185
                    return '[W zeszłą środę o] LT';                                                                    // 9186
                case 6:                                                                                                // 9187
                    return '[W zeszłą sobotę o] LT';                                                                   // 9188
                default:                                                                                               // 9189
                    return '[W zeszły] dddd [o] LT';                                                                   // 9190
                }                                                                                                      // 9191
            },                                                                                                         // 9192
            sameElse: 'L'                                                                                              // 9193
        },                                                                                                             // 9194
        relativeTime : {                                                                                               // 9195
            future : 'za %s',                                                                                          // 9196
            past : '%s temu',                                                                                          // 9197
            s : 'kilka sekund',                                                                                        // 9198
            m : pl__translate,                                                                                         // 9199
            mm : pl__translate,                                                                                        // 9200
            h : pl__translate,                                                                                         // 9201
            hh : pl__translate,                                                                                        // 9202
            d : '1 dzień',                                                                                             // 9203
            dd : '%d dni',                                                                                             // 9204
            M : 'miesiąc',                                                                                             // 9205
            MM : pl__translate,                                                                                        // 9206
            y : 'rok',                                                                                                 // 9207
            yy : pl__translate                                                                                         // 9208
        },                                                                                                             // 9209
        ordinalParse: /\d{1,2}\./,                                                                                     // 9210
        ordinal : '%d.',                                                                                               // 9211
        week : {                                                                                                       // 9212
            dow : 1, // Monday is the first day of the week.                                                           // 9213
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 9214
        }                                                                                                              // 9215
    });                                                                                                                // 9216
                                                                                                                       // 9217
    //! moment.js locale configuration                                                                                 // 9218
    //! locale : brazilian portuguese (pt-br)                                                                          // 9219
    //! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira                                        // 9220
                                                                                                                       // 9221
    var pt_br = moment__default.defineLocale('pt-br', {                                                                // 9222
        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),                                    // 9224
        weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),        // 9225
        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),                                                      // 9226
        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),                                                             // 9227
        longDateFormat : {                                                                                             // 9228
            LT : 'HH:mm',                                                                                              // 9229
            LTS : 'HH:mm:ss',                                                                                          // 9230
            L : 'DD/MM/YYYY',                                                                                          // 9231
            LL : 'D [de] MMMM [de] YYYY',                                                                              // 9232
            LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',                                                                  // 9233
            LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'                                                            // 9234
        },                                                                                                             // 9235
        calendar : {                                                                                                   // 9236
            sameDay: '[Hoje às] LT',                                                                                   // 9237
            nextDay: '[Amanhã às] LT',                                                                                 // 9238
            nextWeek: 'dddd [às] LT',                                                                                  // 9239
            lastDay: '[Ontem às] LT',                                                                                  // 9240
            lastWeek: function () {                                                                                    // 9241
                return (this.day() === 0 || this.day() === 6) ?                                                        // 9242
                    '[Último] dddd [às] LT' : // Saturday + Sunday                                                     // 9243
                    '[Última] dddd [às] LT'; // Monday - Friday                                                        // 9244
            },                                                                                                         // 9245
            sameElse: 'L'                                                                                              // 9246
        },                                                                                                             // 9247
        relativeTime : {                                                                                               // 9248
            future : 'em %s',                                                                                          // 9249
            past : '%s atrás',                                                                                         // 9250
            s : 'poucos segundos',                                                                                     // 9251
            m : 'um minuto',                                                                                           // 9252
            mm : '%d minutos',                                                                                         // 9253
            h : 'uma hora',                                                                                            // 9254
            hh : '%d horas',                                                                                           // 9255
            d : 'um dia',                                                                                              // 9256
            dd : '%d dias',                                                                                            // 9257
            M : 'um mês',                                                                                              // 9258
            MM : '%d meses',                                                                                           // 9259
            y : 'um ano',                                                                                              // 9260
            yy : '%d anos'                                                                                             // 9261
        },                                                                                                             // 9262
        ordinalParse: /\d{1,2}º/,                                                                                      // 9263
        ordinal : '%dº'                                                                                                // 9264
    });                                                                                                                // 9265
                                                                                                                       // 9266
    //! moment.js locale configuration                                                                                 // 9267
    //! locale : portuguese (pt)                                                                                       // 9268
    //! author : Jefferson : https://github.com/jalex79                                                                // 9269
                                                                                                                       // 9270
    var pt = moment__default.defineLocale('pt', {                                                                      // 9271
        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),                                    // 9273
        weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),        // 9274
        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),                                                      // 9275
        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),                                                             // 9276
        longDateFormat : {                                                                                             // 9277
            LT : 'HH:mm',                                                                                              // 9278
            LTS : 'HH:mm:ss',                                                                                          // 9279
            L : 'DD/MM/YYYY',                                                                                          // 9280
            LL : 'D [de] MMMM [de] YYYY',                                                                              // 9281
            LLL : 'D [de] MMMM [de] YYYY HH:mm',                                                                       // 9282
            LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'                                                                 // 9283
        },                                                                                                             // 9284
        calendar : {                                                                                                   // 9285
            sameDay: '[Hoje às] LT',                                                                                   // 9286
            nextDay: '[Amanhã às] LT',                                                                                 // 9287
            nextWeek: 'dddd [às] LT',                                                                                  // 9288
            lastDay: '[Ontem às] LT',                                                                                  // 9289
            lastWeek: function () {                                                                                    // 9290
                return (this.day() === 0 || this.day() === 6) ?                                                        // 9291
                    '[Último] dddd [às] LT' : // Saturday + Sunday                                                     // 9292
                    '[Última] dddd [às] LT'; // Monday - Friday                                                        // 9293
            },                                                                                                         // 9294
            sameElse: 'L'                                                                                              // 9295
        },                                                                                                             // 9296
        relativeTime : {                                                                                               // 9297
            future : 'em %s',                                                                                          // 9298
            past : 'há %s',                                                                                            // 9299
            s : 'segundos',                                                                                            // 9300
            m : 'um minuto',                                                                                           // 9301
            mm : '%d minutos',                                                                                         // 9302
            h : 'uma hora',                                                                                            // 9303
            hh : '%d horas',                                                                                           // 9304
            d : 'um dia',                                                                                              // 9305
            dd : '%d dias',                                                                                            // 9306
            M : 'um mês',                                                                                              // 9307
            MM : '%d meses',                                                                                           // 9308
            y : 'um ano',                                                                                              // 9309
            yy : '%d anos'                                                                                             // 9310
        },                                                                                                             // 9311
        ordinalParse: /\d{1,2}º/,                                                                                      // 9312
        ordinal : '%dº',                                                                                               // 9313
        week : {                                                                                                       // 9314
            dow : 1, // Monday is the first day of the week.                                                           // 9315
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 9316
        }                                                                                                              // 9317
    });                                                                                                                // 9318
                                                                                                                       // 9319
    //! moment.js locale configuration                                                                                 // 9320
    //! locale : romanian (ro)                                                                                         // 9321
    //! author : Vlad Gurdiga : https://github.com/gurdiga                                                             // 9322
    //! author : Valentin Agachi : https://github.com/avaly                                                            // 9323
                                                                                                                       // 9324
    function ro__relativeTimeWithPlural(number, withoutSuffix, key) {                                                  // 9325
        var format = {                                                                                                 // 9326
                'mm': 'minute',                                                                                        // 9327
                'hh': 'ore',                                                                                           // 9328
                'dd': 'zile',                                                                                          // 9329
                'MM': 'luni',                                                                                          // 9330
                'yy': 'ani'                                                                                            // 9331
            },                                                                                                         // 9332
            separator = ' ';                                                                                           // 9333
        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {                                             // 9334
            separator = ' de ';                                                                                        // 9335
        }                                                                                                              // 9336
        return number + separator + format[key];                                                                       // 9337
    }                                                                                                                  // 9338
                                                                                                                       // 9339
    var ro = moment__default.defineLocale('ro', {                                                                      // 9340
        months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
        monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),                      // 9342
        weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),                                       // 9343
        weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),                                                      // 9344
        weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),                                                               // 9345
        longDateFormat : {                                                                                             // 9346
            LT : 'H:mm',                                                                                               // 9347
            LTS : 'H:mm:ss',                                                                                           // 9348
            L : 'DD.MM.YYYY',                                                                                          // 9349
            LL : 'D MMMM YYYY',                                                                                        // 9350
            LLL : 'D MMMM YYYY H:mm',                                                                                  // 9351
            LLLL : 'dddd, D MMMM YYYY H:mm'                                                                            // 9352
        },                                                                                                             // 9353
        calendar : {                                                                                                   // 9354
            sameDay: '[azi la] LT',                                                                                    // 9355
            nextDay: '[mâine la] LT',                                                                                  // 9356
            nextWeek: 'dddd [la] LT',                                                                                  // 9357
            lastDay: '[ieri la] LT',                                                                                   // 9358
            lastWeek: '[fosta] dddd [la] LT',                                                                          // 9359
            sameElse: 'L'                                                                                              // 9360
        },                                                                                                             // 9361
        relativeTime : {                                                                                               // 9362
            future : 'peste %s',                                                                                       // 9363
            past : '%s în urmă',                                                                                       // 9364
            s : 'câteva secunde',                                                                                      // 9365
            m : 'un minut',                                                                                            // 9366
            mm : ro__relativeTimeWithPlural,                                                                           // 9367
            h : 'o oră',                                                                                               // 9368
            hh : ro__relativeTimeWithPlural,                                                                           // 9369
            d : 'o zi',                                                                                                // 9370
            dd : ro__relativeTimeWithPlural,                                                                           // 9371
            M : 'o lună',                                                                                              // 9372
            MM : ro__relativeTimeWithPlural,                                                                           // 9373
            y : 'un an',                                                                                               // 9374
            yy : ro__relativeTimeWithPlural                                                                            // 9375
        },                                                                                                             // 9376
        week : {                                                                                                       // 9377
            dow : 1, // Monday is the first day of the week.                                                           // 9378
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 9379
        }                                                                                                              // 9380
    });                                                                                                                // 9381
                                                                                                                       // 9382
    //! moment.js locale configuration                                                                                 // 9383
    //! locale : russian (ru)                                                                                          // 9384
    //! author : Viktorminator : https://github.com/Viktorminator                                                      // 9385
    //! Author : Menelion Elensúle : https://github.com/Oire                                                           // 9386
    //! author : Коренберг Марк : https://github.com/socketpair                                                        // 9387
                                                                                                                       // 9388
    function ru__plural(word, num) {                                                                                   // 9389
        var forms = word.split('_');                                                                                   // 9390
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }                                                                                                                  // 9392
    function ru__relativeTimeWithPlural(number, withoutSuffix, key) {                                                  // 9393
        var format = {                                                                                                 // 9394
            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',                                       // 9395
            'hh': 'час_часа_часов',                                                                                    // 9396
            'dd': 'день_дня_дней',                                                                                     // 9397
            'MM': 'месяц_месяца_месяцев',                                                                              // 9398
            'yy': 'год_года_лет'                                                                                       // 9399
        };                                                                                                             // 9400
        if (key === 'm') {                                                                                             // 9401
            return withoutSuffix ? 'минута' : 'минуту';                                                                // 9402
        }                                                                                                              // 9403
        else {                                                                                                         // 9404
            return number + ' ' + ru__plural(format[key], +number);                                                    // 9405
        }                                                                                                              // 9406
    }                                                                                                                  // 9407
    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];
                                                                                                                       // 9409
    // http://new.gramota.ru/spravka/rules/139-prop : § 103                                                            // 9410
    var ru = moment__default.defineLocale('ru', {                                                                      // 9411
        months : {                                                                                                     // 9412
            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),    // 9413
            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')   // 9414
        },                                                                                                             // 9415
        monthsShort : {                                                                                                // 9416
            format: 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_'),                                    // 9417
            standalone: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_')                                // 9418
        },                                                                                                             // 9419
        weekdays : {                                                                                                   // 9420
            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),                    // 9421
            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),                        // 9422
            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/                                                 // 9423
        },                                                                                                             // 9424
        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),                                                             // 9425
        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),                                                               // 9426
        monthsParse : monthsParse,                                                                                     // 9427
        longMonthsParse : monthsParse,                                                                                 // 9428
        shortMonthsParse : monthsParse,                                                                                // 9429
        longDateFormat : {                                                                                             // 9430
            LT : 'HH:mm',                                                                                              // 9431
            LTS : 'HH:mm:ss',                                                                                          // 9432
            L : 'DD.MM.YYYY',                                                                                          // 9433
            LL : 'D MMMM YYYY г.',                                                                                     // 9434
            LLL : 'D MMMM YYYY г., HH:mm',                                                                             // 9435
            LLLL : 'dddd, D MMMM YYYY г., HH:mm'                                                                       // 9436
        },                                                                                                             // 9437
        calendar : {                                                                                                   // 9438
            sameDay: '[Сегодня в] LT',                                                                                 // 9439
            nextDay: '[Завтра в] LT',                                                                                  // 9440
            lastDay: '[Вчера в] LT',                                                                                   // 9441
            nextWeek: function (now) {                                                                                 // 9442
                if (now.week() !== this.week()) {                                                                      // 9443
                    switch (this.day()) {                                                                              // 9444
                    case 0:                                                                                            // 9445
                        return '[В следующее] dddd [в] LT';                                                            // 9446
                    case 1:                                                                                            // 9447
                    case 2:                                                                                            // 9448
                    case 4:                                                                                            // 9449
                        return '[В следующий] dddd [в] LT';                                                            // 9450
                    case 3:                                                                                            // 9451
                    case 5:                                                                                            // 9452
                    case 6:                                                                                            // 9453
                        return '[В следующую] dddd [в] LT';                                                            // 9454
                    }                                                                                                  // 9455
                } else {                                                                                               // 9456
                    if (this.day() === 2) {                                                                            // 9457
                        return '[Во] dddd [в] LT';                                                                     // 9458
                    } else {                                                                                           // 9459
                        return '[В] dddd [в] LT';                                                                      // 9460
                    }                                                                                                  // 9461
                }                                                                                                      // 9462
            },                                                                                                         // 9463
            lastWeek: function (now) {                                                                                 // 9464
                if (now.week() !== this.week()) {                                                                      // 9465
                    switch (this.day()) {                                                                              // 9466
                    case 0:                                                                                            // 9467
                        return '[В прошлое] dddd [в] LT';                                                              // 9468
                    case 1:                                                                                            // 9469
                    case 2:                                                                                            // 9470
                    case 4:                                                                                            // 9471
                        return '[В прошлый] dddd [в] LT';                                                              // 9472
                    case 3:                                                                                            // 9473
                    case 5:                                                                                            // 9474
                    case 6:                                                                                            // 9475
                        return '[В прошлую] dddd [в] LT';                                                              // 9476
                    }                                                                                                  // 9477
                } else {                                                                                               // 9478
                    if (this.day() === 2) {                                                                            // 9479
                        return '[Во] dddd [в] LT';                                                                     // 9480
                    } else {                                                                                           // 9481
                        return '[В] dddd [в] LT';                                                                      // 9482
                    }                                                                                                  // 9483
                }                                                                                                      // 9484
            },                                                                                                         // 9485
            sameElse: 'L'                                                                                              // 9486
        },                                                                                                             // 9487
        relativeTime : {                                                                                               // 9488
            future : 'через %s',                                                                                       // 9489
            past : '%s назад',                                                                                         // 9490
            s : 'несколько секунд',                                                                                    // 9491
            m : ru__relativeTimeWithPlural,                                                                            // 9492
            mm : ru__relativeTimeWithPlural,                                                                           // 9493
            h : 'час',                                                                                                 // 9494
            hh : ru__relativeTimeWithPlural,                                                                           // 9495
            d : 'день',                                                                                                // 9496
            dd : ru__relativeTimeWithPlural,                                                                           // 9497
            M : 'месяц',                                                                                               // 9498
            MM : ru__relativeTimeWithPlural,                                                                           // 9499
            y : 'год',                                                                                                 // 9500
            yy : ru__relativeTimeWithPlural                                                                            // 9501
        },                                                                                                             // 9502
        meridiemParse: /ночи|утра|дня|вечера/i,                                                                        // 9503
        isPM : function (input) {                                                                                      // 9504
            return /^(дня|вечера)$/.test(input);                                                                       // 9505
        },                                                                                                             // 9506
        meridiem : function (hour, minute, isLower) {                                                                  // 9507
            if (hour < 4) {                                                                                            // 9508
                return 'ночи';                                                                                         // 9509
            } else if (hour < 12) {                                                                                    // 9510
                return 'утра';                                                                                         // 9511
            } else if (hour < 17) {                                                                                    // 9512
                return 'дня';                                                                                          // 9513
            } else {                                                                                                   // 9514
                return 'вечера';                                                                                       // 9515
            }                                                                                                          // 9516
        },                                                                                                             // 9517
        ordinalParse: /\d{1,2}-(й|го|я)/,                                                                              // 9518
        ordinal: function (number, period) {                                                                           // 9519
            switch (period) {                                                                                          // 9520
            case 'M':                                                                                                  // 9521
            case 'd':                                                                                                  // 9522
            case 'DDD':                                                                                                // 9523
                return number + '-й';                                                                                  // 9524
            case 'D':                                                                                                  // 9525
                return number + '-го';                                                                                 // 9526
            case 'w':                                                                                                  // 9527
            case 'W':                                                                                                  // 9528
                return number + '-я';                                                                                  // 9529
            default:                                                                                                   // 9530
                return number;                                                                                         // 9531
            }                                                                                                          // 9532
        },                                                                                                             // 9533
        week : {                                                                                                       // 9534
            dow : 1, // Monday is the first day of the week.                                                           // 9535
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 9536
        }                                                                                                              // 9537
    });                                                                                                                // 9538
                                                                                                                       // 9539
    //! moment.js locale configuration                                                                                 // 9540
    //! locale : Northern Sami (se)                                                                                    // 9541
    //! authors : Bård Rolstad Henriksen : https://github.com/karamell                                                 // 9542
                                                                                                                       // 9543
                                                                                                                       // 9544
    var se = moment__default.defineLocale('se', {                                                                      // 9545
        months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
        monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),                         // 9547
        weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),            // 9548
        weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),                                                 // 9549
        weekdaysMin : 's_v_m_g_d_b_L'.split('_'),                                                                      // 9550
        longDateFormat : {                                                                                             // 9551
            LT : 'HH:mm',                                                                                              // 9552
            LTS : 'HH:mm:ss',                                                                                          // 9553
            L : 'DD.MM.YYYY',                                                                                          // 9554
            LL : 'MMMM D. [b.] YYYY',                                                                                  // 9555
            LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',                                                                     // 9556
            LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'                                                               // 9557
        },                                                                                                             // 9558
        calendar : {                                                                                                   // 9559
            sameDay: '[otne ti] LT',                                                                                   // 9560
            nextDay: '[ihttin ti] LT',                                                                                 // 9561
            nextWeek: 'dddd [ti] LT',                                                                                  // 9562
            lastDay: '[ikte ti] LT',                                                                                   // 9563
            lastWeek: '[ovddit] dddd [ti] LT',                                                                         // 9564
            sameElse: 'L'                                                                                              // 9565
        },                                                                                                             // 9566
        relativeTime : {                                                                                               // 9567
            future : '%s geažes',                                                                                      // 9568
            past : 'maŋit %s',                                                                                         // 9569
            s : 'moadde sekunddat',                                                                                    // 9570
            m : 'okta minuhta',                                                                                        // 9571
            mm : '%d minuhtat',                                                                                        // 9572
            h : 'okta diimmu',                                                                                         // 9573
            hh : '%d diimmut',                                                                                         // 9574
            d : 'okta beaivi',                                                                                         // 9575
            dd : '%d beaivvit',                                                                                        // 9576
            M : 'okta mánnu',                                                                                          // 9577
            MM : '%d mánut',                                                                                           // 9578
            y : 'okta jahki',                                                                                          // 9579
            yy : '%d jagit'                                                                                            // 9580
        },                                                                                                             // 9581
        ordinalParse: /\d{1,2}\./,                                                                                     // 9582
        ordinal : '%d.',                                                                                               // 9583
        week : {                                                                                                       // 9584
            dow : 1, // Monday is the first day of the week.                                                           // 9585
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 9586
        }                                                                                                              // 9587
    });                                                                                                                // 9588
                                                                                                                       // 9589
    //! moment.js locale configuration                                                                                 // 9590
    //! locale : Sinhalese (si)                                                                                        // 9591
    //! author : Sampath Sitinamaluwa : https://github.com/sampathsris                                                 // 9592
                                                                                                                       // 9593
    /*jshint -W100*/                                                                                                   // 9594
    var si = moment__default.defineLocale('si', {                                                                      // 9595
        months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
        monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),                              // 9597
        weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),                         // 9598
        weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),                                                    // 9599
        weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),                                                                 // 9600
        longDateFormat : {                                                                                             // 9601
            LT : 'a h:mm',                                                                                             // 9602
            LTS : 'a h:mm:ss',                                                                                         // 9603
            L : 'YYYY/MM/DD',                                                                                          // 9604
            LL : 'YYYY MMMM D',                                                                                        // 9605
            LLL : 'YYYY MMMM D, a h:mm',                                                                               // 9606
            LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'                                                                // 9607
        },                                                                                                             // 9608
        calendar : {                                                                                                   // 9609
            sameDay : '[අද] LT[ට]',                                                                                    // 9610
            nextDay : '[හෙට] LT[ට]',                                                                                   // 9611
            nextWeek : 'dddd LT[ට]',                                                                                   // 9612
            lastDay : '[ඊයේ] LT[ට]',                                                                                   // 9613
            lastWeek : '[පසුගිය] dddd LT[ට]',                                                                          // 9614
            sameElse : 'L'                                                                                             // 9615
        },                                                                                                             // 9616
        relativeTime : {                                                                                               // 9617
            future : '%sකින්',                                                                                         // 9618
            past : '%sකට පෙර',                                                                                         // 9619
            s : 'තත්පර කිහිපය',                                                                                        // 9620
            m : 'මිනිත්තුව',                                                                                           // 9621
            mm : 'මිනිත්තු %d',                                                                                        // 9622
            h : 'පැය',                                                                                                 // 9623
            hh : 'පැය %d',                                                                                             // 9624
            d : 'දිනය',                                                                                                // 9625
            dd : 'දින %d',                                                                                             // 9626
            M : 'මාසය',                                                                                                // 9627
            MM : 'මාස %d',                                                                                             // 9628
            y : 'වසර',                                                                                                 // 9629
            yy : 'වසර %d'                                                                                              // 9630
        },                                                                                                             // 9631
        ordinalParse: /\d{1,2} වැනි/,                                                                                  // 9632
        ordinal : function (number) {                                                                                  // 9633
            return number + ' වැනි';                                                                                   // 9634
        },                                                                                                             // 9635
        meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,                                                                   // 9636
        isPM : function (input) {                                                                                      // 9637
            return input === 'ප.ව.' || input === 'පස් වරු';                                                            // 9638
        },                                                                                                             // 9639
        meridiem : function (hours, minutes, isLower) {                                                                // 9640
            if (hours > 11) {                                                                                          // 9641
                return isLower ? 'ප.ව.' : 'පස් වරු';                                                                   // 9642
            } else {                                                                                                   // 9643
                return isLower ? 'පෙ.ව.' : 'පෙර වරු';                                                                  // 9644
            }                                                                                                          // 9645
        }                                                                                                              // 9646
    });                                                                                                                // 9647
                                                                                                                       // 9648
    //! moment.js locale configuration                                                                                 // 9649
    //! locale : slovak (sk)                                                                                           // 9650
    //! author : Martin Minka : https://github.com/k2s                                                                 // 9651
    //! based on work of petrbela : https://github.com/petrbela                                                        // 9652
                                                                                                                       // 9653
    var sk__months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),   // 9654
        sk__monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');                                // 9655
    function sk__plural(n) {                                                                                           // 9656
        return (n > 1) && (n < 5);                                                                                     // 9657
    }                                                                                                                  // 9658
    function sk__translate(number, withoutSuffix, key, isFuture) {                                                     // 9659
        var result = number + ' ';                                                                                     // 9660
        switch (key) {                                                                                                 // 9661
        case 's':  // a few seconds / in a few seconds / a few seconds ago                                             // 9662
            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';                                       // 9663
        case 'm':  // a minute / in a minute / a minute ago                                                            // 9664
            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');                                       // 9665
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago                                                         // 9666
            if (withoutSuffix || isFuture) {                                                                           // 9667
                return result + (sk__plural(number) ? 'minúty' : 'minút');                                             // 9668
            } else {                                                                                                   // 9669
                return result + 'minútami';                                                                            // 9670
            }                                                                                                          // 9671
            break;                                                                                                     // 9672
        case 'h':  // an hour / in an hour / an hour ago                                                               // 9673
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');                                       // 9674
        case 'hh': // 9 hours / in 9 hours / 9 hours ago                                                               // 9675
            if (withoutSuffix || isFuture) {                                                                           // 9676
                return result + (sk__plural(number) ? 'hodiny' : 'hodín');                                             // 9677
            } else {                                                                                                   // 9678
                return result + 'hodinami';                                                                            // 9679
            }                                                                                                          // 9680
            break;                                                                                                     // 9681
        case 'd':  // a day / in a day / a day ago                                                                     // 9682
            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';                                                       // 9683
        case 'dd': // 9 days / in 9 days / 9 days ago                                                                  // 9684
            if (withoutSuffix || isFuture) {                                                                           // 9685
                return result + (sk__plural(number) ? 'dni' : 'dní');                                                  // 9686
            } else {                                                                                                   // 9687
                return result + 'dňami';                                                                               // 9688
            }                                                                                                          // 9689
            break;                                                                                                     // 9690
        case 'M':  // a month / in a month / a month ago                                                               // 9691
            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';                                                // 9692
        case 'MM': // 9 months / in 9 months / 9 months ago                                                            // 9693
            if (withoutSuffix || isFuture) {                                                                           // 9694
                return result + (sk__plural(number) ? 'mesiace' : 'mesiacov');                                         // 9695
            } else {                                                                                                   // 9696
                return result + 'mesiacmi';                                                                            // 9697
            }                                                                                                          // 9698
            break;                                                                                                     // 9699
        case 'y':  // a year / in a year / a year ago                                                                  // 9700
            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';                                                      // 9701
        case 'yy': // 9 years / in 9 years / 9 years ago                                                               // 9702
            if (withoutSuffix || isFuture) {                                                                           // 9703
                return result + (sk__plural(number) ? 'roky' : 'rokov');                                               // 9704
            } else {                                                                                                   // 9705
                return result + 'rokmi';                                                                               // 9706
            }                                                                                                          // 9707
            break;                                                                                                     // 9708
        }                                                                                                              // 9709
    }                                                                                                                  // 9710
                                                                                                                       // 9711
    var sk = moment__default.defineLocale('sk', {                                                                      // 9712
        months : sk__months,                                                                                           // 9713
        monthsShort : sk__monthsShort,                                                                                 // 9714
        weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),                                   // 9715
        weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),                                                             // 9716
        weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),                                                               // 9717
        longDateFormat : {                                                                                             // 9718
            LT: 'H:mm',                                                                                                // 9719
            LTS : 'H:mm:ss',                                                                                           // 9720
            L : 'DD.MM.YYYY',                                                                                          // 9721
            LL : 'D. MMMM YYYY',                                                                                       // 9722
            LLL : 'D. MMMM YYYY H:mm',                                                                                 // 9723
            LLLL : 'dddd D. MMMM YYYY H:mm'                                                                            // 9724
        },                                                                                                             // 9725
        calendar : {                                                                                                   // 9726
            sameDay: '[dnes o] LT',                                                                                    // 9727
            nextDay: '[zajtra o] LT',                                                                                  // 9728
            nextWeek: function () {                                                                                    // 9729
                switch (this.day()) {                                                                                  // 9730
                case 0:                                                                                                // 9731
                    return '[v nedeľu o] LT';                                                                          // 9732
                case 1:                                                                                                // 9733
                case 2:                                                                                                // 9734
                    return '[v] dddd [o] LT';                                                                          // 9735
                case 3:                                                                                                // 9736
                    return '[v stredu o] LT';                                                                          // 9737
                case 4:                                                                                                // 9738
                    return '[vo štvrtok o] LT';                                                                        // 9739
                case 5:                                                                                                // 9740
                    return '[v piatok o] LT';                                                                          // 9741
                case 6:                                                                                                // 9742
                    return '[v sobotu o] LT';                                                                          // 9743
                }                                                                                                      // 9744
            },                                                                                                         // 9745
            lastDay: '[včera o] LT',                                                                                   // 9746
            lastWeek: function () {                                                                                    // 9747
                switch (this.day()) {                                                                                  // 9748
                case 0:                                                                                                // 9749
                    return '[minulú nedeľu o] LT';                                                                     // 9750
                case 1:                                                                                                // 9751
                case 2:                                                                                                // 9752
                    return '[minulý] dddd [o] LT';                                                                     // 9753
                case 3:                                                                                                // 9754
                    return '[minulú stredu o] LT';                                                                     // 9755
                case 4:                                                                                                // 9756
                case 5:                                                                                                // 9757
                    return '[minulý] dddd [o] LT';                                                                     // 9758
                case 6:                                                                                                // 9759
                    return '[minulú sobotu o] LT';                                                                     // 9760
                }                                                                                                      // 9761
            },                                                                                                         // 9762
            sameElse: 'L'                                                                                              // 9763
        },                                                                                                             // 9764
        relativeTime : {                                                                                               // 9765
            future : 'za %s',                                                                                          // 9766
            past : 'pred %s',                                                                                          // 9767
            s : sk__translate,                                                                                         // 9768
            m : sk__translate,                                                                                         // 9769
            mm : sk__translate,                                                                                        // 9770
            h : sk__translate,                                                                                         // 9771
            hh : sk__translate,                                                                                        // 9772
            d : sk__translate,                                                                                         // 9773
            dd : sk__translate,                                                                                        // 9774
            M : sk__translate,                                                                                         // 9775
            MM : sk__translate,                                                                                        // 9776
            y : sk__translate,                                                                                         // 9777
            yy : sk__translate                                                                                         // 9778
        },                                                                                                             // 9779
        ordinalParse: /\d{1,2}\./,                                                                                     // 9780
        ordinal : '%d.',                                                                                               // 9781
        week : {                                                                                                       // 9782
            dow : 1, // Monday is the first day of the week.                                                           // 9783
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 9784
        }                                                                                                              // 9785
    });                                                                                                                // 9786
                                                                                                                       // 9787
    //! moment.js locale configuration                                                                                 // 9788
    //! locale : slovenian (sl)                                                                                        // 9789
    //! author : Robert Sedovšek : https://github.com/sedovsek                                                         // 9790
                                                                                                                       // 9791
    function sl__processRelativeTime(number, withoutSuffix, key, isFuture) {                                           // 9792
        var result = number + ' ';                                                                                     // 9793
        switch (key) {                                                                                                 // 9794
        case 's':                                                                                                      // 9795
            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';                                     // 9796
        case 'm':                                                                                                      // 9797
            return withoutSuffix ? 'ena minuta' : 'eno minuto';                                                        // 9798
        case 'mm':                                                                                                     // 9799
            if (number === 1) {                                                                                        // 9800
                result += withoutSuffix ? 'minuta' : 'minuto';                                                         // 9801
            } else if (number === 2) {                                                                                 // 9802
                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';                                           // 9803
            } else if (number < 5) {                                                                                   // 9804
                result += withoutSuffix || isFuture ? 'minute' : 'minutami';                                           // 9805
            } else {                                                                                                   // 9806
                result += withoutSuffix || isFuture ? 'minut' : 'minutami';                                            // 9807
            }                                                                                                          // 9808
            return result;                                                                                             // 9809
        case 'h':                                                                                                      // 9810
            return withoutSuffix ? 'ena ura' : 'eno uro';                                                              // 9811
        case 'hh':                                                                                                     // 9812
            if (number === 1) {                                                                                        // 9813
                result += withoutSuffix ? 'ura' : 'uro';                                                               // 9814
            } else if (number === 2) {                                                                                 // 9815
                result += withoutSuffix || isFuture ? 'uri' : 'urama';                                                 // 9816
            } else if (number < 5) {                                                                                   // 9817
                result += withoutSuffix || isFuture ? 'ure' : 'urami';                                                 // 9818
            } else {                                                                                                   // 9819
                result += withoutSuffix || isFuture ? 'ur' : 'urami';                                                  // 9820
            }                                                                                                          // 9821
            return result;                                                                                             // 9822
        case 'd':                                                                                                      // 9823
            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';                                                 // 9824
        case 'dd':                                                                                                     // 9825
            if (number === 1) {                                                                                        // 9826
                result += withoutSuffix || isFuture ? 'dan' : 'dnem';                                                  // 9827
            } else if (number === 2) {                                                                                 // 9828
                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';                                               // 9829
            } else {                                                                                                   // 9830
                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';                                                 // 9831
            }                                                                                                          // 9832
            return result;                                                                                             // 9833
        case 'M':                                                                                                      // 9834
            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';                                            // 9835
        case 'MM':                                                                                                     // 9836
            if (number === 1) {                                                                                        // 9837
                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';                                             // 9838
            } else if (number === 2) {                                                                                 // 9839
                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';                                           // 9840
            } else if (number < 5) {                                                                                   // 9841
                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';                                             // 9842
            } else {                                                                                                   // 9843
                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';                                            // 9844
            }                                                                                                          // 9845
            return result;                                                                                             // 9846
        case 'y':                                                                                                      // 9847
            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';                                              // 9848
        case 'yy':                                                                                                     // 9849
            if (number === 1) {                                                                                        // 9850
                result += withoutSuffix || isFuture ? 'leto' : 'letom';                                                // 9851
            } else if (number === 2) {                                                                                 // 9852
                result += withoutSuffix || isFuture ? 'leti' : 'letoma';                                               // 9853
            } else if (number < 5) {                                                                                   // 9854
                result += withoutSuffix || isFuture ? 'leta' : 'leti';                                                 // 9855
            } else {                                                                                                   // 9856
                result += withoutSuffix || isFuture ? 'let' : 'leti';                                                  // 9857
            }                                                                                                          // 9858
            return result;                                                                                             // 9859
        }                                                                                                              // 9860
    }                                                                                                                  // 9861
                                                                                                                       // 9862
    var sl = moment__default.defineLocale('sl', {                                                                      // 9863
        months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),   // 9864
        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),                        // 9865
        weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),                                   // 9866
        weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),                                               // 9867
        weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),                                                               // 9868
        longDateFormat : {                                                                                             // 9869
            LT : 'H:mm',                                                                                               // 9870
            LTS : 'H:mm:ss',                                                                                           // 9871
            L : 'DD. MM. YYYY',                                                                                        // 9872
            LL : 'D. MMMM YYYY',                                                                                       // 9873
            LLL : 'D. MMMM YYYY H:mm',                                                                                 // 9874
            LLLL : 'dddd, D. MMMM YYYY H:mm'                                                                           // 9875
        },                                                                                                             // 9876
        calendar : {                                                                                                   // 9877
            sameDay  : '[danes ob] LT',                                                                                // 9878
            nextDay  : '[jutri ob] LT',                                                                                // 9879
                                                                                                                       // 9880
            nextWeek : function () {                                                                                   // 9881
                switch (this.day()) {                                                                                  // 9882
                case 0:                                                                                                // 9883
                    return '[v] [nedeljo] [ob] LT';                                                                    // 9884
                case 3:                                                                                                // 9885
                    return '[v] [sredo] [ob] LT';                                                                      // 9886
                case 6:                                                                                                // 9887
                    return '[v] [soboto] [ob] LT';                                                                     // 9888
                case 1:                                                                                                // 9889
                case 2:                                                                                                // 9890
                case 4:                                                                                                // 9891
                case 5:                                                                                                // 9892
                    return '[v] dddd [ob] LT';                                                                         // 9893
                }                                                                                                      // 9894
            },                                                                                                         // 9895
            lastDay  : '[včeraj ob] LT',                                                                               // 9896
            lastWeek : function () {                                                                                   // 9897
                switch (this.day()) {                                                                                  // 9898
                case 0:                                                                                                // 9899
                    return '[prejšnjo] [nedeljo] [ob] LT';                                                             // 9900
                case 3:                                                                                                // 9901
                    return '[prejšnjo] [sredo] [ob] LT';                                                               // 9902
                case 6:                                                                                                // 9903
                    return '[prejšnjo] [soboto] [ob] LT';                                                              // 9904
                case 1:                                                                                                // 9905
                case 2:                                                                                                // 9906
                case 4:                                                                                                // 9907
                case 5:                                                                                                // 9908
                    return '[prejšnji] dddd [ob] LT';                                                                  // 9909
                }                                                                                                      // 9910
            },                                                                                                         // 9911
            sameElse : 'L'                                                                                             // 9912
        },                                                                                                             // 9913
        relativeTime : {                                                                                               // 9914
            future : 'čez %s',                                                                                         // 9915
            past   : 'pred %s',                                                                                        // 9916
            s      : sl__processRelativeTime,                                                                          // 9917
            m      : sl__processRelativeTime,                                                                          // 9918
            mm     : sl__processRelativeTime,                                                                          // 9919
            h      : sl__processRelativeTime,                                                                          // 9920
            hh     : sl__processRelativeTime,                                                                          // 9921
            d      : sl__processRelativeTime,                                                                          // 9922
            dd     : sl__processRelativeTime,                                                                          // 9923
            M      : sl__processRelativeTime,                                                                          // 9924
            MM     : sl__processRelativeTime,                                                                          // 9925
            y      : sl__processRelativeTime,                                                                          // 9926
            yy     : sl__processRelativeTime                                                                           // 9927
        },                                                                                                             // 9928
        ordinalParse: /\d{1,2}\./,                                                                                     // 9929
        ordinal : '%d.',                                                                                               // 9930
        week : {                                                                                                       // 9931
            dow : 1, // Monday is the first day of the week.                                                           // 9932
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 9933
        }                                                                                                              // 9934
    });                                                                                                                // 9935
                                                                                                                       // 9936
    //! moment.js locale configuration                                                                                 // 9937
    //! locale : Albanian (sq)                                                                                         // 9938
    //! author : Flakërim Ismani : https://github.com/flakerimi                                                        // 9939
    //! author: Menelion Elensúle: https://github.com/Oire (tests)                                                     // 9940
    //! author : Oerd Cukalla : https://github.com/oerd (fixes)                                                        // 9941
                                                                                                                       // 9942
    var sq = moment__default.defineLocale('sq', {                                                                      // 9943
        months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),           // 9944
        monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),                                    // 9945
        weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),                             // 9946
        weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),                                                      // 9947
        weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),                                                                   // 9948
        meridiemParse: /PD|MD/,                                                                                        // 9949
        isPM: function (input) {                                                                                       // 9950
            return input.charAt(0) === 'M';                                                                            // 9951
        },                                                                                                             // 9952
        meridiem : function (hours, minutes, isLower) {                                                                // 9953
            return hours < 12 ? 'PD' : 'MD';                                                                           // 9954
        },                                                                                                             // 9955
        longDateFormat : {                                                                                             // 9956
            LT : 'HH:mm',                                                                                              // 9957
            LTS : 'HH:mm:ss',                                                                                          // 9958
            L : 'DD/MM/YYYY',                                                                                          // 9959
            LL : 'D MMMM YYYY',                                                                                        // 9960
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 9961
            LLLL : 'dddd, D MMMM YYYY HH:mm'                                                                           // 9962
        },                                                                                                             // 9963
        calendar : {                                                                                                   // 9964
            sameDay : '[Sot në] LT',                                                                                   // 9965
            nextDay : '[Nesër në] LT',                                                                                 // 9966
            nextWeek : 'dddd [në] LT',                                                                                 // 9967
            lastDay : '[Dje në] LT',                                                                                   // 9968
            lastWeek : 'dddd [e kaluar në] LT',                                                                        // 9969
            sameElse : 'L'                                                                                             // 9970
        },                                                                                                             // 9971
        relativeTime : {                                                                                               // 9972
            future : 'në %s',                                                                                          // 9973
            past : '%s më parë',                                                                                       // 9974
            s : 'disa sekonda',                                                                                        // 9975
            m : 'një minutë',                                                                                          // 9976
            mm : '%d minuta',                                                                                          // 9977
            h : 'një orë',                                                                                             // 9978
            hh : '%d orë',                                                                                             // 9979
            d : 'një ditë',                                                                                            // 9980
            dd : '%d ditë',                                                                                            // 9981
            M : 'një muaj',                                                                                            // 9982
            MM : '%d muaj',                                                                                            // 9983
            y : 'një vit',                                                                                             // 9984
            yy : '%d vite'                                                                                             // 9985
        },                                                                                                             // 9986
        ordinalParse: /\d{1,2}\./,                                                                                     // 9987
        ordinal : '%d.',                                                                                               // 9988
        week : {                                                                                                       // 9989
            dow : 1, // Monday is the first day of the week.                                                           // 9990
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 9991
        }                                                                                                              // 9992
    });                                                                                                                // 9993
                                                                                                                       // 9994
    //! moment.js locale configuration                                                                                 // 9995
    //! locale : Serbian-cyrillic (sr-cyrl)                                                                            // 9996
    //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j                              // 9997
                                                                                                                       // 9998
    var sr_cyrl__translator = {                                                                                        // 9999
        words: { //Different grammatical cases                                                                         // 10000
            m: ['један минут', 'једне минуте'],                                                                        // 10001
            mm: ['минут', 'минуте', 'минута'],                                                                         // 10002
            h: ['један сат', 'једног сата'],                                                                           // 10003
            hh: ['сат', 'сата', 'сати'],                                                                               // 10004
            dd: ['дан', 'дана', 'дана'],                                                                               // 10005
            MM: ['месец', 'месеца', 'месеци'],                                                                         // 10006
            yy: ['година', 'године', 'година']                                                                         // 10007
        },                                                                                                             // 10008
        correctGrammaticalCase: function (number, wordKey) {                                                           // 10009
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);                 // 10010
        },                                                                                                             // 10011
        translate: function (number, withoutSuffix, key) {                                                             // 10012
            var wordKey = sr_cyrl__translator.words[key];                                                              // 10013
            if (key.length === 1) {                                                                                    // 10014
                return withoutSuffix ? wordKey[0] : wordKey[1];                                                        // 10015
            } else {                                                                                                   // 10016
                return number + ' ' + sr_cyrl__translator.correctGrammaticalCase(number, wordKey);                     // 10017
            }                                                                                                          // 10018
        }                                                                                                              // 10019
    };                                                                                                                 // 10020
                                                                                                                       // 10021
    var sr_cyrl = moment__default.defineLocale('sr-cyrl', {                                                            // 10022
        months: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар'],
        monthsShort: ['јан.', 'феб.', 'мар.', 'апр.', 'мај', 'јун', 'јул', 'авг.', 'сеп.', 'окт.', 'нов.', 'дец.'],    // 10024
        weekdays: ['недеља', 'понедељак', 'уторак', 'среда', 'четвртак', 'петак', 'субота'],                           // 10025
        weekdaysShort: ['нед.', 'пон.', 'уто.', 'сре.', 'чет.', 'пет.', 'суб.'],                                       // 10026
        weekdaysMin: ['не', 'по', 'ут', 'ср', 'че', 'пе', 'су'],                                                       // 10027
        longDateFormat: {                                                                                              // 10028
            LT: 'H:mm',                                                                                                // 10029
            LTS : 'H:mm:ss',                                                                                           // 10030
            L: 'DD. MM. YYYY',                                                                                         // 10031
            LL: 'D. MMMM YYYY',                                                                                        // 10032
            LLL: 'D. MMMM YYYY H:mm',                                                                                  // 10033
            LLLL: 'dddd, D. MMMM YYYY H:mm'                                                                            // 10034
        },                                                                                                             // 10035
        calendar: {                                                                                                    // 10036
            sameDay: '[данас у] LT',                                                                                   // 10037
            nextDay: '[сутра у] LT',                                                                                   // 10038
            nextWeek: function () {                                                                                    // 10039
                switch (this.day()) {                                                                                  // 10040
                case 0:                                                                                                // 10041
                    return '[у] [недељу] [у] LT';                                                                      // 10042
                case 3:                                                                                                // 10043
                    return '[у] [среду] [у] LT';                                                                       // 10044
                case 6:                                                                                                // 10045
                    return '[у] [суботу] [у] LT';                                                                      // 10046
                case 1:                                                                                                // 10047
                case 2:                                                                                                // 10048
                case 4:                                                                                                // 10049
                case 5:                                                                                                // 10050
                    return '[у] dddd [у] LT';                                                                          // 10051
                }                                                                                                      // 10052
            },                                                                                                         // 10053
            lastDay  : '[јуче у] LT',                                                                                  // 10054
            lastWeek : function () {                                                                                   // 10055
                var lastWeekDays = [                                                                                   // 10056
                    '[прошле] [недеље] [у] LT',                                                                        // 10057
                    '[прошлог] [понедељка] [у] LT',                                                                    // 10058
                    '[прошлог] [уторка] [у] LT',                                                                       // 10059
                    '[прошле] [среде] [у] LT',                                                                         // 10060
                    '[прошлог] [четвртка] [у] LT',                                                                     // 10061
                    '[прошлог] [петка] [у] LT',                                                                        // 10062
                    '[прошле] [суботе] [у] LT'                                                                         // 10063
                ];                                                                                                     // 10064
                return lastWeekDays[this.day()];                                                                       // 10065
            },                                                                                                         // 10066
            sameElse : 'L'                                                                                             // 10067
        },                                                                                                             // 10068
        relativeTime : {                                                                                               // 10069
            future : 'за %s',                                                                                          // 10070
            past   : 'пре %s',                                                                                         // 10071
            s      : 'неколико секунди',                                                                               // 10072
            m      : sr_cyrl__translator.translate,                                                                    // 10073
            mm     : sr_cyrl__translator.translate,                                                                    // 10074
            h      : sr_cyrl__translator.translate,                                                                    // 10075
            hh     : sr_cyrl__translator.translate,                                                                    // 10076
            d      : 'дан',                                                                                            // 10077
            dd     : sr_cyrl__translator.translate,                                                                    // 10078
            M      : 'месец',                                                                                          // 10079
            MM     : sr_cyrl__translator.translate,                                                                    // 10080
            y      : 'годину',                                                                                         // 10081
            yy     : sr_cyrl__translator.translate                                                                     // 10082
        },                                                                                                             // 10083
        ordinalParse: /\d{1,2}\./,                                                                                     // 10084
        ordinal : '%d.',                                                                                               // 10085
        week : {                                                                                                       // 10086
            dow : 1, // Monday is the first day of the week.                                                           // 10087
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 10088
        }                                                                                                              // 10089
    });                                                                                                                // 10090
                                                                                                                       // 10091
    //! moment.js locale configuration                                                                                 // 10092
    //! locale : Serbian-latin (sr)                                                                                    // 10093
    //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j                              // 10094
                                                                                                                       // 10095
    var sr__translator = {                                                                                             // 10096
        words: { //Different grammatical cases                                                                         // 10097
            m: ['jedan minut', 'jedne minute'],                                                                        // 10098
            mm: ['minut', 'minute', 'minuta'],                                                                         // 10099
            h: ['jedan sat', 'jednog sata'],                                                                           // 10100
            hh: ['sat', 'sata', 'sati'],                                                                               // 10101
            dd: ['dan', 'dana', 'dana'],                                                                               // 10102
            MM: ['mesec', 'meseca', 'meseci'],                                                                         // 10103
            yy: ['godina', 'godine', 'godina']                                                                         // 10104
        },                                                                                                             // 10105
        correctGrammaticalCase: function (number, wordKey) {                                                           // 10106
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);                 // 10107
        },                                                                                                             // 10108
        translate: function (number, withoutSuffix, key) {                                                             // 10109
            var wordKey = sr__translator.words[key];                                                                   // 10110
            if (key.length === 1) {                                                                                    // 10111
                return withoutSuffix ? wordKey[0] : wordKey[1];                                                        // 10112
            } else {                                                                                                   // 10113
                return number + ' ' + sr__translator.correctGrammaticalCase(number, wordKey);                          // 10114
            }                                                                                                          // 10115
        }                                                                                                              // 10116
    };                                                                                                                 // 10117
                                                                                                                       // 10118
    var sr = moment__default.defineLocale('sr', {                                                                      // 10119
        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],    // 10121
        weekdays: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota'],                         // 10122
        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sre.', 'čet.', 'pet.', 'sub.'],                                       // 10123
        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],                                                       // 10124
        longDateFormat: {                                                                                              // 10125
            LT: 'H:mm',                                                                                                // 10126
            LTS : 'H:mm:ss',                                                                                           // 10127
            L: 'DD. MM. YYYY',                                                                                         // 10128
            LL: 'D. MMMM YYYY',                                                                                        // 10129
            LLL: 'D. MMMM YYYY H:mm',                                                                                  // 10130
            LLLL: 'dddd, D. MMMM YYYY H:mm'                                                                            // 10131
        },                                                                                                             // 10132
        calendar: {                                                                                                    // 10133
            sameDay: '[danas u] LT',                                                                                   // 10134
            nextDay: '[sutra u] LT',                                                                                   // 10135
            nextWeek: function () {                                                                                    // 10136
                switch (this.day()) {                                                                                  // 10137
                case 0:                                                                                                // 10138
                    return '[u] [nedelju] [u] LT';                                                                     // 10139
                case 3:                                                                                                // 10140
                    return '[u] [sredu] [u] LT';                                                                       // 10141
                case 6:                                                                                                // 10142
                    return '[u] [subotu] [u] LT';                                                                      // 10143
                case 1:                                                                                                // 10144
                case 2:                                                                                                // 10145
                case 4:                                                                                                // 10146
                case 5:                                                                                                // 10147
                    return '[u] dddd [u] LT';                                                                          // 10148
                }                                                                                                      // 10149
            },                                                                                                         // 10150
            lastDay  : '[juče u] LT',                                                                                  // 10151
            lastWeek : function () {                                                                                   // 10152
                var lastWeekDays = [                                                                                   // 10153
                    '[prošle] [nedelje] [u] LT',                                                                       // 10154
                    '[prošlog] [ponedeljka] [u] LT',                                                                   // 10155
                    '[prošlog] [utorka] [u] LT',                                                                       // 10156
                    '[prošle] [srede] [u] LT',                                                                         // 10157
                    '[prošlog] [četvrtka] [u] LT',                                                                     // 10158
                    '[prošlog] [petka] [u] LT',                                                                        // 10159
                    '[prošle] [subote] [u] LT'                                                                         // 10160
                ];                                                                                                     // 10161
                return lastWeekDays[this.day()];                                                                       // 10162
            },                                                                                                         // 10163
            sameElse : 'L'                                                                                             // 10164
        },                                                                                                             // 10165
        relativeTime : {                                                                                               // 10166
            future : 'za %s',                                                                                          // 10167
            past   : 'pre %s',                                                                                         // 10168
            s      : 'nekoliko sekundi',                                                                               // 10169
            m      : sr__translator.translate,                                                                         // 10170
            mm     : sr__translator.translate,                                                                         // 10171
            h      : sr__translator.translate,                                                                         // 10172
            hh     : sr__translator.translate,                                                                         // 10173
            d      : 'dan',                                                                                            // 10174
            dd     : sr__translator.translate,                                                                         // 10175
            M      : 'mesec',                                                                                          // 10176
            MM     : sr__translator.translate,                                                                         // 10177
            y      : 'godinu',                                                                                         // 10178
            yy     : sr__translator.translate                                                                          // 10179
        },                                                                                                             // 10180
        ordinalParse: /\d{1,2}\./,                                                                                     // 10181
        ordinal : '%d.',                                                                                               // 10182
        week : {                                                                                                       // 10183
            dow : 1, // Monday is the first day of the week.                                                           // 10184
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 10185
        }                                                                                                              // 10186
    });                                                                                                                // 10187
                                                                                                                       // 10188
    //! moment.js locale configuration                                                                                 // 10189
    //! locale : swedish (sv)                                                                                          // 10190
    //! author : Jens Alm : https://github.com/ulmus                                                                   // 10191
                                                                                                                       // 10192
    var sv = moment__default.defineLocale('sv', {                                                                      // 10193
        months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),   // 10194
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),                                    // 10195
        weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),                                     // 10196
        weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),                                                      // 10197
        weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),                                                               // 10198
        longDateFormat : {                                                                                             // 10199
            LT : 'HH:mm',                                                                                              // 10200
            LTS : 'HH:mm:ss',                                                                                          // 10201
            L : 'YYYY-MM-DD',                                                                                          // 10202
            LL : 'D MMMM YYYY',                                                                                        // 10203
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 10204
            LLLL : 'dddd D MMMM YYYY HH:mm'                                                                            // 10205
        },                                                                                                             // 10206
        calendar : {                                                                                                   // 10207
            sameDay: '[Idag] LT',                                                                                      // 10208
            nextDay: '[Imorgon] LT',                                                                                   // 10209
            lastDay: '[Igår] LT',                                                                                      // 10210
            nextWeek: '[På] dddd LT',                                                                                  // 10211
            lastWeek: '[I] dddd[s] LT',                                                                                // 10212
            sameElse: 'L'                                                                                              // 10213
        },                                                                                                             // 10214
        relativeTime : {                                                                                               // 10215
            future : 'om %s',                                                                                          // 10216
            past : 'för %s sedan',                                                                                     // 10217
            s : 'några sekunder',                                                                                      // 10218
            m : 'en minut',                                                                                            // 10219
            mm : '%d minuter',                                                                                         // 10220
            h : 'en timme',                                                                                            // 10221
            hh : '%d timmar',                                                                                          // 10222
            d : 'en dag',                                                                                              // 10223
            dd : '%d dagar',                                                                                           // 10224
            M : 'en månad',                                                                                            // 10225
            MM : '%d månader',                                                                                         // 10226
            y : 'ett år',                                                                                              // 10227
            yy : '%d år'                                                                                               // 10228
        },                                                                                                             // 10229
        ordinalParse: /\d{1,2}(e|a)/,                                                                                  // 10230
        ordinal : function (number) {                                                                                  // 10231
            var b = number % 10,                                                                                       // 10232
                output = (~~(number % 100 / 10) === 1) ? 'e' :                                                         // 10233
                (b === 1) ? 'a' :                                                                                      // 10234
                (b === 2) ? 'a' :                                                                                      // 10235
                (b === 3) ? 'e' : 'e';                                                                                 // 10236
            return number + output;                                                                                    // 10237
        },                                                                                                             // 10238
        week : {                                                                                                       // 10239
            dow : 1, // Monday is the first day of the week.                                                           // 10240
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 10241
        }                                                                                                              // 10242
    });                                                                                                                // 10243
                                                                                                                       // 10244
    //! moment.js locale configuration                                                                                 // 10245
    //! locale : swahili (sw)                                                                                          // 10246
    //! author : Fahad Kassim : https://github.com/fadsel                                                              // 10247
                                                                                                                       // 10248
    var sw = moment__default.defineLocale('sw', {                                                                      // 10249
        months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),     // 10250
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),                                    // 10251
        weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),                           // 10252
        weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),                                                  // 10253
        weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),                                                               // 10254
        longDateFormat : {                                                                                             // 10255
            LT : 'HH:mm',                                                                                              // 10256
            LTS : 'HH:mm:ss',                                                                                          // 10257
            L : 'DD.MM.YYYY',                                                                                          // 10258
            LL : 'D MMMM YYYY',                                                                                        // 10259
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 10260
            LLLL : 'dddd, D MMMM YYYY HH:mm'                                                                           // 10261
        },                                                                                                             // 10262
        calendar : {                                                                                                   // 10263
            sameDay : '[leo saa] LT',                                                                                  // 10264
            nextDay : '[kesho saa] LT',                                                                                // 10265
            nextWeek : '[wiki ijayo] dddd [saat] LT',                                                                  // 10266
            lastDay : '[jana] LT',                                                                                     // 10267
            lastWeek : '[wiki iliyopita] dddd [saat] LT',                                                              // 10268
            sameElse : 'L'                                                                                             // 10269
        },                                                                                                             // 10270
        relativeTime : {                                                                                               // 10271
            future : '%s baadaye',                                                                                     // 10272
            past : 'tokea %s',                                                                                         // 10273
            s : 'hivi punde',                                                                                          // 10274
            m : 'dakika moja',                                                                                         // 10275
            mm : 'dakika %d',                                                                                          // 10276
            h : 'saa limoja',                                                                                          // 10277
            hh : 'masaa %d',                                                                                           // 10278
            d : 'siku moja',                                                                                           // 10279
            dd : 'masiku %d',                                                                                          // 10280
            M : 'mwezi mmoja',                                                                                         // 10281
            MM : 'miezi %d',                                                                                           // 10282
            y : 'mwaka mmoja',                                                                                         // 10283
            yy : 'miaka %d'                                                                                            // 10284
        },                                                                                                             // 10285
        week : {                                                                                                       // 10286
            dow : 1, // Monday is the first day of the week.                                                           // 10287
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 10288
        }                                                                                                              // 10289
    });                                                                                                                // 10290
                                                                                                                       // 10291
    //! moment.js locale configuration                                                                                 // 10292
    //! locale : tamil (ta)                                                                                            // 10293
    //! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404                                               // 10294
                                                                                                                       // 10295
    var ta__symbolMap = {                                                                                              // 10296
        '1': '௧',                                                                                                      // 10297
        '2': '௨',                                                                                                      // 10298
        '3': '௩',                                                                                                      // 10299
        '4': '௪',                                                                                                      // 10300
        '5': '௫',                                                                                                      // 10301
        '6': '௬',                                                                                                      // 10302
        '7': '௭',                                                                                                      // 10303
        '8': '௮',                                                                                                      // 10304
        '9': '௯',                                                                                                      // 10305
        '0': '௦'                                                                                                       // 10306
    }, ta__numberMap = {                                                                                               // 10307
        '௧': '1',                                                                                                      // 10308
        '௨': '2',                                                                                                      // 10309
        '௩': '3',                                                                                                      // 10310
        '௪': '4',                                                                                                      // 10311
        '௫': '5',                                                                                                      // 10312
        '௬': '6',                                                                                                      // 10313
        '௭': '7',                                                                                                      // 10314
        '௮': '8',                                                                                                      // 10315
        '௯': '9',                                                                                                      // 10316
        '௦': '0'                                                                                                       // 10317
    };                                                                                                                 // 10318
                                                                                                                       // 10319
    var ta = moment__default.defineLocale('ta', {                                                                      // 10320
        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),                                 // 10324
        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),                                                                // 10325
        longDateFormat : {                                                                                             // 10326
            LT : 'HH:mm',                                                                                              // 10327
            LTS : 'HH:mm:ss',                                                                                          // 10328
            L : 'DD/MM/YYYY',                                                                                          // 10329
            LL : 'D MMMM YYYY',                                                                                        // 10330
            LLL : 'D MMMM YYYY, HH:mm',                                                                                // 10331
            LLLL : 'dddd, D MMMM YYYY, HH:mm'                                                                          // 10332
        },                                                                                                             // 10333
        calendar : {                                                                                                   // 10334
            sameDay : '[இன்று] LT',                                                                                    // 10335
            nextDay : '[நாளை] LT',                                                                                     // 10336
            nextWeek : 'dddd, LT',                                                                                     // 10337
            lastDay : '[நேற்று] LT',                                                                                   // 10338
            lastWeek : '[கடந்த வாரம்] dddd, LT',                                                                       // 10339
            sameElse : 'L'                                                                                             // 10340
        },                                                                                                             // 10341
        relativeTime : {                                                                                               // 10342
            future : '%s இல்',                                                                                         // 10343
            past : '%s முன்',                                                                                          // 10344
            s : 'ஒரு சில விநாடிகள்',                                                                                   // 10345
            m : 'ஒரு நிமிடம்',                                                                                         // 10346
            mm : '%d நிமிடங்கள்',                                                                                      // 10347
            h : 'ஒரு மணி நேரம்',                                                                                       // 10348
            hh : '%d மணி நேரம்',                                                                                       // 10349
            d : 'ஒரு நாள்',                                                                                            // 10350
            dd : '%d நாட்கள்',                                                                                         // 10351
            M : 'ஒரு மாதம்',                                                                                           // 10352
            MM : '%d மாதங்கள்',                                                                                        // 10353
            y : 'ஒரு வருடம்',                                                                                          // 10354
            yy : '%d ஆண்டுகள்'                                                                                         // 10355
        },                                                                                                             // 10356
        ordinalParse: /\d{1,2}வது/,                                                                                    // 10357
        ordinal : function (number) {                                                                                  // 10358
            return number + 'வது';                                                                                     // 10359
        },                                                                                                             // 10360
        preparse: function (string) {                                                                                  // 10361
            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {                                                  // 10362
                return ta__numberMap[match];                                                                           // 10363
            });                                                                                                        // 10364
        },                                                                                                             // 10365
        postformat: function (string) {                                                                                // 10366
            return string.replace(/\d/g, function (match) {                                                            // 10367
                return ta__symbolMap[match];                                                                           // 10368
            });                                                                                                        // 10369
        },                                                                                                             // 10370
        // refer http://ta.wikipedia.org/s/1er1                                                                        // 10371
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,                                                        // 10372
        meridiem : function (hour, minute, isLower) {                                                                  // 10373
            if (hour < 2) {                                                                                            // 10374
                return ' யாமம்';                                                                                       // 10375
            } else if (hour < 6) {                                                                                     // 10376
                return ' வைகறை';  // வைகறை                                                                             // 10377
            } else if (hour < 10) {                                                                                    // 10378
                return ' காலை'; // காலை                                                                                // 10379
            } else if (hour < 14) {                                                                                    // 10380
                return ' நண்பகல்'; // நண்பகல்                                                                          // 10381
            } else if (hour < 18) {                                                                                    // 10382
                return ' எற்பாடு'; // எற்பாடு                                                                          // 10383
            } else if (hour < 22) {                                                                                    // 10384
                return ' மாலை'; // மாலை                                                                                // 10385
            } else {                                                                                                   // 10386
                return ' யாமம்';                                                                                       // 10387
            }                                                                                                          // 10388
        },                                                                                                             // 10389
        meridiemHour : function (hour, meridiem) {                                                                     // 10390
            if (hour === 12) {                                                                                         // 10391
                hour = 0;                                                                                              // 10392
            }                                                                                                          // 10393
            if (meridiem === 'யாமம்') {                                                                                // 10394
                return hour < 2 ? hour : hour + 12;                                                                    // 10395
            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {                                                  // 10396
                return hour;                                                                                           // 10397
            } else if (meridiem === 'நண்பகல்') {                                                                       // 10398
                return hour >= 10 ? hour : hour + 12;                                                                  // 10399
            } else {                                                                                                   // 10400
                return hour + 12;                                                                                      // 10401
            }                                                                                                          // 10402
        },                                                                                                             // 10403
        week : {                                                                                                       // 10404
            dow : 0, // Sunday is the first day of the week.                                                           // 10405
            doy : 6  // The week that contains Jan 1st is the first week of the year.                                  // 10406
        }                                                                                                              // 10407
    });                                                                                                                // 10408
                                                                                                                       // 10409
    //! moment.js locale configuration                                                                                 // 10410
    //! locale : telugu (te)                                                                                           // 10411
    //! author : Krishna Chaitanya Thota : https://github.com/kcthota                                                  // 10412
                                                                                                                       // 10413
    var te = moment__default.defineLocale('te', {                                                                      // 10414
        months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),  // 10415
        monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),                  // 10416
        weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),                           // 10417
        weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),                                                  // 10418
        weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),                                                                 // 10419
        longDateFormat : {                                                                                             // 10420
            LT : 'A h:mm',                                                                                             // 10421
            LTS : 'A h:mm:ss',                                                                                         // 10422
            L : 'DD/MM/YYYY',                                                                                          // 10423
            LL : 'D MMMM YYYY',                                                                                        // 10424
            LLL : 'D MMMM YYYY, A h:mm',                                                                               // 10425
            LLLL : 'dddd, D MMMM YYYY, A h:mm'                                                                         // 10426
        },                                                                                                             // 10427
        calendar : {                                                                                                   // 10428
            sameDay : '[నేడు] LT',                                                                                     // 10429
            nextDay : '[రేపు] LT',                                                                                     // 10430
            nextWeek : 'dddd, LT',                                                                                     // 10431
            lastDay : '[నిన్న] LT',                                                                                    // 10432
            lastWeek : '[గత] dddd, LT',                                                                                // 10433
            sameElse : 'L'                                                                                             // 10434
        },                                                                                                             // 10435
        relativeTime : {                                                                                               // 10436
            future : '%s లో',                                                                                          // 10437
            past : '%s క్రితం',                                                                                        // 10438
            s : 'కొన్ని క్షణాలు',                                                                                      // 10439
            m : 'ఒక నిమిషం',                                                                                           // 10440
            mm : '%d నిమిషాలు',                                                                                        // 10441
            h : 'ఒక గంట',                                                                                              // 10442
            hh : '%d గంటలు',                                                                                           // 10443
            d : 'ఒక రోజు',                                                                                             // 10444
            dd : '%d రోజులు',                                                                                          // 10445
            M : 'ఒక నెల',                                                                                              // 10446
            MM : '%d నెలలు',                                                                                           // 10447
            y : 'ఒక సంవత్సరం',                                                                                         // 10448
            yy : '%d సంవత్సరాలు'                                                                                       // 10449
        },                                                                                                             // 10450
        ordinalParse : /\d{1,2}వ/,                                                                                     // 10451
        ordinal : '%dవ',                                                                                               // 10452
        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,                                                               // 10453
        meridiemHour : function (hour, meridiem) {                                                                     // 10454
            if (hour === 12) {                                                                                         // 10455
                hour = 0;                                                                                              // 10456
            }                                                                                                          // 10457
            if (meridiem === 'రాత్రి') {                                                                               // 10458
                return hour < 4 ? hour : hour + 12;                                                                    // 10459
            } else if (meridiem === 'ఉదయం') {                                                                          // 10460
                return hour;                                                                                           // 10461
            } else if (meridiem === 'మధ్యాహ్నం') {                                                                     // 10462
                return hour >= 10 ? hour : hour + 12;                                                                  // 10463
            } else if (meridiem === 'సాయంత్రం') {                                                                      // 10464
                return hour + 12;                                                                                      // 10465
            }                                                                                                          // 10466
        },                                                                                                             // 10467
        meridiem : function (hour, minute, isLower) {                                                                  // 10468
            if (hour < 4) {                                                                                            // 10469
                return 'రాత్రి';                                                                                       // 10470
            } else if (hour < 10) {                                                                                    // 10471
                return 'ఉదయం';                                                                                         // 10472
            } else if (hour < 17) {                                                                                    // 10473
                return 'మధ్యాహ్నం';                                                                                    // 10474
            } else if (hour < 20) {                                                                                    // 10475
                return 'సాయంత్రం';                                                                                     // 10476
            } else {                                                                                                   // 10477
                return 'రాత్రి';                                                                                       // 10478
            }                                                                                                          // 10479
        },                                                                                                             // 10480
        week : {                                                                                                       // 10481
            dow : 0, // Sunday is the first day of the week.                                                           // 10482
            doy : 6  // The week that contains Jan 1st is the first week of the year.                                  // 10483
        }                                                                                                              // 10484
    });                                                                                                                // 10485
                                                                                                                       // 10486
    //! moment.js locale configuration                                                                                 // 10487
    //! locale : thai (th)                                                                                             // 10488
    //! author : Kridsada Thanabulpong : https://github.com/sirn                                                       // 10489
                                                                                                                       // 10490
    var th = moment__default.defineLocale('th', {                                                                      // 10491
        months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
        monthsShort : 'มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา'.split('_'),             // 10493
        weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),                                        // 10494
        weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference  // 10495
        weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),                                                             // 10496
        longDateFormat : {                                                                                             // 10497
            LT : 'H นาฬิกา m นาที',                                                                                    // 10498
            LTS : 'H นาฬิกา m นาที s วินาที',                                                                          // 10499
            L : 'YYYY/MM/DD',                                                                                          // 10500
            LL : 'D MMMM YYYY',                                                                                        // 10501
            LLL : 'D MMMM YYYY เวลา H นาฬิกา m นาที',                                                                  // 10502
            LLLL : 'วันddddที่ D MMMM YYYY เวลา H นาฬิกา m นาที'                                                       // 10503
        },                                                                                                             // 10504
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,                                                                        // 10505
        isPM: function (input) {                                                                                       // 10506
            return input === 'หลังเที่ยง';                                                                             // 10507
        },                                                                                                             // 10508
        meridiem : function (hour, minute, isLower) {                                                                  // 10509
            if (hour < 12) {                                                                                           // 10510
                return 'ก่อนเที่ยง';                                                                                   // 10511
            } else {                                                                                                   // 10512
                return 'หลังเที่ยง';                                                                                   // 10513
            }                                                                                                          // 10514
        },                                                                                                             // 10515
        calendar : {                                                                                                   // 10516
            sameDay : '[วันนี้ เวลา] LT',                                                                              // 10517
            nextDay : '[พรุ่งนี้ เวลา] LT',                                                                            // 10518
            nextWeek : 'dddd[หน้า เวลา] LT',                                                                           // 10519
            lastDay : '[เมื่อวานนี้ เวลา] LT',                                                                         // 10520
            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',                                                                   // 10521
            sameElse : 'L'                                                                                             // 10522
        },                                                                                                             // 10523
        relativeTime : {                                                                                               // 10524
            future : 'อีก %s',                                                                                         // 10525
            past : '%sที่แล้ว',                                                                                        // 10526
            s : 'ไม่กี่วินาที',                                                                                        // 10527
            m : '1 นาที',                                                                                              // 10528
            mm : '%d นาที',                                                                                            // 10529
            h : '1 ชั่วโมง',                                                                                           // 10530
            hh : '%d ชั่วโมง',                                                                                         // 10531
            d : '1 วัน',                                                                                               // 10532
            dd : '%d วัน',                                                                                             // 10533
            M : '1 เดือน',                                                                                             // 10534
            MM : '%d เดือน',                                                                                           // 10535
            y : '1 ปี',                                                                                                // 10536
            yy : '%d ปี'                                                                                               // 10537
        }                                                                                                              // 10538
    });                                                                                                                // 10539
                                                                                                                       // 10540
    //! moment.js locale configuration                                                                                 // 10541
    //! locale : Tagalog/Filipino (tl-ph)                                                                              // 10542
    //! author : Dan Hagman                                                                                            // 10543
                                                                                                                       // 10544
    var tl_ph = moment__default.defineLocale('tl-ph', {                                                                // 10545
        months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
        monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),                                    // 10547
        weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),                                // 10548
        weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),                                                      // 10549
        weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),                                                              // 10550
        longDateFormat : {                                                                                             // 10551
            LT : 'HH:mm',                                                                                              // 10552
            LTS : 'HH:mm:ss',                                                                                          // 10553
            L : 'MM/D/YYYY',                                                                                           // 10554
            LL : 'MMMM D, YYYY',                                                                                       // 10555
            LLL : 'MMMM D, YYYY HH:mm',                                                                                // 10556
            LLLL : 'dddd, MMMM DD, YYYY HH:mm'                                                                         // 10557
        },                                                                                                             // 10558
        calendar : {                                                                                                   // 10559
            sameDay: '[Ngayon sa] LT',                                                                                 // 10560
            nextDay: '[Bukas sa] LT',                                                                                  // 10561
            nextWeek: 'dddd [sa] LT',                                                                                  // 10562
            lastDay: '[Kahapon sa] LT',                                                                                // 10563
            lastWeek: 'dddd [huling linggo] LT',                                                                       // 10564
            sameElse: 'L'                                                                                              // 10565
        },                                                                                                             // 10566
        relativeTime : {                                                                                               // 10567
            future : 'sa loob ng %s',                                                                                  // 10568
            past : '%s ang nakalipas',                                                                                 // 10569
            s : 'ilang segundo',                                                                                       // 10570
            m : 'isang minuto',                                                                                        // 10571
            mm : '%d minuto',                                                                                          // 10572
            h : 'isang oras',                                                                                          // 10573
            hh : '%d oras',                                                                                            // 10574
            d : 'isang araw',                                                                                          // 10575
            dd : '%d araw',                                                                                            // 10576
            M : 'isang buwan',                                                                                         // 10577
            MM : '%d buwan',                                                                                           // 10578
            y : 'isang taon',                                                                                          // 10579
            yy : '%d taon'                                                                                             // 10580
        },                                                                                                             // 10581
        ordinalParse: /\d{1,2}/,                                                                                       // 10582
        ordinal : function (number) {                                                                                  // 10583
            return number;                                                                                             // 10584
        },                                                                                                             // 10585
        week : {                                                                                                       // 10586
            dow : 1, // Monday is the first day of the week.                                                           // 10587
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 10588
        }                                                                                                              // 10589
    });                                                                                                                // 10590
                                                                                                                       // 10591
    //! moment.js locale configuration                                                                                 // 10592
    //! locale : Klingon (tlh)                                                                                         // 10593
    //! author : Dominika Kruk : https://github.com/amaranthrose                                                       // 10594
                                                                                                                       // 10595
    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');                                    // 10596
                                                                                                                       // 10597
    function translateFuture(output) {                                                                                 // 10598
        var time = output;                                                                                             // 10599
        time = (output.indexOf('jaj') !== -1) ?                                                                        // 10600
    	time.slice(0, -3) + 'leS' :                                                                                       // 10601
    	(output.indexOf('jar') !== -1) ?                                                                                  // 10602
    	time.slice(0, -3) + 'waQ' :                                                                                       // 10603
    	(output.indexOf('DIS') !== -1) ?                                                                                  // 10604
    	time.slice(0, -3) + 'nem' :                                                                                       // 10605
    	time + ' pIq';                                                                                                    // 10606
        return time;                                                                                                   // 10607
    }                                                                                                                  // 10608
                                                                                                                       // 10609
    function translatePast(output) {                                                                                   // 10610
        var time = output;                                                                                             // 10611
        time = (output.indexOf('jaj') !== -1) ?                                                                        // 10612
    	time.slice(0, -3) + 'Hu’' :                                                                                       // 10613
    	(output.indexOf('jar') !== -1) ?                                                                                  // 10614
    	time.slice(0, -3) + 'wen' :                                                                                       // 10615
    	(output.indexOf('DIS') !== -1) ?                                                                                  // 10616
    	time.slice(0, -3) + 'ben' :                                                                                       // 10617
    	time + ' ret';                                                                                                    // 10618
        return time;                                                                                                   // 10619
    }                                                                                                                  // 10620
                                                                                                                       // 10621
    function tlh__translate(number, withoutSuffix, string, isFuture) {                                                 // 10622
        var numberNoun = numberAsNoun(number);                                                                         // 10623
        switch (string) {                                                                                              // 10624
            case 'mm':                                                                                                 // 10625
                return numberNoun + ' tup';                                                                            // 10626
            case 'hh':                                                                                                 // 10627
                return numberNoun + ' rep';                                                                            // 10628
            case 'dd':                                                                                                 // 10629
                return numberNoun + ' jaj';                                                                            // 10630
            case 'MM':                                                                                                 // 10631
                return numberNoun + ' jar';                                                                            // 10632
            case 'yy':                                                                                                 // 10633
                return numberNoun + ' DIS';                                                                            // 10634
        }                                                                                                              // 10635
    }                                                                                                                  // 10636
                                                                                                                       // 10637
    function numberAsNoun(number) {                                                                                    // 10638
        var hundred = Math.floor((number % 1000) / 100),                                                               // 10639
    	ten = Math.floor((number % 100) / 10),                                                                            // 10640
    	one = number % 10,                                                                                                // 10641
    	word = '';                                                                                                        // 10642
        if (hundred > 0) {                                                                                             // 10643
            word += numbersNouns[hundred] + 'vatlh';                                                                   // 10644
        }                                                                                                              // 10645
        if (ten > 0) {                                                                                                 // 10646
            word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';                                            // 10647
        }                                                                                                              // 10648
        if (one > 0) {                                                                                                 // 10649
            word += ((word !== '') ? ' ' : '') + numbersNouns[one];                                                    // 10650
        }                                                                                                              // 10651
        return (word === '') ? 'pagh' : word;                                                                          // 10652
    }                                                                                                                  // 10653
                                                                                                                       // 10654
    var tlh = moment__default.defineLocale('tlh', {                                                                    // 10655
        months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
        monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
        weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),                              // 10658
        weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),                         // 10659
        weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),                           // 10660
        longDateFormat : {                                                                                             // 10661
            LT : 'HH:mm',                                                                                              // 10662
            LTS : 'HH:mm:ss',                                                                                          // 10663
            L : 'DD.MM.YYYY',                                                                                          // 10664
            LL : 'D MMMM YYYY',                                                                                        // 10665
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 10666
            LLLL : 'dddd, D MMMM YYYY HH:mm'                                                                           // 10667
        },                                                                                                             // 10668
        calendar : {                                                                                                   // 10669
            sameDay: '[DaHjaj] LT',                                                                                    // 10670
            nextDay: '[wa’leS] LT',                                                                                    // 10671
            nextWeek: 'LLL',                                                                                           // 10672
            lastDay: '[wa’Hu’] LT',                                                                                    // 10673
            lastWeek: 'LLL',                                                                                           // 10674
            sameElse: 'L'                                                                                              // 10675
        },                                                                                                             // 10676
        relativeTime : {                                                                                               // 10677
            future : translateFuture,                                                                                  // 10678
            past : translatePast,                                                                                      // 10679
            s : 'puS lup',                                                                                             // 10680
            m : 'wa’ tup',                                                                                             // 10681
            mm : tlh__translate,                                                                                       // 10682
            h : 'wa’ rep',                                                                                             // 10683
            hh : tlh__translate,                                                                                       // 10684
            d : 'wa’ jaj',                                                                                             // 10685
            dd : tlh__translate,                                                                                       // 10686
            M : 'wa’ jar',                                                                                             // 10687
            MM : tlh__translate,                                                                                       // 10688
            y : 'wa’ DIS',                                                                                             // 10689
            yy : tlh__translate                                                                                        // 10690
        },                                                                                                             // 10691
        ordinalParse: /\d{1,2}\./,                                                                                     // 10692
        ordinal : '%d.',                                                                                               // 10693
        week : {                                                                                                       // 10694
            dow : 1, // Monday is the first day of the week.                                                           // 10695
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 10696
        }                                                                                                              // 10697
    });                                                                                                                // 10698
                                                                                                                       // 10699
    //! moment.js locale configuration                                                                                 // 10700
    //! locale : turkish (tr)                                                                                          // 10701
    //! authors : Erhan Gundogan : https://github.com/erhangundogan,                                                   // 10702
    //!           Burak Yiğit Kaya: https://github.com/BYK                                                             // 10703
                                                                                                                       // 10704
    var tr__suffixes = {                                                                                               // 10705
        1: '\'inci',                                                                                                   // 10706
        5: '\'inci',                                                                                                   // 10707
        8: '\'inci',                                                                                                   // 10708
        70: '\'inci',                                                                                                  // 10709
        80: '\'inci',                                                                                                  // 10710
        2: '\'nci',                                                                                                    // 10711
        7: '\'nci',                                                                                                    // 10712
        20: '\'nci',                                                                                                   // 10713
        50: '\'nci',                                                                                                   // 10714
        3: '\'üncü',                                                                                                   // 10715
        4: '\'üncü',                                                                                                   // 10716
        100: '\'üncü',                                                                                                 // 10717
        6: '\'ncı',                                                                                                    // 10718
        9: '\'uncu',                                                                                                   // 10719
        10: '\'uncu',                                                                                                  // 10720
        30: '\'uncu',                                                                                                  // 10721
        60: '\'ıncı',                                                                                                  // 10722
        90: '\'ıncı'                                                                                                   // 10723
    };                                                                                                                 // 10724
                                                                                                                       // 10725
    var tr = moment__default.defineLocale('tr', {                                                                      // 10726
        months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),              // 10727
        monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),                                    // 10728
        weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),                                 // 10729
        weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),                                                      // 10730
        weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),                                                               // 10731
        longDateFormat : {                                                                                             // 10732
            LT : 'HH:mm',                                                                                              // 10733
            LTS : 'HH:mm:ss',                                                                                          // 10734
            L : 'DD.MM.YYYY',                                                                                          // 10735
            LL : 'D MMMM YYYY',                                                                                        // 10736
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 10737
            LLLL : 'dddd, D MMMM YYYY HH:mm'                                                                           // 10738
        },                                                                                                             // 10739
        calendar : {                                                                                                   // 10740
            sameDay : '[bugün saat] LT',                                                                               // 10741
            nextDay : '[yarın saat] LT',                                                                               // 10742
            nextWeek : '[haftaya] dddd [saat] LT',                                                                     // 10743
            lastDay : '[dün] LT',                                                                                      // 10744
            lastWeek : '[geçen hafta] dddd [saat] LT',                                                                 // 10745
            sameElse : 'L'                                                                                             // 10746
        },                                                                                                             // 10747
        relativeTime : {                                                                                               // 10748
            future : '%s sonra',                                                                                       // 10749
            past : '%s önce',                                                                                          // 10750
            s : 'birkaç saniye',                                                                                       // 10751
            m : 'bir dakika',                                                                                          // 10752
            mm : '%d dakika',                                                                                          // 10753
            h : 'bir saat',                                                                                            // 10754
            hh : '%d saat',                                                                                            // 10755
            d : 'bir gün',                                                                                             // 10756
            dd : '%d gün',                                                                                             // 10757
            M : 'bir ay',                                                                                              // 10758
            MM : '%d ay',                                                                                              // 10759
            y : 'bir yıl',                                                                                             // 10760
            yy : '%d yıl'                                                                                              // 10761
        },                                                                                                             // 10762
        ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,                                                         // 10763
        ordinal : function (number) {                                                                                  // 10764
            if (number === 0) {  // special case for zero                                                              // 10765
                return number + '\'ıncı';                                                                              // 10766
            }                                                                                                          // 10767
            var a = number % 10,                                                                                       // 10768
                b = number % 100 - a,                                                                                  // 10769
                c = number >= 100 ? 100 : null;                                                                        // 10770
            return number + (tr__suffixes[a] || tr__suffixes[b] || tr__suffixes[c]);                                   // 10771
        },                                                                                                             // 10772
        week : {                                                                                                       // 10773
            dow : 1, // Monday is the first day of the week.                                                           // 10774
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 10775
        }                                                                                                              // 10776
    });                                                                                                                // 10777
                                                                                                                       // 10778
    //! moment.js locale configuration                                                                                 // 10779
    //! locale : talossan (tzl)                                                                                        // 10780
    //! author : Robin van der Vliet : https://github.com/robin0van0der0v with the help of Iustì Canun                 // 10781
                                                                                                                       // 10782
                                                                                                                       // 10783
    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.       // 10784
    // This is currently too difficult (maybe even impossible) to add.                                                 // 10785
    var tzl = moment__default.defineLocale('tzl', {                                                                    // 10786
        months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),     // 10787
        monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),                                    // 10788
        weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),                                   // 10789
        weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),                                                      // 10790
        weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),                                                               // 10791
        longDateFormat : {                                                                                             // 10792
            LT : 'HH.mm',                                                                                              // 10793
            LTS : 'HH.mm.ss',                                                                                          // 10794
            L : 'DD.MM.YYYY',                                                                                          // 10795
            LL : 'D. MMMM [dallas] YYYY',                                                                              // 10796
            LLL : 'D. MMMM [dallas] YYYY HH.mm',                                                                       // 10797
            LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'                                                            // 10798
        },                                                                                                             // 10799
        meridiemParse: /d\'o|d\'a/i,                                                                                   // 10800
        isPM : function (input) {                                                                                      // 10801
            return 'd\'o' === input.toLowerCase();                                                                     // 10802
        },                                                                                                             // 10803
        meridiem : function (hours, minutes, isLower) {                                                                // 10804
            if (hours > 11) {                                                                                          // 10805
                return isLower ? 'd\'o' : 'D\'O';                                                                      // 10806
            } else {                                                                                                   // 10807
                return isLower ? 'd\'a' : 'D\'A';                                                                      // 10808
            }                                                                                                          // 10809
        },                                                                                                             // 10810
        calendar : {                                                                                                   // 10811
            sameDay : '[oxhi à] LT',                                                                                   // 10812
            nextDay : '[demà à] LT',                                                                                   // 10813
            nextWeek : 'dddd [à] LT',                                                                                  // 10814
            lastDay : '[ieiri à] LT',                                                                                  // 10815
            lastWeek : '[sür el] dddd [lasteu à] LT',                                                                  // 10816
            sameElse : 'L'                                                                                             // 10817
        },                                                                                                             // 10818
        relativeTime : {                                                                                               // 10819
            future : 'osprei %s',                                                                                      // 10820
            past : 'ja%s',                                                                                             // 10821
            s : tzl__processRelativeTime,                                                                              // 10822
            m : tzl__processRelativeTime,                                                                              // 10823
            mm : tzl__processRelativeTime,                                                                             // 10824
            h : tzl__processRelativeTime,                                                                              // 10825
            hh : tzl__processRelativeTime,                                                                             // 10826
            d : tzl__processRelativeTime,                                                                              // 10827
            dd : tzl__processRelativeTime,                                                                             // 10828
            M : tzl__processRelativeTime,                                                                              // 10829
            MM : tzl__processRelativeTime,                                                                             // 10830
            y : tzl__processRelativeTime,                                                                              // 10831
            yy : tzl__processRelativeTime                                                                              // 10832
        },                                                                                                             // 10833
        ordinalParse: /\d{1,2}\./,                                                                                     // 10834
        ordinal : '%d.',                                                                                               // 10835
        week : {                                                                                                       // 10836
            dow : 1, // Monday is the first day of the week.                                                           // 10837
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 10838
        }                                                                                                              // 10839
    });                                                                                                                // 10840
                                                                                                                       // 10841
    function tzl__processRelativeTime(number, withoutSuffix, key, isFuture) {                                          // 10842
        var format = {                                                                                                 // 10843
            's': ['viensas secunds', '\'iensas secunds'],                                                              // 10844
            'm': ['\'n míut', '\'iens míut'],                                                                          // 10845
            'mm': [number + ' míuts', '' + number + ' míuts'],                                                         // 10846
            'h': ['\'n þora', '\'iensa þora'],                                                                         // 10847
            'hh': [number + ' þoras', '' + number + ' þoras'],                                                         // 10848
            'd': ['\'n ziua', '\'iensa ziua'],                                                                         // 10849
            'dd': [number + ' ziuas', '' + number + ' ziuas'],                                                         // 10850
            'M': ['\'n mes', '\'iens mes'],                                                                            // 10851
            'MM': [number + ' mesen', '' + number + ' mesen'],                                                         // 10852
            'y': ['\'n ar', '\'iens ar'],                                                                              // 10853
            'yy': [number + ' ars', '' + number + ' ars']                                                              // 10854
        };                                                                                                             // 10855
        return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);                          // 10856
    }                                                                                                                  // 10857
                                                                                                                       // 10858
    //! moment.js locale configuration                                                                                 // 10859
    //! locale : Morocco Central Atlas Tamaziɣt in Latin (tzm-latn)                                                    // 10860
    //! author : Abdel Said : https://github.com/abdelsaid                                                             // 10861
                                                                                                                       // 10862
    var tzm_latn = moment__default.defineLocale('tzm-latn', {                                                          // 10863
        months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),   // 10864
        monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),                                       // 10866
        weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),                                  // 10867
        weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),                                    // 10868
        longDateFormat : {                                                                                             // 10869
            LT : 'HH:mm',                                                                                              // 10870
            LTS : 'HH:mm:ss',                                                                                          // 10871
            L : 'DD/MM/YYYY',                                                                                          // 10872
            LL : 'D MMMM YYYY',                                                                                        // 10873
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 10874
            LLLL : 'dddd D MMMM YYYY HH:mm'                                                                            // 10875
        },                                                                                                             // 10876
        calendar : {                                                                                                   // 10877
            sameDay: '[asdkh g] LT',                                                                                   // 10878
            nextDay: '[aska g] LT',                                                                                    // 10879
            nextWeek: 'dddd [g] LT',                                                                                   // 10880
            lastDay: '[assant g] LT',                                                                                  // 10881
            lastWeek: 'dddd [g] LT',                                                                                   // 10882
            sameElse: 'L'                                                                                              // 10883
        },                                                                                                             // 10884
        relativeTime : {                                                                                               // 10885
            future : 'dadkh s yan %s',                                                                                 // 10886
            past : 'yan %s',                                                                                           // 10887
            s : 'imik',                                                                                                // 10888
            m : 'minuḍ',                                                                                               // 10889
            mm : '%d minuḍ',                                                                                           // 10890
            h : 'saɛa',                                                                                                // 10891
            hh : '%d tassaɛin',                                                                                        // 10892
            d : 'ass',                                                                                                 // 10893
            dd : '%d ossan',                                                                                           // 10894
            M : 'ayowr',                                                                                               // 10895
            MM : '%d iyyirn',                                                                                          // 10896
            y : 'asgas',                                                                                               // 10897
            yy : '%d isgasn'                                                                                           // 10898
        },                                                                                                             // 10899
        week : {                                                                                                       // 10900
            dow : 6, // Saturday is the first day of the week.                                                         // 10901
            doy : 12  // The week that contains Jan 1st is the first week of the year.                                 // 10902
        }                                                                                                              // 10903
    });                                                                                                                // 10904
                                                                                                                       // 10905
    //! moment.js locale configuration                                                                                 // 10906
    //! locale : Morocco Central Atlas Tamaziɣt (tzm)                                                                  // 10907
    //! author : Abdel Said : https://github.com/abdelsaid                                                             // 10908
                                                                                                                       // 10909
    var tzm = moment__default.defineLocale('tzm', {                                                                    // 10910
        months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),         // 10911
        monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),    // 10912
        weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),                                       // 10913
        weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),                                  // 10914
        weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),                                    // 10915
        longDateFormat : {                                                                                             // 10916
            LT : 'HH:mm',                                                                                              // 10917
            LTS: 'HH:mm:ss',                                                                                           // 10918
            L : 'DD/MM/YYYY',                                                                                          // 10919
            LL : 'D MMMM YYYY',                                                                                        // 10920
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 10921
            LLLL : 'dddd D MMMM YYYY HH:mm'                                                                            // 10922
        },                                                                                                             // 10923
        calendar : {                                                                                                   // 10924
            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',                                                                                    // 10925
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',                                                                                    // 10926
            nextWeek: 'dddd [ⴴ] LT',                                                                                   // 10927
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',                                                                                   // 10928
            lastWeek: 'dddd [ⴴ] LT',                                                                                   // 10929
            sameElse: 'L'                                                                                              // 10930
        },                                                                                                             // 10931
        relativeTime : {                                                                                               // 10932
            future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',                                                                                  // 10933
            past : 'ⵢⴰⵏ %s',                                                                                           // 10934
            s : 'ⵉⵎⵉⴽ',                                                                                                // 10935
            m : 'ⵎⵉⵏⵓⴺ',                                                                                               // 10936
            mm : '%d ⵎⵉⵏⵓⴺ',                                                                                           // 10937
            h : 'ⵙⴰⵄⴰ',                                                                                                // 10938
            hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',                                                                                        // 10939
            d : 'ⴰⵙⵙ',                                                                                                 // 10940
            dd : '%d oⵙⵙⴰⵏ',                                                                                           // 10941
            M : 'ⴰⵢoⵓⵔ',                                                                                               // 10942
            MM : '%d ⵉⵢⵢⵉⵔⵏ',                                                                                          // 10943
            y : 'ⴰⵙⴳⴰⵙ',                                                                                               // 10944
            yy : '%d ⵉⵙⴳⴰⵙⵏ'                                                                                           // 10945
        },                                                                                                             // 10946
        week : {                                                                                                       // 10947
            dow : 6, // Saturday is the first day of the week.                                                         // 10948
            doy : 12  // The week that contains Jan 1st is the first week of the year.                                 // 10949
        }                                                                                                              // 10950
    });                                                                                                                // 10951
                                                                                                                       // 10952
    //! moment.js locale configuration                                                                                 // 10953
    //! locale : ukrainian (uk)                                                                                        // 10954
    //! author : zemlanin : https://github.com/zemlanin                                                                // 10955
    //! Author : Menelion Elensúle : https://github.com/Oire                                                           // 10956
                                                                                                                       // 10957
    function uk__plural(word, num) {                                                                                   // 10958
        var forms = word.split('_');                                                                                   // 10959
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }                                                                                                                  // 10961
    function uk__relativeTimeWithPlural(number, withoutSuffix, key) {                                                  // 10962
        var format = {                                                                                                 // 10963
            'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',                                 // 10964
            'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',                                       // 10965
            'dd': 'день_дні_днів',                                                                                     // 10966
            'MM': 'місяць_місяці_місяців',                                                                             // 10967
            'yy': 'рік_роки_років'                                                                                     // 10968
        };                                                                                                             // 10969
        if (key === 'm') {                                                                                             // 10970
            return withoutSuffix ? 'хвилина' : 'хвилину';                                                              // 10971
        }                                                                                                              // 10972
        else if (key === 'h') {                                                                                        // 10973
            return withoutSuffix ? 'година' : 'годину';                                                                // 10974
        }                                                                                                              // 10975
        else {                                                                                                         // 10976
            return number + ' ' + uk__plural(format[key], +number);                                                    // 10977
        }                                                                                                              // 10978
    }                                                                                                                  // 10979
    function weekdaysCaseReplace(m, format) {                                                                          // 10980
        var weekdays = {                                                                                               // 10981
            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),                        // 10982
            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),                        // 10983
            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')                         // 10984
        },                                                                                                             // 10985
        nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?                                                               // 10986
            'accusative' :                                                                                             // 10987
            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?                                                    // 10988
                'genitive' :                                                                                           // 10989
                'nominative');                                                                                         // 10990
        return weekdays[nounCase][m.day()];                                                                            // 10991
    }                                                                                                                  // 10992
    function processHoursFunction(str) {                                                                               // 10993
        return function () {                                                                                           // 10994
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';                                              // 10995
        };                                                                                                             // 10996
    }                                                                                                                  // 10997
                                                                                                                       // 10998
    var uk = moment__default.defineLocale('uk', {                                                                      // 10999
        months : {                                                                                                     // 11000
            'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
            'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
        },                                                                                                             // 11003
        monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),                             // 11004
        weekdays : weekdaysCaseReplace,                                                                                // 11005
        weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),                                                             // 11006
        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),                                                               // 11007
        longDateFormat : {                                                                                             // 11008
            LT : 'HH:mm',                                                                                              // 11009
            LTS : 'HH:mm:ss',                                                                                          // 11010
            L : 'DD.MM.YYYY',                                                                                          // 11011
            LL : 'D MMMM YYYY р.',                                                                                     // 11012
            LLL : 'D MMMM YYYY р., HH:mm',                                                                             // 11013
            LLLL : 'dddd, D MMMM YYYY р., HH:mm'                                                                       // 11014
        },                                                                                                             // 11015
        calendar : {                                                                                                   // 11016
            sameDay: processHoursFunction('[Сьогодні '),                                                               // 11017
            nextDay: processHoursFunction('[Завтра '),                                                                 // 11018
            lastDay: processHoursFunction('[Вчора '),                                                                  // 11019
            nextWeek: processHoursFunction('[У] dddd ['),                                                              // 11020
            lastWeek: function () {                                                                                    // 11021
                switch (this.day()) {                                                                                  // 11022
                case 0:                                                                                                // 11023
                case 3:                                                                                                // 11024
                case 5:                                                                                                // 11025
                case 6:                                                                                                // 11026
                    return processHoursFunction('[Минулої] dddd [').call(this);                                        // 11027
                case 1:                                                                                                // 11028
                case 2:                                                                                                // 11029
                case 4:                                                                                                // 11030
                    return processHoursFunction('[Минулого] dddd [').call(this);                                       // 11031
                }                                                                                                      // 11032
            },                                                                                                         // 11033
            sameElse: 'L'                                                                                              // 11034
        },                                                                                                             // 11035
        relativeTime : {                                                                                               // 11036
            future : 'за %s',                                                                                          // 11037
            past : '%s тому',                                                                                          // 11038
            s : 'декілька секунд',                                                                                     // 11039
            m : uk__relativeTimeWithPlural,                                                                            // 11040
            mm : uk__relativeTimeWithPlural,                                                                           // 11041
            h : 'годину',                                                                                              // 11042
            hh : uk__relativeTimeWithPlural,                                                                           // 11043
            d : 'день',                                                                                                // 11044
            dd : uk__relativeTimeWithPlural,                                                                           // 11045
            M : 'місяць',                                                                                              // 11046
            MM : uk__relativeTimeWithPlural,                                                                           // 11047
            y : 'рік',                                                                                                 // 11048
            yy : uk__relativeTimeWithPlural                                                                            // 11049
        },                                                                                                             // 11050
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /ночі|ранку|дня|вечора/,                                                                        // 11052
        isPM: function (input) {                                                                                       // 11053
            return /^(дня|вечора)$/.test(input);                                                                       // 11054
        },                                                                                                             // 11055
        meridiem : function (hour, minute, isLower) {                                                                  // 11056
            if (hour < 4) {                                                                                            // 11057
                return 'ночі';                                                                                         // 11058
            } else if (hour < 12) {                                                                                    // 11059
                return 'ранку';                                                                                        // 11060
            } else if (hour < 17) {                                                                                    // 11061
                return 'дня';                                                                                          // 11062
            } else {                                                                                                   // 11063
                return 'вечора';                                                                                       // 11064
            }                                                                                                          // 11065
        },                                                                                                             // 11066
        ordinalParse: /\d{1,2}-(й|го)/,                                                                                // 11067
        ordinal: function (number, period) {                                                                           // 11068
            switch (period) {                                                                                          // 11069
            case 'M':                                                                                                  // 11070
            case 'd':                                                                                                  // 11071
            case 'DDD':                                                                                                // 11072
            case 'w':                                                                                                  // 11073
            case 'W':                                                                                                  // 11074
                return number + '-й';                                                                                  // 11075
            case 'D':                                                                                                  // 11076
                return number + '-го';                                                                                 // 11077
            default:                                                                                                   // 11078
                return number;                                                                                         // 11079
            }                                                                                                          // 11080
        },                                                                                                             // 11081
        week : {                                                                                                       // 11082
            dow : 1, // Monday is the first day of the week.                                                           // 11083
            doy : 7  // The week that contains Jan 1st is the first week of the year.                                  // 11084
        }                                                                                                              // 11085
    });                                                                                                                // 11086
                                                                                                                       // 11087
    //! moment.js locale configuration                                                                                 // 11088
    //! locale : uzbek (uz)                                                                                            // 11089
    //! author : Sardor Muminov : https://github.com/muminoff                                                          // 11090
                                                                                                                       // 11091
    var uz = moment__default.defineLocale('uz', {                                                                      // 11092
        months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),                  // 11093
        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),                                    // 11094
        weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),                                  // 11095
        weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),                                                      // 11096
        weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),                                                               // 11097
        longDateFormat : {                                                                                             // 11098
            LT : 'HH:mm',                                                                                              // 11099
            LTS : 'HH:mm:ss',                                                                                          // 11100
            L : 'DD/MM/YYYY',                                                                                          // 11101
            LL : 'D MMMM YYYY',                                                                                        // 11102
            LLL : 'D MMMM YYYY HH:mm',                                                                                 // 11103
            LLLL : 'D MMMM YYYY, dddd HH:mm'                                                                           // 11104
        },                                                                                                             // 11105
        calendar : {                                                                                                   // 11106
            sameDay : '[Бугун соат] LT [да]',                                                                          // 11107
            nextDay : '[Эртага] LT [да]',                                                                              // 11108
            nextWeek : 'dddd [куни соат] LT [да]',                                                                     // 11109
            lastDay : '[Кеча соат] LT [да]',                                                                           // 11110
            lastWeek : '[Утган] dddd [куни соат] LT [да]',                                                             // 11111
            sameElse : 'L'                                                                                             // 11112
        },                                                                                                             // 11113
        relativeTime : {                                                                                               // 11114
            future : 'Якин %s ичида',                                                                                  // 11115
            past : 'Бир неча %s олдин',                                                                                // 11116
            s : 'фурсат',                                                                                              // 11117
            m : 'бир дакика',                                                                                          // 11118
            mm : '%d дакика',                                                                                          // 11119
            h : 'бир соат',                                                                                            // 11120
            hh : '%d соат',                                                                                            // 11121
            d : 'бир кун',                                                                                             // 11122
            dd : '%d кун',                                                                                             // 11123
            M : 'бир ой',                                                                                              // 11124
            MM : '%d ой',                                                                                              // 11125
            y : 'бир йил',                                                                                             // 11126
            yy : '%d йил'                                                                                              // 11127
        },                                                                                                             // 11128
        week : {                                                                                                       // 11129
            dow : 1, // Monday is the first day of the week.                                                           // 11130
            doy : 7  // The week that contains Jan 4th is the first week of the year.                                  // 11131
        }                                                                                                              // 11132
    });                                                                                                                // 11133
                                                                                                                       // 11134
    //! moment.js locale configuration                                                                                 // 11135
    //! locale : vietnamese (vi)                                                                                       // 11136
    //! author : Bang Nguyen : https://github.com/bangnk                                                               // 11137
                                                                                                                       // 11138
    var vi = moment__default.defineLocale('vi', {                                                                      // 11139
        months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
        monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),                        // 11141
        weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),                                // 11142
        weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),                                                             // 11143
        weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),                                                               // 11144
        meridiemParse: /sa|ch/i,                                                                                       // 11145
        isPM : function (input) {                                                                                      // 11146
            return /^ch$/i.test(input);                                                                                // 11147
        },                                                                                                             // 11148
        meridiem : function (hours, minutes, isLower) {                                                                // 11149
            if (hours < 12) {                                                                                          // 11150
                return isLower ? 'sa' : 'SA';                                                                          // 11151
            } else {                                                                                                   // 11152
                return isLower ? 'ch' : 'CH';                                                                          // 11153
            }                                                                                                          // 11154
        },                                                                                                             // 11155
        longDateFormat : {                                                                                             // 11156
            LT : 'HH:mm',                                                                                              // 11157
            LTS : 'HH:mm:ss',                                                                                          // 11158
            L : 'DD/MM/YYYY',                                                                                          // 11159
            LL : 'D MMMM [năm] YYYY',                                                                                  // 11160
            LLL : 'D MMMM [năm] YYYY HH:mm',                                                                           // 11161
            LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',                                                                    // 11162
            l : 'DD/M/YYYY',                                                                                           // 11163
            ll : 'D MMM YYYY',                                                                                         // 11164
            lll : 'D MMM YYYY HH:mm',                                                                                  // 11165
            llll : 'ddd, D MMM YYYY HH:mm'                                                                             // 11166
        },                                                                                                             // 11167
        calendar : {                                                                                                   // 11168
            sameDay: '[Hôm nay lúc] LT',                                                                               // 11169
            nextDay: '[Ngày mai lúc] LT',                                                                              // 11170
            nextWeek: 'dddd [tuần tới lúc] LT',                                                                        // 11171
            lastDay: '[Hôm qua lúc] LT',                                                                               // 11172
            lastWeek: 'dddd [tuần rồi lúc] LT',                                                                        // 11173
            sameElse: 'L'                                                                                              // 11174
        },                                                                                                             // 11175
        relativeTime : {                                                                                               // 11176
            future : '%s tới',                                                                                         // 11177
            past : '%s trước',                                                                                         // 11178
            s : 'vài giây',                                                                                            // 11179
            m : 'một phút',                                                                                            // 11180
            mm : '%d phút',                                                                                            // 11181
            h : 'một giờ',                                                                                             // 11182
            hh : '%d giờ',                                                                                             // 11183
            d : 'một ngày',                                                                                            // 11184
            dd : '%d ngày',                                                                                            // 11185
            M : 'một tháng',                                                                                           // 11186
            MM : '%d tháng',                                                                                           // 11187
            y : 'một năm',                                                                                             // 11188
            yy : '%d năm'                                                                                              // 11189
        },                                                                                                             // 11190
        ordinalParse: /\d{1,2}/,                                                                                       // 11191
        ordinal : function (number) {                                                                                  // 11192
            return number;                                                                                             // 11193
        },                                                                                                             // 11194
        week : {                                                                                                       // 11195
            dow : 1, // Monday is the first day of the week.                                                           // 11196
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 11197
        }                                                                                                              // 11198
    });                                                                                                                // 11199
                                                                                                                       // 11200
    //! moment.js locale configuration                                                                                 // 11201
    //! locale : chinese (zh-cn)                                                                                       // 11202
    //! author : suupic : https://github.com/suupic                                                                    // 11203
    //! author : Zeno Zeng : https://github.com/zenozeng                                                               // 11204
                                                                                                                       // 11205
    var zh_cn = moment__default.defineLocale('zh-cn', {                                                                // 11206
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),                                                   // 11207
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),                                             // 11208
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),                                                           // 11209
        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),                                                             // 11210
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),                                                                      // 11211
        longDateFormat : {                                                                                             // 11212
            LT : 'Ah点mm分',                                                                                             // 11213
            LTS : 'Ah点m分s秒',                                                                                           // 11214
            L : 'YYYY-MM-DD',                                                                                          // 11215
            LL : 'YYYY年MMMD日',                                                                                         // 11216
            LLL : 'YYYY年MMMD日Ah点mm分',                                                                                  // 11217
            LLLL : 'YYYY年MMMD日ddddAh点mm分',                                                                             // 11218
            l : 'YYYY-MM-DD',                                                                                          // 11219
            ll : 'YYYY年MMMD日',                                                                                         // 11220
            lll : 'YYYY年MMMD日Ah点mm分',                                                                                  // 11221
            llll : 'YYYY年MMMD日ddddAh点mm分'                                                                              // 11222
        },                                                                                                             // 11223
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,                                                                            // 11224
        meridiemHour: function (hour, meridiem) {                                                                      // 11225
            if (hour === 12) {                                                                                         // 11226
                hour = 0;                                                                                              // 11227
            }                                                                                                          // 11228
            if (meridiem === '凌晨' || meridiem === '早上' ||                                                              // 11229
                    meridiem === '上午') {                                                                               // 11230
                return hour;                                                                                           // 11231
            } else if (meridiem === '下午' || meridiem === '晚上') {                                                       // 11232
                return hour + 12;                                                                                      // 11233
            } else {                                                                                                   // 11234
                // '中午'                                                                                                // 11235
                return hour >= 11 ? hour : hour + 12;                                                                  // 11236
            }                                                                                                          // 11237
        },                                                                                                             // 11238
        meridiem : function (hour, minute, isLower) {                                                                  // 11239
            var hm = hour * 100 + minute;                                                                              // 11240
            if (hm < 600) {                                                                                            // 11241
                return '凌晨';                                                                                           // 11242
            } else if (hm < 900) {                                                                                     // 11243
                return '早上';                                                                                           // 11244
            } else if (hm < 1130) {                                                                                    // 11245
                return '上午';                                                                                           // 11246
            } else if (hm < 1230) {                                                                                    // 11247
                return '中午';                                                                                           // 11248
            } else if (hm < 1800) {                                                                                    // 11249
                return '下午';                                                                                           // 11250
            } else {                                                                                                   // 11251
                return '晚上';                                                                                           // 11252
            }                                                                                                          // 11253
        },                                                                                                             // 11254
        calendar : {                                                                                                   // 11255
            sameDay : function () {                                                                                    // 11256
                return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';                                                 // 11257
            },                                                                                                         // 11258
            nextDay : function () {                                                                                    // 11259
                return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';                                                 // 11260
            },                                                                                                         // 11261
            lastDay : function () {                                                                                    // 11262
                return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';                                                 // 11263
            },                                                                                                         // 11264
            nextWeek : function () {                                                                                   // 11265
                var startOfWeek, prefix;                                                                               // 11266
                startOfWeek = moment__default().startOf('week');                                                       // 11267
                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[下]' : '[本]';                            // 11268
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';                                // 11269
            },                                                                                                         // 11270
            lastWeek : function () {                                                                                   // 11271
                var startOfWeek, prefix;                                                                               // 11272
                startOfWeek = moment__default().startOf('week');                                                       // 11273
                prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';                                            // 11274
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';                                // 11275
            },                                                                                                         // 11276
            sameElse : 'LL'                                                                                            // 11277
        },                                                                                                             // 11278
        ordinalParse: /\d{1,2}(日|月|周)/,                                                                                // 11279
        ordinal : function (number, period) {                                                                          // 11280
            switch (period) {                                                                                          // 11281
            case 'd':                                                                                                  // 11282
            case 'D':                                                                                                  // 11283
            case 'DDD':                                                                                                // 11284
                return number + '日';                                                                                   // 11285
            case 'M':                                                                                                  // 11286
                return number + '月';                                                                                   // 11287
            case 'w':                                                                                                  // 11288
            case 'W':                                                                                                  // 11289
                return number + '周';                                                                                   // 11290
            default:                                                                                                   // 11291
                return number;                                                                                         // 11292
            }                                                                                                          // 11293
        },                                                                                                             // 11294
        relativeTime : {                                                                                               // 11295
            future : '%s内',                                                                                            // 11296
            past : '%s前',                                                                                              // 11297
            s : '几秒',                                                                                                  // 11298
            m : '1 分钟',                                                                                                // 11299
            mm : '%d 分钟',                                                                                              // 11300
            h : '1 小时',                                                                                                // 11301
            hh : '%d 小时',                                                                                              // 11302
            d : '1 天',                                                                                                 // 11303
            dd : '%d 天',                                                                                               // 11304
            M : '1 个月',                                                                                                // 11305
            MM : '%d 个月',                                                                                              // 11306
            y : '1 年',                                                                                                 // 11307
            yy : '%d 年'                                                                                                // 11308
        },                                                                                                             // 11309
        week : {                                                                                                       // 11310
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效                                                  // 11311
            dow : 1, // Monday is the first day of the week.                                                           // 11312
            doy : 4  // The week that contains Jan 4th is the first week of the year.                                  // 11313
        }                                                                                                              // 11314
    });                                                                                                                // 11315
                                                                                                                       // 11316
    //! moment.js locale configuration                                                                                 // 11317
    //! locale : traditional chinese (zh-tw)                                                                           // 11318
    //! author : Ben : https://github.com/ben-lin                                                                      // 11319
                                                                                                                       // 11320
    var zh_tw = moment__default.defineLocale('zh-tw', {                                                                // 11321
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),                                                   // 11322
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),                                             // 11323
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),                                                           // 11324
        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),                                                             // 11325
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),                                                                      // 11326
        longDateFormat : {                                                                                             // 11327
            LT : 'Ah點mm分',                                                                                             // 11328
            LTS : 'Ah點m分s秒',                                                                                           // 11329
            L : 'YYYY年MMMD日',                                                                                          // 11330
            LL : 'YYYY年MMMD日',                                                                                         // 11331
            LLL : 'YYYY年MMMD日Ah點mm分',                                                                                  // 11332
            LLLL : 'YYYY年MMMD日ddddAh點mm分',                                                                             // 11333
            l : 'YYYY年MMMD日',                                                                                          // 11334
            ll : 'YYYY年MMMD日',                                                                                         // 11335
            lll : 'YYYY年MMMD日Ah點mm分',                                                                                  // 11336
            llll : 'YYYY年MMMD日ddddAh點mm分'                                                                              // 11337
        },                                                                                                             // 11338
        meridiemParse: /早上|上午|中午|下午|晚上/,                                                                               // 11339
        meridiemHour : function (hour, meridiem) {                                                                     // 11340
            if (hour === 12) {                                                                                         // 11341
                hour = 0;                                                                                              // 11342
            }                                                                                                          // 11343
            if (meridiem === '早上' || meridiem === '上午') {                                                              // 11344
                return hour;                                                                                           // 11345
            } else if (meridiem === '中午') {                                                                            // 11346
                return hour >= 11 ? hour : hour + 12;                                                                  // 11347
            } else if (meridiem === '下午' || meridiem === '晚上') {                                                       // 11348
                return hour + 12;                                                                                      // 11349
            }                                                                                                          // 11350
        },                                                                                                             // 11351
        meridiem : function (hour, minute, isLower) {                                                                  // 11352
            var hm = hour * 100 + minute;                                                                              // 11353
            if (hm < 900) {                                                                                            // 11354
                return '早上';                                                                                           // 11355
            } else if (hm < 1130) {                                                                                    // 11356
                return '上午';                                                                                           // 11357
            } else if (hm < 1230) {                                                                                    // 11358
                return '中午';                                                                                           // 11359
            } else if (hm < 1800) {                                                                                    // 11360
                return '下午';                                                                                           // 11361
            } else {                                                                                                   // 11362
                return '晚上';                                                                                           // 11363
            }                                                                                                          // 11364
        },                                                                                                             // 11365
        calendar : {                                                                                                   // 11366
            sameDay : '[今天]LT',                                                                                        // 11367
            nextDay : '[明天]LT',                                                                                        // 11368
            nextWeek : '[下]ddddLT',                                                                                    // 11369
            lastDay : '[昨天]LT',                                                                                        // 11370
            lastWeek : '[上]ddddLT',                                                                                    // 11371
            sameElse : 'L'                                                                                             // 11372
        },                                                                                                             // 11373
        ordinalParse: /\d{1,2}(日|月|週)/,                                                                                // 11374
        ordinal : function (number, period) {                                                                          // 11375
            switch (period) {                                                                                          // 11376
            case 'd' :                                                                                                 // 11377
            case 'D' :                                                                                                 // 11378
            case 'DDD' :                                                                                               // 11379
                return number + '日';                                                                                   // 11380
            case 'M' :                                                                                                 // 11381
                return number + '月';                                                                                   // 11382
            case 'w' :                                                                                                 // 11383
            case 'W' :                                                                                                 // 11384
                return number + '週';                                                                                   // 11385
            default :                                                                                                  // 11386
                return number;                                                                                         // 11387
            }                                                                                                          // 11388
        },                                                                                                             // 11389
        relativeTime : {                                                                                               // 11390
            future : '%s內',                                                                                            // 11391
            past : '%s前',                                                                                              // 11392
            s : '幾秒',                                                                                                  // 11393
            m : '一分鐘',                                                                                                 // 11394
            mm : '%d分鐘',                                                                                               // 11395
            h : '一小時',                                                                                                 // 11396
            hh : '%d小時',                                                                                               // 11397
            d : '一天',                                                                                                  // 11398
            dd : '%d天',                                                                                                // 11399
            M : '一個月',                                                                                                 // 11400
            MM : '%d個月',                                                                                               // 11401
            y : '一年',                                                                                                  // 11402
            yy : '%d年'                                                                                                 // 11403
        }                                                                                                              // 11404
    });                                                                                                                // 11405
                                                                                                                       // 11406
    var moment_with_locales = moment__default;                                                                         // 11407
    moment_with_locales.locale('en');                                                                                  // 11408
                                                                                                                       // 11409
    return moment_with_locales;                                                                                        // 11410
                                                                                                                       // 11411
}));                                                                                                                   // 11412
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jeeeyul_moment-with-langs/lib/moment-timezone-with-data.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
//! moment-timezone.js                                                                                                 // 1
//! version : 0.5.3                                                                                                    // 2
//! author : Tim Wood                                                                                                  // 3
//! license : MIT                                                                                                      // 4
//! github.com/moment/moment-timezone                                                                                  // 5
                                                                                                                       // 6
(function (root, factory) {                                                                                            // 7
	"use strict";                                                                                                         // 8
                                                                                                                       // 9
	/*global define*/                                                                                                     // 10
	if (typeof define === 'function' && define.amd) {                                                                     // 11
		define(['moment'], factory);                 // AMD                                                                  // 12
	} else if (typeof module === 'object' && module.exports) {                                                            // 13
		module.exports = factory(require('moment')); // Node                                                                 // 14
	} else {                                                                                                              // 15
		factory(root.moment);                        // Browser                                                              // 16
	}                                                                                                                     // 17
}(this, function (moment) {                                                                                            // 18
	"use strict";                                                                                                         // 19
                                                                                                                       // 20
	// Do not load moment-timezone a second time.                                                                         // 21
	if (moment.tz !== undefined) {                                                                                        // 22
		logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
		return moment;                                                                                                       // 24
	}                                                                                                                     // 25
                                                                                                                       // 26
	var VERSION = "0.5.3",                                                                                                // 27
		zones = {},                                                                                                          // 28
		links = {},                                                                                                          // 29
		names = {},                                                                                                          // 30
		guesses = {},                                                                                                        // 31
		cachedGuess,                                                                                                         // 32
                                                                                                                       // 33
		momentVersion = moment.version.split('.'),                                                                           // 34
		major = +momentVersion[0],                                                                                           // 35
		minor = +momentVersion[1];                                                                                           // 36
                                                                                                                       // 37
	// Moment.js version check                                                                                            // 38
	if (major < 2 || (major === 2 && minor < 6)) {                                                                        // 39
		logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
	}                                                                                                                     // 41
                                                                                                                       // 42
	/************************************                                                                                 // 43
		Unpacking                                                                                                            // 44
	************************************/                                                                                 // 45
                                                                                                                       // 46
	function charCodeToInt(charCode) {                                                                                    // 47
		if (charCode > 96) {                                                                                                 // 48
			return charCode - 87;                                                                                               // 49
		} else if (charCode > 64) {                                                                                          // 50
			return charCode - 29;                                                                                               // 51
		}                                                                                                                    // 52
		return charCode - 48;                                                                                                // 53
	}                                                                                                                     // 54
                                                                                                                       // 55
	function unpackBase60(string) {                                                                                       // 56
		var i = 0,                                                                                                           // 57
			parts = string.split('.'),                                                                                          // 58
			whole = parts[0],                                                                                                   // 59
			fractional = parts[1] || '',                                                                                        // 60
			multiplier = 1,                                                                                                     // 61
			num,                                                                                                                // 62
			out = 0,                                                                                                            // 63
			sign = 1;                                                                                                           // 64
                                                                                                                       // 65
		// handle negative numbers                                                                                           // 66
		if (string.charCodeAt(0) === 45) {                                                                                   // 67
			i = 1;                                                                                                              // 68
			sign = -1;                                                                                                          // 69
		}                                                                                                                    // 70
                                                                                                                       // 71
		// handle digits before the decimal                                                                                  // 72
		for (i; i < whole.length; i++) {                                                                                     // 73
			num = charCodeToInt(whole.charCodeAt(i));                                                                           // 74
			out = 60 * out + num;                                                                                               // 75
		}                                                                                                                    // 76
                                                                                                                       // 77
		// handle digits after the decimal                                                                                   // 78
		for (i = 0; i < fractional.length; i++) {                                                                            // 79
			multiplier = multiplier / 60;                                                                                       // 80
			num = charCodeToInt(fractional.charCodeAt(i));                                                                      // 81
			out += num * multiplier;                                                                                            // 82
		}                                                                                                                    // 83
                                                                                                                       // 84
		return out * sign;                                                                                                   // 85
	}                                                                                                                     // 86
                                                                                                                       // 87
	function arrayToInt (array) {                                                                                         // 88
		for (var i = 0; i < array.length; i++) {                                                                             // 89
			array[i] = unpackBase60(array[i]);                                                                                  // 90
		}                                                                                                                    // 91
	}                                                                                                                     // 92
                                                                                                                       // 93
	function intToUntil (array, length) {                                                                                 // 94
		for (var i = 0; i < length; i++) {                                                                                   // 95
			array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds                         // 96
		}                                                                                                                    // 97
                                                                                                                       // 98
		array[length - 1] = Infinity;                                                                                        // 99
	}                                                                                                                     // 100
                                                                                                                       // 101
	function mapIndices (source, indices) {                                                                               // 102
		var out = [], i;                                                                                                     // 103
                                                                                                                       // 104
		for (i = 0; i < indices.length; i++) {                                                                               // 105
			out[i] = source[indices[i]];                                                                                        // 106
		}                                                                                                                    // 107
                                                                                                                       // 108
		return out;                                                                                                          // 109
	}                                                                                                                     // 110
                                                                                                                       // 111
	function unpack (string) {                                                                                            // 112
		var data = string.split('|'),                                                                                        // 113
			offsets = data[2].split(' '),                                                                                       // 114
			indices = data[3].split(''),                                                                                        // 115
			untils  = data[4].split(' ');                                                                                       // 116
                                                                                                                       // 117
		arrayToInt(offsets);                                                                                                 // 118
		arrayToInt(indices);                                                                                                 // 119
		arrayToInt(untils);                                                                                                  // 120
                                                                                                                       // 121
		intToUntil(untils, indices.length);                                                                                  // 122
                                                                                                                       // 123
		return {                                                                                                             // 124
			name       : data[0],                                                                                               // 125
			abbrs      : mapIndices(data[1].split(' '), indices),                                                               // 126
			offsets    : mapIndices(offsets, indices),                                                                          // 127
			untils     : untils,                                                                                                // 128
			population : data[5] | 0                                                                                            // 129
		};                                                                                                                   // 130
	}                                                                                                                     // 131
                                                                                                                       // 132
	/************************************                                                                                 // 133
		Zone object                                                                                                          // 134
	************************************/                                                                                 // 135
                                                                                                                       // 136
	function Zone (packedString) {                                                                                        // 137
		if (packedString) {                                                                                                  // 138
			this._set(unpack(packedString));                                                                                    // 139
		}                                                                                                                    // 140
	}                                                                                                                     // 141
                                                                                                                       // 142
	Zone.prototype = {                                                                                                    // 143
		_set : function (unpacked) {                                                                                         // 144
			this.name       = unpacked.name;                                                                                    // 145
			this.abbrs      = unpacked.abbrs;                                                                                   // 146
			this.untils     = unpacked.untils;                                                                                  // 147
			this.offsets    = unpacked.offsets;                                                                                 // 148
			this.population = unpacked.population;                                                                              // 149
		},                                                                                                                   // 150
                                                                                                                       // 151
		_index : function (timestamp) {                                                                                      // 152
			var target = +timestamp,                                                                                            // 153
				untils = this.untils,                                                                                              // 154
				i;                                                                                                                 // 155
                                                                                                                       // 156
			for (i = 0; i < untils.length; i++) {                                                                               // 157
				if (target < untils[i]) {                                                                                          // 158
					return i;                                                                                                         // 159
				}                                                                                                                  // 160
			}                                                                                                                   // 161
		},                                                                                                                   // 162
                                                                                                                       // 163
		parse : function (timestamp) {                                                                                       // 164
			var target  = +timestamp,                                                                                           // 165
				offsets = this.offsets,                                                                                            // 166
				untils  = this.untils,                                                                                             // 167
				max     = untils.length - 1,                                                                                       // 168
				offset, offsetNext, offsetPrev, i;                                                                                 // 169
                                                                                                                       // 170
			for (i = 0; i < max; i++) {                                                                                         // 171
				offset     = offsets[i];                                                                                           // 172
				offsetNext = offsets[i + 1];                                                                                       // 173
				offsetPrev = offsets[i ? i - 1 : i];                                                                               // 174
                                                                                                                       // 175
				if (offset < offsetNext && tz.moveAmbiguousForward) {                                                              // 176
					offset = offsetNext;                                                                                              // 177
				} else if (offset > offsetPrev && tz.moveInvalidForward) {                                                         // 178
					offset = offsetPrev;                                                                                              // 179
				}                                                                                                                  // 180
                                                                                                                       // 181
				if (target < untils[i] - (offset * 60000)) {                                                                       // 182
					return offsets[i];                                                                                                // 183
				}                                                                                                                  // 184
			}                                                                                                                   // 185
                                                                                                                       // 186
			return offsets[max];                                                                                                // 187
		},                                                                                                                   // 188
                                                                                                                       // 189
		abbr : function (mom) {                                                                                              // 190
			return this.abbrs[this._index(mom)];                                                                                // 191
		},                                                                                                                   // 192
                                                                                                                       // 193
		offset : function (mom) {                                                                                            // 194
			return this.offsets[this._index(mom)];                                                                              // 195
		}                                                                                                                    // 196
	};                                                                                                                    // 197
                                                                                                                       // 198
	/************************************                                                                                 // 199
		Current Timezone                                                                                                     // 200
	************************************/                                                                                 // 201
                                                                                                                       // 202
	function OffsetAt(at) {                                                                                               // 203
		var timeString = at.toTimeString();                                                                                  // 204
		var abbr = timeString.match(/\([a-z ]+\)/i);                                                                         // 205
		if (abbr && abbr[0]) {                                                                                               // 206
			// 17:56:31 GMT-0600 (CST)                                                                                          // 207
			// 17:56:31 GMT-0600 (Central Standard Time)                                                                        // 208
			abbr = abbr[0].match(/[A-Z]/g);                                                                                     // 209
			abbr = abbr ? abbr.join('') : undefined;                                                                            // 210
		} else {                                                                                                             // 211
			// 17:56:31 CST                                                                                                     // 212
			// 17:56:31 GMT+0800 (台北標準時間)                                                                                       // 213
			abbr = timeString.match(/[A-Z]{3,5}/g);                                                                             // 214
			abbr = abbr ? abbr[0] : undefined;                                                                                  // 215
		}                                                                                                                    // 216
                                                                                                                       // 217
		if (abbr === 'GMT') {                                                                                                // 218
			abbr = undefined;                                                                                                   // 219
		}                                                                                                                    // 220
                                                                                                                       // 221
		this.at = +at;                                                                                                       // 222
		this.abbr = abbr;                                                                                                    // 223
		this.offset = at.getTimezoneOffset();                                                                                // 224
	}                                                                                                                     // 225
                                                                                                                       // 226
	function ZoneScore(zone) {                                                                                            // 227
		this.zone = zone;                                                                                                    // 228
		this.offsetScore = 0;                                                                                                // 229
		this.abbrScore = 0;                                                                                                  // 230
	}                                                                                                                     // 231
                                                                                                                       // 232
	ZoneScore.prototype.scoreOffsetAt = function (offsetAt) {                                                             // 233
		this.offsetScore += Math.abs(this.zone.offset(offsetAt.at) - offsetAt.offset);                                       // 234
		if (this.zone.abbr(offsetAt.at).match(/[A-Z]/g).join('') !== offsetAt.abbr) {                                        // 235
			this.abbrScore++;                                                                                                   // 236
		}                                                                                                                    // 237
	};                                                                                                                    // 238
                                                                                                                       // 239
	function findChange(low, high) {                                                                                      // 240
		var mid, diff;                                                                                                       // 241
                                                                                                                       // 242
		while ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {                                                             // 243
			mid = new OffsetAt(new Date(low.at + diff));                                                                        // 244
			if (mid.offset === low.offset) {                                                                                    // 245
				low = mid;                                                                                                         // 246
			} else {                                                                                                            // 247
				high = mid;                                                                                                        // 248
			}                                                                                                                   // 249
		}                                                                                                                    // 250
                                                                                                                       // 251
		return low;                                                                                                          // 252
	}                                                                                                                     // 253
                                                                                                                       // 254
	function userOffsets() {                                                                                              // 255
		var startYear = new Date().getFullYear() - 2,                                                                        // 256
			last = new OffsetAt(new Date(startYear, 0, 1)),                                                                     // 257
			offsets = [last],                                                                                                   // 258
			change, next, i;                                                                                                    // 259
                                                                                                                       // 260
		for (i = 1; i < 48; i++) {                                                                                           // 261
			next = new OffsetAt(new Date(startYear, i, 1));                                                                     // 262
			if (next.offset !== last.offset) {                                                                                  // 263
				change = findChange(last, next);                                                                                   // 264
				offsets.push(change);                                                                                              // 265
				offsets.push(new OffsetAt(new Date(change.at + 6e4)));                                                             // 266
			}                                                                                                                   // 267
			last = next;                                                                                                        // 268
		}                                                                                                                    // 269
                                                                                                                       // 270
		for (i = 0; i < 4; i++) {                                                                                            // 271
			offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));                                                          // 272
			offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));                                                          // 273
		}                                                                                                                    // 274
                                                                                                                       // 275
		return offsets;                                                                                                      // 276
	}                                                                                                                     // 277
                                                                                                                       // 278
	function sortZoneScores (a, b) {                                                                                      // 279
		if (a.offsetScore !== b.offsetScore) {                                                                               // 280
			return a.offsetScore - b.offsetScore;                                                                               // 281
		}                                                                                                                    // 282
		if (a.abbrScore !== b.abbrScore) {                                                                                   // 283
			return a.abbrScore - b.abbrScore;                                                                                   // 284
		}                                                                                                                    // 285
		return b.zone.population - a.zone.population;                                                                        // 286
	}                                                                                                                     // 287
                                                                                                                       // 288
	function addToGuesses (name, offsets) {                                                                               // 289
		var i, offset;                                                                                                       // 290
		arrayToInt(offsets);                                                                                                 // 291
		for (i = 0; i < offsets.length; i++) {                                                                               // 292
			offset = offsets[i];                                                                                                // 293
			guesses[offset] = guesses[offset] || {};                                                                            // 294
			guesses[offset][name] = true;                                                                                       // 295
		}                                                                                                                    // 296
	}                                                                                                                     // 297
                                                                                                                       // 298
	function guessesForUserOffsets (offsets) {                                                                            // 299
		var offsetsLength = offsets.length,                                                                                  // 300
			filteredGuesses = {},                                                                                               // 301
			out = [],                                                                                                           // 302
			i, j, guessesOffset;                                                                                                // 303
                                                                                                                       // 304
		for (i = 0; i < offsetsLength; i++) {                                                                                // 305
			guessesOffset = guesses[offsets[i].offset] || {};                                                                   // 306
			for (j in guessesOffset) {                                                                                          // 307
				if (guessesOffset.hasOwnProperty(j)) {                                                                             // 308
					filteredGuesses[j] = true;                                                                                        // 309
				}                                                                                                                  // 310
			}                                                                                                                   // 311
		}                                                                                                                    // 312
                                                                                                                       // 313
		for (i in filteredGuesses) {                                                                                         // 314
			if (filteredGuesses.hasOwnProperty(i)) {                                                                            // 315
				out.push(names[i]);                                                                                                // 316
			}                                                                                                                   // 317
		}                                                                                                                    // 318
                                                                                                                       // 319
		return out;                                                                                                          // 320
	}                                                                                                                     // 321
                                                                                                                       // 322
	function rebuildGuess () {                                                                                            // 323
                                                                                                                       // 324
		// use Intl API when available and returning valid time zone                                                         // 325
		try {                                                                                                                // 326
			var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;                                                    // 327
			var name = names[normalizeName(intlName)];                                                                          // 328
			if (name) {                                                                                                         // 329
				return name;                                                                                                       // 330
			}                                                                                                                   // 331
			logError("Moment Timezone found " + intlName + " from the Intl api, but did not have that data loaded.");           // 332
		} catch (e) {                                                                                                        // 333
			// Intl unavailable, fall back to manual guessing.                                                                  // 334
		}                                                                                                                    // 335
                                                                                                                       // 336
		var offsets = userOffsets(),                                                                                         // 337
			offsetsLength = offsets.length,                                                                                     // 338
			guesses = guessesForUserOffsets(offsets),                                                                           // 339
			zoneScores = [],                                                                                                    // 340
			zoneScore, i, j;                                                                                                    // 341
                                                                                                                       // 342
		for (i = 0; i < guesses.length; i++) {                                                                               // 343
			zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);                                                      // 344
			for (j = 0; j < offsetsLength; j++) {                                                                               // 345
				zoneScore.scoreOffsetAt(offsets[j]);                                                                               // 346
			}                                                                                                                   // 347
			zoneScores.push(zoneScore);                                                                                         // 348
		}                                                                                                                    // 349
                                                                                                                       // 350
		zoneScores.sort(sortZoneScores);                                                                                     // 351
                                                                                                                       // 352
		return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;                                                  // 353
	}                                                                                                                     // 354
                                                                                                                       // 355
	function guess (ignoreCache) {                                                                                        // 356
		if (!cachedGuess || ignoreCache) {                                                                                   // 357
			cachedGuess = rebuildGuess();                                                                                       // 358
		}                                                                                                                    // 359
		return cachedGuess;                                                                                                  // 360
	}                                                                                                                     // 361
                                                                                                                       // 362
	/************************************                                                                                 // 363
		Global Methods                                                                                                       // 364
	************************************/                                                                                 // 365
                                                                                                                       // 366
	function normalizeName (name) {                                                                                       // 367
		return (name || '').toLowerCase().replace(/\//g, '_');                                                               // 368
	}                                                                                                                     // 369
                                                                                                                       // 370
	function addZone (packed) {                                                                                           // 371
		var i, name, split, normalized;                                                                                      // 372
                                                                                                                       // 373
		if (typeof packed === "string") {                                                                                    // 374
			packed = [packed];                                                                                                  // 375
		}                                                                                                                    // 376
                                                                                                                       // 377
		for (i = 0; i < packed.length; i++) {                                                                                // 378
			split = packed[i].split('|');                                                                                       // 379
			name = split[0];                                                                                                    // 380
			normalized = normalizeName(name);                                                                                   // 381
			zones[normalized] = packed[i];                                                                                      // 382
			names[normalized] = name;                                                                                           // 383
			if (split[5]) {                                                                                                     // 384
				addToGuesses(normalized, split[2].split(' '));                                                                     // 385
			}                                                                                                                   // 386
		}                                                                                                                    // 387
	}                                                                                                                     // 388
                                                                                                                       // 389
	function getZone (name, caller) {                                                                                     // 390
		name = normalizeName(name);                                                                                          // 391
                                                                                                                       // 392
		var zone = zones[name];                                                                                              // 393
		var link;                                                                                                            // 394
                                                                                                                       // 395
		if (zone instanceof Zone) {                                                                                          // 396
			return zone;                                                                                                        // 397
		}                                                                                                                    // 398
                                                                                                                       // 399
		if (typeof zone === 'string') {                                                                                      // 400
			zone = new Zone(zone);                                                                                              // 401
			zones[name] = zone;                                                                                                 // 402
			return zone;                                                                                                        // 403
		}                                                                                                                    // 404
                                                                                                                       // 405
		// Pass getZone to prevent recursion more than 1 level deep                                                          // 406
		if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {                                   // 407
			zone = zones[name] = new Zone();                                                                                    // 408
			zone._set(link);                                                                                                    // 409
			zone.name = names[name];                                                                                            // 410
			return zone;                                                                                                        // 411
		}                                                                                                                    // 412
                                                                                                                       // 413
		return null;                                                                                                         // 414
	}                                                                                                                     // 415
                                                                                                                       // 416
	function getNames () {                                                                                                // 417
		var i, out = [];                                                                                                     // 418
                                                                                                                       // 419
		for (i in names) {                                                                                                   // 420
			if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {                                         // 421
				out.push(names[i]);                                                                                                // 422
			}                                                                                                                   // 423
		}                                                                                                                    // 424
                                                                                                                       // 425
		return out.sort();                                                                                                   // 426
	}                                                                                                                     // 427
                                                                                                                       // 428
	function addLink (aliases) {                                                                                          // 429
		var i, alias, normal0, normal1;                                                                                      // 430
                                                                                                                       // 431
		if (typeof aliases === "string") {                                                                                   // 432
			aliases = [aliases];                                                                                                // 433
		}                                                                                                                    // 434
                                                                                                                       // 435
		for (i = 0; i < aliases.length; i++) {                                                                               // 436
			alias = aliases[i].split('|');                                                                                      // 437
                                                                                                                       // 438
			normal0 = normalizeName(alias[0]);                                                                                  // 439
			normal1 = normalizeName(alias[1]);                                                                                  // 440
                                                                                                                       // 441
			links[normal0] = normal1;                                                                                           // 442
			names[normal0] = alias[0];                                                                                          // 443
                                                                                                                       // 444
			links[normal1] = normal0;                                                                                           // 445
			names[normal1] = alias[1];                                                                                          // 446
		}                                                                                                                    // 447
	}                                                                                                                     // 448
                                                                                                                       // 449
	function loadData (data) {                                                                                            // 450
		addZone(data.zones);                                                                                                 // 451
		addLink(data.links);                                                                                                 // 452
		tz.dataVersion = data.version;                                                                                       // 453
	}                                                                                                                     // 454
                                                                                                                       // 455
	function zoneExists (name) {                                                                                          // 456
		if (!zoneExists.didShowError) {                                                                                      // 457
			zoneExists.didShowError = true;                                                                                     // 458
				logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");  // 459
		}                                                                                                                    // 460
		return !!getZone(name);                                                                                              // 461
	}                                                                                                                     // 462
                                                                                                                       // 463
	function needsOffset (m) {                                                                                            // 464
		return !!(m._a && (m._tzm === undefined));                                                                           // 465
	}                                                                                                                     // 466
                                                                                                                       // 467
	function logError (message) {                                                                                         // 468
		if (typeof console !== 'undefined' && typeof console.error === 'function') {                                         // 469
			console.error(message);                                                                                             // 470
		}                                                                                                                    // 471
	}                                                                                                                     // 472
                                                                                                                       // 473
	/************************************                                                                                 // 474
		moment.tz namespace                                                                                                  // 475
	************************************/                                                                                 // 476
                                                                                                                       // 477
	function tz (input) {                                                                                                 // 478
		var args = Array.prototype.slice.call(arguments, 0, -1),                                                             // 479
			name = arguments[arguments.length - 1],                                                                             // 480
			zone = getZone(name),                                                                                               // 481
			out  = moment.utc.apply(null, args);                                                                                // 482
                                                                                                                       // 483
		if (zone && !moment.isMoment(input) && needsOffset(out)) {                                                           // 484
			out.add(zone.parse(out), 'minutes');                                                                                // 485
		}                                                                                                                    // 486
                                                                                                                       // 487
		out.tz(name);                                                                                                        // 488
                                                                                                                       // 489
		return out;                                                                                                          // 490
	}                                                                                                                     // 491
                                                                                                                       // 492
	tz.version      = VERSION;                                                                                            // 493
	tz.dataVersion  = '';                                                                                                 // 494
	tz._zones       = zones;                                                                                              // 495
	tz._links       = links;                                                                                              // 496
	tz._names       = names;                                                                                              // 497
	tz.add          = addZone;                                                                                            // 498
	tz.link         = addLink;                                                                                            // 499
	tz.load         = loadData;                                                                                           // 500
	tz.zone         = getZone;                                                                                            // 501
	tz.zoneExists   = zoneExists; // deprecated in 0.1.0                                                                  // 502
	tz.guess        = guess;                                                                                              // 503
	tz.names        = getNames;                                                                                           // 504
	tz.Zone         = Zone;                                                                                               // 505
	tz.unpack       = unpack;                                                                                             // 506
	tz.unpackBase60 = unpackBase60;                                                                                       // 507
	tz.needsOffset  = needsOffset;                                                                                        // 508
	tz.moveInvalidForward   = true;                                                                                       // 509
	tz.moveAmbiguousForward = false;                                                                                      // 510
                                                                                                                       // 511
	/************************************                                                                                 // 512
		Interface with Moment.js                                                                                             // 513
	************************************/                                                                                 // 514
                                                                                                                       // 515
	var fn = moment.fn;                                                                                                   // 516
                                                                                                                       // 517
	moment.tz = tz;                                                                                                       // 518
                                                                                                                       // 519
	moment.defaultZone = null;                                                                                            // 520
                                                                                                                       // 521
	moment.updateOffset = function (mom, keepTime) {                                                                      // 522
		var zone = moment.defaultZone,                                                                                       // 523
			offset;                                                                                                             // 524
                                                                                                                       // 525
		if (mom._z === undefined) {                                                                                          // 526
			if (zone && needsOffset(mom) && !mom._isUTC) {                                                                      // 527
				mom._d = moment.utc(mom._a)._d;                                                                                    // 528
				mom.utc().add(zone.parse(mom), 'minutes');                                                                         // 529
			}                                                                                                                   // 530
			mom._z = zone;                                                                                                      // 531
		}                                                                                                                    // 532
		if (mom._z) {                                                                                                        // 533
			offset = mom._z.offset(mom);                                                                                        // 534
			if (Math.abs(offset) < 16) {                                                                                        // 535
				offset = offset / 60;                                                                                              // 536
			}                                                                                                                   // 537
			if (mom.utcOffset !== undefined) {                                                                                  // 538
				mom.utcOffset(-offset, keepTime);                                                                                  // 539
			} else {                                                                                                            // 540
				mom.zone(offset, keepTime);                                                                                        // 541
			}                                                                                                                   // 542
		}                                                                                                                    // 543
	};                                                                                                                    // 544
                                                                                                                       // 545
	fn.tz = function (name) {                                                                                             // 546
		if (name) {                                                                                                          // 547
			this._z = getZone(name);                                                                                            // 548
			if (this._z) {                                                                                                      // 549
				moment.updateOffset(this);                                                                                         // 550
			} else {                                                                                                            // 551
				logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");  // 552
			}                                                                                                                   // 553
			return this;                                                                                                        // 554
		}                                                                                                                    // 555
		if (this._z) { return this._z.name; }                                                                                // 556
	};                                                                                                                    // 557
                                                                                                                       // 558
	function abbrWrap (old) {                                                                                             // 559
		return function () {                                                                                                 // 560
			if (this._z) { return this._z.abbr(this); }                                                                         // 561
			return old.call(this);                                                                                              // 562
		};                                                                                                                   // 563
	}                                                                                                                     // 564
                                                                                                                       // 565
	function resetZoneWrap (old) {                                                                                        // 566
		return function () {                                                                                                 // 567
			this._z = null;                                                                                                     // 568
			return old.apply(this, arguments);                                                                                  // 569
		};                                                                                                                   // 570
	}                                                                                                                     // 571
                                                                                                                       // 572
	fn.zoneName = abbrWrap(fn.zoneName);                                                                                  // 573
	fn.zoneAbbr = abbrWrap(fn.zoneAbbr);                                                                                  // 574
	fn.utc      = resetZoneWrap(fn.utc);                                                                                  // 575
                                                                                                                       // 576
	moment.tz.setDefault = function(name) {                                                                               // 577
		if (major < 2 || (major === 2 && minor < 9)) {                                                                       // 578
			logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
		}                                                                                                                    // 580
		moment.defaultZone = name ? getZone(name) : null;                                                                    // 581
		return moment;                                                                                                       // 582
	};                                                                                                                    // 583
                                                                                                                       // 584
	// Cloning a moment should include the _z property.                                                                   // 585
	var momentProperties = moment.momentProperties;                                                                       // 586
	if (Object.prototype.toString.call(momentProperties) === '[object Array]') {                                          // 587
		// moment 2.8.1+                                                                                                     // 588
		momentProperties.push('_z');                                                                                         // 589
		momentProperties.push('_a');                                                                                         // 590
	} else if (momentProperties) {                                                                                        // 591
		// moment 2.7.0                                                                                                      // 592
		momentProperties._z = null;                                                                                          // 593
	}                                                                                                                     // 594
                                                                                                                       // 595
	loadData({                                                                                                            // 596
		"version": "2016c",                                                                                                  // 597
		"zones": [                                                                                                           // 598
			"Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q|48e5",                                                                    // 599
			"Africa/Accra|LMT GMT GHST|.Q 0 -k|012121212121212121212121212121212121212121212121|-26BbX.8 6tzX.8 MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE|41e5",
			"Africa/Nairobi|LMT EAT BEAT BEAUT|-2r.g -30 -2u -2J|01231|-1F3Cr.g 3Dzr.g okMu MFXJ|47e5",                         // 601
			"Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0|26e5",
			"Africa/Lagos|LMT WAT|-d.A -10|01|-22y0d.A|17e6",                                                                   // 603
			"Africa/Bissau|LMT WAT GMT|12.k 10 0|012|-2ldWV.E 2xonV.E|39e4",                                                    // 604
			"Africa/Maputo|LMT CAT|-2a.k -20|01|-2GJea.k|26e5",                                                                 // 605
			"Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6",
			"Africa/Casablanca|LMT WET WEST CET|u.k 0 -10 -10|0121212121212121213121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0|32e5",
			"Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1y7p0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|85e3",
			"Africa/El_Aaiun|LMT WAT WET WEST|Q.M 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0|20e4",
			"Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0|84e5",                           // 610
			"Africa/Khartoum|LMT CAT CAST EAT|-2a.8 -20 -30 -30|01212121212121212121212121212121213|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0|51e5",
			"Africa/Monrovia|MMT LRT GMT|H.8 I.u 0|012|-23Lzg.Q 29s01.m|11e5",                                                  // 612
			"Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0|13e5",                                        // 613
			"Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00|11e5",
			"Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00|20e5",
			"Africa/Windhoek|SWAT SAST SAST CAT WAT WAST|-1u -20 -30 -20 -10 -20|012134545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2GJdu 1Ajdu 1cL0 1SqL0 9NA0 11D0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0|32e4",
			"America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326",
			"America/Anchorage|CAT CAWT CAPT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4",
			"America/Port_of_Spain|LMT AST|46.4 40|01|-2kNvR.U|43e3",                                                           // 619
			"America/Araguaina|LMT BRT BRST|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0|14e4",
			"America/Argentina/Buenos_Aires|CMT ART ARST ART ARST|4g.M 40 30 30 20|0121212121212121212121212121212121212121213434343434343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0",
			"America/Argentina/Catamarca|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
			"America/Argentina/Cordoba|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0",
			"America/Argentina/Jujuy|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 g0p0 10M0 j3c0 uL0",
			"America/Argentina/La_Rioja|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
			"America/Argentina/Mendoza|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|0121212121212121212121212121212121212121213434345656543235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 g0p0 10M0 agM0 Op0 7TX0 uL0",
			"America/Argentina/Rio_Gallegos|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
			"America/Argentina/Salta|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0",
			"America/Argentina/San_Juan|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ak00 m10 8lb0 uL0",
			"America/Argentina/San_Luis|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456536353465653|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 kin0 10M0 ak00 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0",
			"America/Argentina/Tucuman|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|012121212121212121212121212121212121212121343434345434323534343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 4N0 8BX0 uL0 1qN0 WL0",
			"America/Argentina/Ushuaia|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ajA0 8p0 8zb0 uL0",
			"America/Curacao|LMT ANT AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d|15e4",                                                 // 633
			"America/Asuncion|AMT PYT PYT PYST|3O.E 40 30 30|012131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5",
			"America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0|28e2",                  // 635
			"America/Bahia|LMT BRT BRST|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0|27e5",
			"America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3",
			"America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0|28e4",
			"America/Belem|LMT BRT BRST|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|20e5",
			"America/Belize|LMT CST CHDT CDT|5Q.M 60 5u 50|01212121212121212121212121212121212121212121212121213131|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1f0Mu qn0 lxB0 mn0|57e3",
			"America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0|11e2",                           // 641
			"America/Boa_Vista|LMT AMT AMST|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0|62e2",
			"America/Bogota|BMT COT COST|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0|90e5",                                           // 643
			"America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e4",
			"America/Cambridge_Bay|zzz MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e2",
			"America/Campo_Grande|LMT AMT AMST|3C.s 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0|77e4",
			"America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4",
			"America/Caracas|CMT VET VET|4r.E 4u 40|0121|-2kV7w.k 28KM2.k 1IwOu|29e5",                                          // 648
			"America/Cayenne|LMT GFT GFT|3t.k 40 30|012|-2mrwu.E 2gWou.E|58e3",                                                 // 649
			"America/Panama|CMT EST|5j.A 50|01|-2uduE.o|15e5",                                                                  // 650
			"America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5",
			"America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4",
			"America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0|12e5",      // 653
			"America/Creston|MST PST|70 80|010|-29DR0 43B0|53e2",                                                               // 654
			"America/Cuiaba|LMT AMT AMST|3I.k 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0|54e4",
			"America/Danmarkshavn|LMT WGT WGST GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0|8",
			"America/Dawson|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|13e2",
			"America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0|12e3",
			"America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5",
			"America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|01234252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 Jy10 SL0 dnB0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e5",
			"America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|01212121212121341212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 LFB0 1cL0 3Cp0 1cL0 66N0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|10e5",
			"America/Eirunepe|LMT ACT ACST AMT|4D.s 50 40 40|0121212121212121212121212121212131|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0|31e3",
			"America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0|11e5",                             // 663
			"America/Tijuana|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOP0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|20e5",
			"America/Fort_Nelson|PST PDT PWT PPT MST|80 70 70 70 70|01023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010104|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2",
			"America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Fortaleza|LMT BRT BRST|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0|34e5",
			"America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3",
			"America/Godthab|LMT WGT WGST|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3",
			"America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2",
			"America/Grand_Turk|KMT EST EDT AST|57.b 50 40 40|0121212121212121212121212121212121212121212121212121212121212121212121212123|-2l1uQ.N 2HHBQ.N 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2",
			"America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0|13e5",       // 672
			"America/Guayaquil|QMT ECT|5e 50|01|-1yVSK|27e5",                                                                   // 673
			"America/Guyana|LMT GBGT GYT GYT GYT|3Q.E 3J 3J 30 40|01234|-2dvU7.k 24JzQ.k mlc0 Bxbf|80e4",                       // 674
			"America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4",
			"America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5",
			"America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0|64e4",
			"America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Inuvik|zzz PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|35e2",
			"America/Iqaluit|zzz EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|67e2",
			"America/Jamaica|KMT EST EDT|57.b 50 40|0121212121212121212121|-2l1uQ.N 2uM1Q.N 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0|94e4",
			"America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|33e3",
			"America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 Bb0 10N0 2bB0 8in0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/La_Paz|CMT BOST BOT|4w.A 3w.A 40|012|-1x37r.o 13b0|19e5",                                                  // 691
			"America/Lima|LMT PET PEST|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0|11e6",
			"America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp0 1Vb0 3dB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6",
			"America/Maceio|LMT BRT BRST|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0|93e4",
			"America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0|22e5",
			"America/Manaus|LMT AMT AMST|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0|19e5",
			"America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0|39e4",                                       // 697
			"America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|45e4",
			"America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|44e4",
			"America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|85e2",
			"America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|11e5",
			"America/Metlakatla|PST PWT PPT PDT AKST AKDT|80 70 70 70 90 80|0120303030303030303030303030303030454545454545454545454545454545454545454545454|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1hU10 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2",
			"America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6",
			"America/Miquelon|LMT AST PMST PMDT|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2",
			"America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|64e3",
			"America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|41e5",
			"America/Montevideo|MMT UYT UYHST UYST UYT UYHST|3I.I 3u 30 20 30 2u|012121212121212121212121213434343434345454543453434343434343434343434343434343434343434|-20UIf.g 8jzJ.g 1cLu 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1qMu WLu 1qMu 11zu 1o0u 11zu NAu 11bu 2iMu zWu Dq10 19X0 pd0 jz0 cm10 19X0 1fB0 1on0 11d0 1oL0 1nB0 1fzu 1aou 1fzu 1aou 1fzu 3nAu Jb0 3MN0 1SLu 4jzu 2PB0 Lb0 3Dd0 1pb0 ixd0 An0 1MN0 An0 1wp0 On0 1wp0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5",
			"America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e5",
			"America/Nassau|LMT EST EDT|59.u 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2kNuO.u 26XdO.u 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|24e4",
			"America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6",
			"America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|16e2",
			"America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|38e2",
			"America/Noronha|LMT FNT FNST|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|30e2",
			"America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3",
			"America/Pangnirtung|zzz AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2",
			"America/Paramaribo|LMT PMT PMT NEGT SRT SRT|3E.E 3E.Q 3E.A 3u 3u 30|012345|-2nDUj.k Wqo0.c qanX.I 1dmLN.o lzc0|24e4",
			"America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0|42e5",         // 720
			"America/Port-au-Prince|PPMT EST EDT|4N 50 40|01212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5",
			"America/Rio_Branco|LMT ACT ACST AMT|4v.c 50 40 40|01212121212121212121212121212131|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0|31e4",
			"America/Porto_Velho|LMT AMT AMST|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|37e4",
			"America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0|24e5",                                               // 724
			"America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|842",
			"America/Rankin_Inlet|zzz CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e2",
			"America/Recife|LMT BRT BRST|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|33e5",
			"America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0|19e4",
			"America/Resolute|zzz CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|229",
			"America/Santarem|LMT AMT AMST BRT|3C.M 40 30 30|0121212121212121212121212121213|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0|21e4",
			"America/Santiago|SMT CLT CLT CLST CLST|4G.K 50 40 40 30|010203131313131212421242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|62e5",
			"America/Santo_Domingo|SDMT EST EDT EHDT AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00|29e5",
			"America/Sao_Paulo|LMT BRT BRST|36.s 30 20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0|20e6",
			"America/Scoresbysund|LMT CGT CGST EGST EGT|1r.Q 20 10 0 10|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452",
			"America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|90e2",
			"America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4",
			"America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0|16e3",
			"America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0|11e5",                  // 738
			"America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|656",
			"America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4",
			"America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5",
			"America/Whitehorse|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3",
			"America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|66e4",
			"America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|642",
			"America/Yellowknife|zzz MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3",
			"Antarctica/Casey|zzz AWST CAST|0 -80 -b0|012121|-2q00 1DjS0 T90 40P0 KL0|10",                                      // 746
			"Antarctica/Davis|zzz DAVT DAVT|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0|70",                          // 747
			"Antarctica/DumontDUrville|zzz PMT DDUT|0 -a0 -a0|0102|-U0o0 cfq0 bFm0|80",                                         // 748
			"Antarctica/Macquarie|AEST AEDT zzz MIST|-a0 -b0 0 -b0|0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101013|-29E80 19X0 4SL0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0|1",
			"Antarctica/Mawson|zzz MAWT MAWT|0 -60 -50|012|-CEo0 2fyk0|60",                                                     // 750
			"Pacific/Auckland|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5",
			"Antarctica/Palmer|zzz ARST ART ART ARST CLT CLST|0 30 40 30 20 40 30|0121212121234356565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|40",
			"Antarctica/Rothera|zzz ROTT|0 30|01|gOo0|130",                                                                     // 753
			"Antarctica/Syowa|zzz SYOT|0 -30|01|-vs00|20",                                                                      // 754
			"Antarctica/Troll|zzz UTC CEST|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40",
			"Antarctica/Vostok|zzz VOST|0 -60|01|-tjA0|25",                                                                     // 756
			"Europe/Oslo|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e4",
			"Asia/Riyadh|LMT AST|-36.Q -30|01|-TvD6.Q|57e5",                                                                    // 758
			"Asia/Almaty|LMT ALMT ALMT ALMST|-57.M -50 -60 -70|0123232323232323232323232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3Cl0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|15e5",
			"Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|25e5",
			"Asia/Anadyr|LMT ANAT ANAT ANAST ANAST ANAST ANAT|-bN.U -c0 -d0 -e0 -d0 -c0 -b0|01232414141414141414141561414141414141414141414141414141414141561|-1PcbN.U eUnN.U 23CL0 1db0 1cN0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0|13e3",
			"Asia/Aqtau|LMT FORT FORT SHET SHET SHEST AQTT AQTST AQTST AQTT|-3l.4 -40 -50 -50 -60 -60 -50 -60 -50 -40|012345353535353535353536767676898989898989898989896|-1Pc3l.4 eUnl.4 1jcL0 JDc0 1cL0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cN0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 RW0|15e4",
			"Asia/Aqtobe|LMT AKTT AKTT AKTST AKTT AQTT AQTST|-3M.E -40 -50 -60 -60 -50 -60|01234323232323232323232565656565656565656565656565|-1Pc3M.E eUnM.E 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|27e4",
			"Asia/Ashgabat|LMT ASHT ASHT ASHST ASHST TMT TMT|-3R.w -40 -50 -60 -50 -40 -50|012323232323232323232324156|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 ba0 xC0|41e4",
			"Asia/Baghdad|BMT AST ADT|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0|66e5",
			"Asia/Qatar|LMT GST AST|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8|96e4",                                                   // 766
			"Asia/Baku|LMT BAKT BAKT BAKST BAKST AZST AZT AZT AZST|-3j.o -30 -40 -50 -40 -40 -30 -40 -50|01232323232323232323232456578787878787878787878787878787878787878787|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 10K0 c30 1cJ0 1cL0 8wu0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5",
			"Asia/Bangkok|BMT ICT|-6G.4 -70|01|-218SG.4|15e6",                                                                  // 768
			"Asia/Barnaul|LMT +06 +07 +08|-5z -60 -70 -80|0123232323232323232323212323232321212121212121212121212121212121212|-21S5z pCnz 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 p90 LE0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0",
			"Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5",
			"Asia/Bishkek|LMT FRUT FRUT FRUST FRUST KGT KGST KGT|-4W.o -50 -60 -70 -60 -50 -60 -60|01232323232323232323232456565656565656565656565656567|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11c0 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 T8u|87e4",
			"Asia/Brunei|LMT BNT BNT|-7D.E -7u -80|012|-1KITD.E gDc9.E|42e4",                                                   // 772
			"Asia/Kolkata|HMT BURT IST IST|-5R.k -6u -5u -6u|01232|-18LFR.k 1unn.k HB0 7zX0|15e6",                              // 773
			"Asia/Chita|LMT YAKT YAKT YAKST YAKST YAKT IRKT|-7x.Q -80 -90 -a0 -90 -a0 -80|0123232323232323232323241232323232323232323232323232323232323232562|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3re0|33e4",
			"Asia/Choibalsan|LMT ULAT ULAT CHOST CHOT CHOT CHOST|-7C -70 -80 -a0 -90 -80 -90|0123434343434343434343434343434343434343434343456565656565656565656565656565656565656565656565|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|38e3",
			"Asia/Shanghai|CST CDT|-80 -90|01010101010101010|-1c1I0 LX0 16p0 1jz0 1Myp0 Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0|23e6",
			"Asia/Colombo|MMT IST IHST IST LKT LKT|-5j.w -5u -60 -6u -6u -60|01231451|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu|22e5",
			"Asia/Dhaka|HMT BURT IST DACT BDT BDST|-5R.k -6u -5u -60 -60 -70|01213454|-18LFR.k 1unn.k HB0 m6n0 LqMu 1x6n0 1i00|16e6",
			"Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|26e5",
			"Asia/Dili|LMT TLT JST TLT WITA|-8m.k -80 -90 -90 -80|012343|-2le8m.k 1dnXm.k 8HA0 1ew00 Xld0|19e4",                // 780
			"Asia/Dubai|LMT GST|-3F.c -40|01|-21JfF.c|39e5",                                                                    // 781
			"Asia/Dushanbe|LMT DUST DUST DUSST DUSST TJT|-4z.c -50 -60 -70 -60 -50|0123232323232323232323245|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 14N0|76e4",
			"Asia/Gaza|EET EET EEST IST IDT|-20 -30 -30 -20 -30|010101010102020202020202020202023434343434343434343434343430202020202020202020202020202020202020202020202020202020202020202020202020202020202020|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1ny0 1220 1qm0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1qm0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1qm0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1qm0 1220 1ny0 1220 1ny0 1220 1ny0|18e5",
			"Asia/Hebron|EET EET EEST IST IDT|-20 -30 -30 -20 -30|01010101010202020202020202020202343434343434343434343434343020202020202020202020202020202020202020202020202020202020202020202020202020202020202020|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1ny0 1220 1qm0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1qm0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1qm0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1ny0 1220 1qm0 1220 1ny0 1220 1ny0 1220 1ny0|25e4",
			"Asia/Ho_Chi_Minh|LMT PLMT ICT IDT JST|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0|90e5",
			"Asia/Hong_Kong|LMT HKT HKST JST|-7A.G -80 -90 -90|0121312121212121212121212121212121212121212121212121212121212121212121|-2CFHA.G 1sEP6.G 1cL0 ylu 93X0 1qQu 1tX0 Rd0 1In0 NB0 1cL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1kL0 14N0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|73e5",
			"Asia/Hovd|LMT HOVT HOVT HOVST|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|81e3",
			"Asia/Irkutsk|IMT IRKT IRKT IRKST IRKST IRKT|-6V.5 -70 -80 -90 -80 -90|012323232323232323232324123232323232323232323232323232323232323252|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4",
			"Europe/Istanbul|IMT EET EEST TRST TRT|-1U.U -20 -30 -40 -30|012121212121212121212121212121212121212121212121212121234343434342121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSp0 CL0 mN0 1Vz0 1gN0 1pz0 5Rd0 1fz0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1jB0 18L0 1ip0 17z0 qdd0 xX0 3S10 Tz0 dA10 11z0 1o10 11z0 1qN0 11z0 1ze0 11B0 WM0 1qO0 WI0 1nX0 1rB0 10L0 11B0 1in0 17d0 1in0 2pX0 19E0 1fU0 16Q0 1iI0 16Q0 1iI0 1Vd0 pb0 3Kp0 14o0 1df0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e6",
			"Asia/Jakarta|BMT JAVT WIB JST WIB WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu|31e6",
			"Asia/Jayapura|LMT WIT ACST|-9m.M -90 -9u|0121|-1uu9m.M sMMm.M L4nu|26e4",                                          // 791
			"Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|01212121212132121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyMk.E 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 3LB0 Em0 or0 1cn0 1dB0 16n0 10O0 1ja0 1tC0 14o0 1cM0 1a00 11A0 1Na0 An0 1MP0 AJ0 1Kp0 LC0 1oo0 Wl0 EQN0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4",
			"Asia/Kabul|AFT AFT|-40 -4u|01|-10Qs0|46e5",                                                                        // 793
			"Asia/Kamchatka|LMT PETT PETT PETST PETST|-ay.A -b0 -c0 -d0 -c0|01232323232323232323232412323232323232323232323232323232323232412|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0|18e4",
			"Asia/Karachi|LMT IST IST KART PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy00 1cL0 dK10 11b0 1610 1jX0|24e6",
			"Asia/Urumqi|LMT XJT|-5O.k -60|01|-1GgtO.k|32e5",                                                                   // 796
			"Asia/Kathmandu|LMT IST NPT|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g|12e5",                                               // 797
			"Asia/Khandyga|LMT YAKT YAKT YAKST YAKST VLAT VLAST VLAT YAKT|-92.d -80 -90 -a0 -90 -a0 -b0 -b0 -a0|01232323232323232323232412323232323232323232323232565656565656565782|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|66e2",
			"Asia/Krasnoyarsk|LMT KRAT KRAT KRAST KRAST KRAT|-6b.q -60 -70 -80 -70 -80|012323232323232323232324123232323232323232323232323232323232323252|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5",
			"Asia/Kuala_Lumpur|SMT MALT MALST MALT MALT JST MYT|-6T.p -70 -7k -7k -7u -90 -80|01234546|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu 1so1u|71e5",
			"Asia/Kuching|LMT BORT BORT BORTST JST MYT|-7l.k -7u -80 -8k -90 -80|01232323232323232425|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0 1so10|13e4",
			"Asia/Macau|LMT MOT MOST CST|-7y.k -80 -90 -80|0121212121212121212121212121212121212121213|-2le7y.k 1XO34.k 1wn0 Rd0 1wn0 R9u 1wqu U10 1tz0 TVu 1tz0 17gu 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cOu 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cL0 KEp0|57e4",
			"Asia/Magadan|LMT MAGT MAGT MAGST MAGST MAGT|-a3.c -a0 -b0 -c0 -b0 -c0|012323232323232323232324123232323232323232323232323232323232323251|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|95e3",
			"Asia/Makassar|LMT MMT WITA JST|-7V.A -7V.A -80 -90|01232|-21JjV.A vfc0 myLV.A 8ML0|15e5",                          // 804
			"Asia/Manila|PHT PHST JST|-80 -90 -90|010201010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0|24e6",                      // 805
			"Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|32e4",
			"Asia/Novokuznetsk|LMT KRAT KRAT KRAST KRAST NOVST NOVT NOVT|-5M.M -60 -70 -80 -70 -70 -60 -70|012323232323232323232324123232323232323232323232323232323232325672|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0 8Hz0|55e4",
			"Asia/Novosibirsk|LMT NOVT NOVT NOVST NOVST|-5v.E -60 -70 -80 -70|0123232323232323232323241232341414141414141414141414141414141414121|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|15e5",
			"Asia/Omsk|LMT OMST OMST OMSST OMSST OMST|-4R.u -50 -60 -70 -60 -70|012323232323232323232324123232323232323232323232323232323232323252|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|12e5",
			"Asia/Oral|LMT URAT URAT URAST URAT URAST ORAT ORAST ORAT|-3p.o -40 -50 -60 -60 -50 -40 -50 -50|012343232323232323251516767676767676767676767676768|-1Pc3p.o eUnp.o 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 RW0|27e4",
			"Asia/Pontianak|LMT PMT WIB JST WIB WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu|23e4",
			"Asia/Pyongyang|LMT KST JCST JST KST|-8n -8u -90 -90 -90|012341|-2um8n 97XR 12FXu jdA0 2Onc0|29e5",                 // 812
			"Asia/Qyzylorda|LMT KIZT KIZT KIZST KIZT QYZT QYZT QYZST|-4l.Q -40 -50 -60 -60 -50 -60 -70|012343232323232323232325676767676767676767676767676|-1Pc4l.Q eUol.Q 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 dC0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|73e4",
			"Asia/Rangoon|RMT BURT JST MMT|-6o.E -6u -90 -6u|0123|-21Jio.E SmnS.E 7j9u|48e5",                                   // 814
			"Asia/Sakhalin|LMT JCST JST SAKT SAKST SAKST SAKT|-9u.M -90 -90 -b0 -c0 -b0 -a0|01234343434343434343434356343434343435656565656565656565656565656363|-2AGVu.M 1iaMu.M je00 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o10 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|58e4",
			"Asia/Samarkand|LMT SAMT SAMT SAMST TAST UZST UZT|-4r.R -40 -50 -60 -60 -60 -50|01234323232323232323232356|-1Pc4r.R eUor.R 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11x0 bf0|36e4",
			"Asia/Seoul|LMT KST JCST JST KST KDT KDT|-8r.Q -8u -90 -90 -90 -9u -a0|01234151515151515146464|-2um8r.Q 97XV.Q 12FXu jjA0 kKo0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0|23e6",
			"Asia/Singapore|SMT MALT MALST MALT MALT JST SGT SGT|-6T.p -70 -7k -7k -7u -90 -7u -80|012345467|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu Mspu DTA0|56e5",
			"Asia/Srednekolymsk|LMT MAGT MAGT MAGST MAGST MAGT SRET|-ae.Q -a0 -b0 -c0 -b0 -c0 -b0|012323232323232323232324123232323232323232323232323232323232323256|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|35e2",
			"Asia/Taipei|JWST JST CST CDT|-80 -90 -80 -90|01232323232323232323232323232323232323232|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0|74e5",
			"Asia/Tashkent|LMT TAST TAST TASST TASST UZST UZT|-4B.b -50 -60 -70 -60 -60 -50|01232323232323232323232456|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11y0 bf0|23e5",
			"Asia/Tbilisi|TBMT TBIT TBIT TBIST TBIST GEST GET GET GEST|-2X.b -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245656565787878787878787878567|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 3y0 19f0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cM0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0|11e5",
			"Asia/Tehran|LMT TMT IRST IRST IRDT IRDT|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6",
			"Asia/Thimphu|LMT IST BTT|-5W.A -5u -60|012|-Su5W.A 1BGMs.A|79e3",                                                  // 824
			"Asia/Tokyo|JCST JST JDT|-90 -90 -a0|0121212121|-1iw90 pKq0 QL0 1lB0 13X0 1zB0 NX0 1zB0 NX0|38e6",                  // 825
			"Asia/Ulaanbaatar|LMT ULAT ULAT ULAST|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|12e5",
			"Asia/Ust-Nera|LMT YAKT YAKT MAGST MAGT MAGST MAGT MAGT VLAT VLAT|-9w.S -80 -90 -c0 -b0 -b0 -a0 -c0 -b0 -a0|0123434343434343434343456434343434343434343434343434343434343434789|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|65e2",
			"Asia/Vladivostok|LMT VLAT VLAT VLAST VLAST VLAT|-8L.v -90 -a0 -b0 -a0 -b0|012323232323232323232324123232323232323232323232323232323232323252|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4",
			"Asia/Yakutsk|LMT YAKT YAKT YAKST YAKST YAKT|-8C.W -80 -90 -a0 -90 -a0|012323232323232323232324123232323232323232323232323232323232323252|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|28e4",
			"Asia/Yekaterinburg|LMT PMT SVET SVET SVEST SVEST YEKT YEKST YEKT|-42.x -3J.5 -40 -50 -60 -50 -50 -60 -60|0123434343434343434343435267676767676767676767676767676767676767686|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|14e5",
			"Asia/Yerevan|LMT YERT YERT YERST YERST AMST AMT AMT AMST|-2W -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245656565657878787878787878787878787878787|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1am0 2r0 1cJ0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fb0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|13e5",
			"Atlantic/Azores|HMT AZOT AZOST AZOMT AZOT AZOST WET|1S.w 20 10 0 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545456545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldW5.s aPX5.s Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4",
			"Atlantic/Bermuda|LMT AST ADT|4j.i 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1BnRE.G 1LTbE.G 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e3",
			"Atlantic/Canary|LMT CANT WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
			"Atlantic/Cape_Verde|LMT CVT CVST CVT|1y.4 20 10 10|01213|-2xomp.U 1qOMp.U 7zX0 1djf0|50e4",                        // 835
			"Atlantic/Faroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|49e3",
			"Atlantic/Madeira|FMT MADT MADST MADMT WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldWQ.o aPWQ.o Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e4",
			"Atlantic/Reykjavik|LMT IST ISST GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0|12e4",
			"Atlantic/South_Georgia|GST|20|0||30",                                                                              // 839
			"Atlantic/Stanley|SMT FKT FKST FKT FKST|3P.o 40 30 30 20|0121212121212134343212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 U10 1qM0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10|21e2",
			"Australia/Sydney|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5",
			"Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5",
			"Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0|20e5",
			"Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|18e3",
			"Australia/Currie|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|746",
			"Australia/Darwin|ACST ACDT|-9u -au|010101010|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0|12e4",                       // 846
			"Australia/Eucla|ACWST ACWDT|-8J -9J|0101010101010101010|-293kI xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|368",
			"Australia/Hobart|AEST AEDT|-a0 -b0|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 VfB0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|21e4",
			"Australia/Lord_Howe|AEST LHST LHDT LHDT|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347",
			"Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0|10",
			"Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|39e5",
			"Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293jX xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|18e5",
			"CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"Pacific/Easter|EMT EAST EASST EAST EASST|7h.s 70 60 60 50|0121212121212121212121212121234343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|30e2",
			"EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"EST|EST|50|0|",                                                                                                    // 857
			"EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"Europe/Dublin|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g5X0 14p0 1wn0 17d0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
			"Etc/GMT+0|GMT|0|0|",                                                                                               // 860
			"Etc/GMT+1|GMT+1|10|0|",                                                                                            // 861
			"Etc/GMT+10|GMT+10|a0|0|",                                                                                          // 862
			"Etc/GMT+11|GMT+11|b0|0|",                                                                                          // 863
			"Etc/GMT+12|GMT+12|c0|0|",                                                                                          // 864
			"Etc/GMT+2|GMT+2|20|0|",                                                                                            // 865
			"Etc/GMT+3|GMT+3|30|0|",                                                                                            // 866
			"Etc/GMT+4|GMT+4|40|0|",                                                                                            // 867
			"Etc/GMT+5|GMT+5|50|0|",                                                                                            // 868
			"Etc/GMT+6|GMT+6|60|0|",                                                                                            // 869
			"Etc/GMT+7|GMT+7|70|0|",                                                                                            // 870
			"Etc/GMT+8|GMT+8|80|0|",                                                                                            // 871
			"Etc/GMT+9|GMT+9|90|0|",                                                                                            // 872
			"Etc/GMT-1|GMT-1|-10|0|",                                                                                           // 873
			"Etc/GMT-10|GMT-10|-a0|0|",                                                                                         // 874
			"Etc/GMT-11|GMT-11|-b0|0|",                                                                                         // 875
			"Etc/GMT-12|GMT-12|-c0|0|",                                                                                         // 876
			"Etc/GMT-13|GMT-13|-d0|0|",                                                                                         // 877
			"Etc/GMT-14|GMT-14|-e0|0|",                                                                                         // 878
			"Etc/GMT-2|GMT-2|-20|0|",                                                                                           // 879
			"Etc/GMT-3|GMT-3|-30|0|",                                                                                           // 880
			"Etc/GMT-4|GMT-4|-40|0|",                                                                                           // 881
			"Etc/GMT-5|GMT-5|-50|0|",                                                                                           // 882
			"Etc/GMT-6|GMT-6|-60|0|",                                                                                           // 883
			"Etc/GMT-7|GMT-7|-70|0|",                                                                                           // 884
			"Etc/GMT-8|GMT-8|-80|0|",                                                                                           // 885
			"Etc/GMT-9|GMT-9|-90|0|",                                                                                           // 886
			"Etc/UCT|UCT|0|0|",                                                                                                 // 887
			"Etc/UTC|UTC|0|0|",                                                                                                 // 888
			"Europe/Amsterdam|AMT NST NEST NET CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|16e5",
			"Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|79e3",
			"Europe/Astrakhan|LMT +03 +04 +05|-3c.c -30 -40 -50|012323232323232323212121212121212121212121212121212121212121212|-1Pcrc.c eUMc.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Ck0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0",
			"Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5",
			"Europe/London|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6",
			"Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
			"Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e5",
			"Europe/Prague|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 16M0 1lc0 1tA0 17A0 11c0 1io0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e5",
			"Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|21e5",
			"Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|19e5",
			"Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1ip0 17b0 1op0 1tb0 Q2m0 3Ne0 WM0 1fA0 1cM0 1cM0 1oJ0 1dc0 1030 1fA0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1iM0 1fA0 8Ha0 Rb0 1wN0 Rb0 1BB0 Lz0 1C20 LB0 SNX0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5",
			"Europe/Zurich|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e4",
			"Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|012323232323232323234545467676767676767676767323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 gL0 WO0 1cM0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11D0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4",
			"Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
			"Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|30e3",
			"Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
			"Europe/Kaliningrad|CET CEST CET CEST MSK MSD EEST EET FET|-10 -20 -20 -30 -30 -40 -30 -20 -30|0101010101010232454545454545454546767676767676767676767676767676767676767676787|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 Am0 Lb0 1en0 op0 1pNz0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cJ0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|44e4",
			"Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|34e5",
			"Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ldXn.f aPWn.f Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5",
			"Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
			"Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|01010101010101010101010121212121234343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-28dd0 11A0 1go0 19A0 1co0 1dA0 b1A0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 iyo0 Rc0 18o0 1hc0 1io0 1a00 14o0 5aL0 MM0 1vc0 17A0 1i00 1bc0 1eo0 17d0 1in0 17A0 6hA0 10N0 XIL0 1a10 1in0 17d0 19X0 1cN0 1fz0 1a10 1fX0 1cp0 1cO0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e5",
			"Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2as10 M00 1cM0 1cM0 14o0 1o00 WM0 1qM0 17c0 1cM0 M3A0 5M20 WM0 1fA0 1cM0 1cM0 1cM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 Lz0 1C10 Lz0 1EN0 Lz0 1C10 Lz0 1zd0 Oo0 1C00 On0 1cp0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4",
			"Europe/Minsk|MMT EET MSK CEST CET MSD EEST FET|-1O -20 -30 -20 -10 -40 -30 -30|012343432525252525252525252616161616161616161616161616161616161616172|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cK0 1cM0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hy0|19e5",
			"Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e3",
			"Europe/Moscow|MMT MMT MST MDST MSD MSK MSM EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c20 imv.j 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|16e6",
			"Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco8.l cNb8.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6",
			"Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|64e4",
			"Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2as10 M00 1cM0 1cM0 14o0 1o00 WM0 1qM0 17c0 1cM0 M3A0 5M20 WM0 1fA0 1cM0 16K0 1iO0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 Lz0 1C10 Lz0 1EN0 Lz0 1C10 Lz0 1zd0 Oo0 1C00 On0 1C10 Lz0 1zd0 On0 1C10 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|39e5",
			"Europe/Samara|LMT SAMT SAMT KUYT KUYST MSD MSK EEST SAMST SAMST|-3k.k -30 -40 -40 -50 -40 -30 -30 -50 -40|012343434343434343435656712828282828282828282828282828282828282912|-22WNk.k qHak.k bcn0 1Qqo0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cN0 8o0 14j0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0|12e5",
			"Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4",
			"Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
			"Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|15e5",
			"Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e4",
			"Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4",
			"Europe/Ulyanovsk|LMT +03 +04 +05 +02|-3d.A -30 -40 -50 -20|01232323232323232321214121212121212121212121212121212121212121212|-22WNd.A qHad.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2pB0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0",
			"Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e4",
			"Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1a00 1cM0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|18e5",
			"Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646473737373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
			"Europe/Volgograd|LMT TSAT STAT STAT VOLT VOLST VOLST VOLT MSD MSK MSK|-2V.E -30 -30 -40 -40 -50 -40 -30 -40 -30 -40|0123454545454545454676767489898989898989898989898989898989898989a9|-21IqV.E cLXV.E cEM0 1gqn0 Lco0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1fA0 1cM0 2pz0 1cJ0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5",
			"Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5",
			"Europe/Zaporozhye|CUT EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|77e4",
			"HST|HST|a0|0|",                                                                                                    // 930
			"Indian/Chagos|LMT IOT IOT|-4N.E -50 -60|012|-2xosN.E 3AGLN.E|30e2",                                                // 931
			"Indian/Christmas|CXT|-70|0||21e2",                                                                                 // 932
			"Indian/Cocos|CCT|-6u|0||596",                                                                                      // 933
			"Indian/Kerguelen|zzz TFT|0 -50|01|-MG00|130",                                                                      // 934
			"Indian/Mahe|LMT SCT|-3F.M -40|01|-2yO3F.M|79e3",                                                                   // 935
			"Indian/Maldives|MMT MVT|-4S -50|01|-olgS|35e4",                                                                    // 936
			"Indian/Mauritius|LMT MUT MUST|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4",                               // 937
			"Indian/Reunion|LMT RET|-3F.Q -40|01|-2mDDF.Q|84e4",                                                                // 938
			"Pacific/Kwajalein|MHT KWAT MHT|-b0 c0 -c0|012|-AX0 W9X0|14e3",                                                     // 939
			"MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
			"MST|MST|70|0|",                                                                                                    // 941
			"MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"Pacific/Chatham|CHAST CHAST CHADT|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600",
			"PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
			"Pacific/Apia|LMT WSST SST SDT WSDT WSST|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|37e3",
			"Pacific/Bougainville|PGT JST BST|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0|18e4",                                         // 946
			"Pacific/Chuuk|CHUT|-a0|0||49e3",                                                                                   // 947
			"Pacific/Efate|LMT VUT VUST|-bd.g -b0 -c0|0121212121212121212121|-2l9nd.g 2Szcd.g 1cL0 1oN0 10L0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0|66e3",
			"Pacific/Enderbury|PHOT PHOT PHOT|c0 b0 -d0|012|nIc0 B8n0|1",                                                       // 949
			"Pacific/Fakaofo|TKT TKT|b0 -d0|01|1Gfn0|483",                                                                      // 950
			"Pacific/Fiji|LMT FJT FJST|-bT.I -c0 -d0|0121212121212121212121212121212121212121212121212121212121212121|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0 uM0|88e4",
			"Pacific/Funafuti|TVT|-c0|0||45e2",                                                                                 // 952
			"Pacific/Galapagos|LMT ECT GALT|5W.o 50 60|012|-1yVS1.A 2dTz1.A|25e3",                                              // 953
			"Pacific/Gambier|LMT GAMT|8X.M 90|01|-2jof0.c|125",                                                                 // 954
			"Pacific/Guadalcanal|LMT SBT|-aD.M -b0|01|-2joyD.M|11e4",                                                           // 955
			"Pacific/Guam|GST ChST|-a0 -a0|01|1fpq0|17e4",                                                                      // 956
			"Pacific/Honolulu|HST HDT HST|au 9u a0|010102|-1thLu 8x0 lef0 8Pz0 46p0|37e4",                                      // 957
			"Pacific/Kiritimati|LINT LINT LINT|aE a0 -e0|012|nIaE B8nk|51e2",                                                   // 958
			"Pacific/Kosrae|KOST KOST|-b0 -c0|010|-AX0 1bdz0|66e2",                                                             // 959
			"Pacific/Majuro|MHT MHT|-b0 -c0|01|-AX0|28e3",                                                                      // 960
			"Pacific/Marquesas|LMT MART|9i 9u|01|-2joeG|86e2",                                                                  // 961
			"Pacific/Pago_Pago|LMT NST BST SST|bm.M b0 b0 b0|0123|-2nDMB.c 2gVzB.c EyM0|37e2",                                  // 962
			"Pacific/Nauru|LMT NRT JST NRT|-b7.E -bu -90 -c0|01213|-1Xdn7.E PvzB.E 5RCu 1ouJu|10e3",                            // 963
			"Pacific/Niue|NUT NUT NUT|bk bu b0|012|-KfME 17y0a|12e2",                                                           // 964
			"Pacific/Norfolk|NMT NFT NFST NFT|-bc -bu -cu -b0|01213|-Kgbc W01G On0 1COp0|25e4",                                 // 965
			"Pacific/Noumea|LMT NCT NCST|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0|98e3",                   // 966
			"Pacific/Palau|PWT|-90|0||21e3",                                                                                    // 967
			"Pacific/Pitcairn|PNT PST|8u 80|01|18Vku|56",                                                                       // 968
			"Pacific/Pohnpei|PONT|-b0|0||34e3",                                                                                 // 969
			"Pacific/Port_Moresby|PGT|-a0|0||25e4",                                                                             // 970
			"Pacific/Rarotonga|CKT CKHST CKT|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu|13e3",
			"Pacific/Tahiti|LMT TAHT|9W.g a0|01|-2joe1.I|18e4",                                                                 // 972
			"Pacific/Tarawa|GILT|-c0|0||29e3",                                                                                  // 973
			"Pacific/Tongatapu|TOT TOT TOST|-ck -d0 -e0|01212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0|75e3",                     // 974
			"Pacific/Wake|WAKT|-c0|0||16e3",                                                                                    // 975
			"Pacific/Wallis|WFT|-c0|0||94",                                                                                     // 976
			"WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00"
		],                                                                                                                   // 978
		"links": [                                                                                                           // 979
			"Africa/Abidjan|Africa/Bamako",                                                                                     // 980
			"Africa/Abidjan|Africa/Banjul",                                                                                     // 981
			"Africa/Abidjan|Africa/Conakry",                                                                                    // 982
			"Africa/Abidjan|Africa/Dakar",                                                                                      // 983
			"Africa/Abidjan|Africa/Freetown",                                                                                   // 984
			"Africa/Abidjan|Africa/Lome",                                                                                       // 985
			"Africa/Abidjan|Africa/Nouakchott",                                                                                 // 986
			"Africa/Abidjan|Africa/Ouagadougou",                                                                                // 987
			"Africa/Abidjan|Africa/Sao_Tome",                                                                                   // 988
			"Africa/Abidjan|Africa/Timbuktu",                                                                                   // 989
			"Africa/Abidjan|Atlantic/St_Helena",                                                                                // 990
			"Africa/Cairo|Egypt",                                                                                               // 991
			"Africa/Johannesburg|Africa/Maseru",                                                                                // 992
			"Africa/Johannesburg|Africa/Mbabane",                                                                               // 993
			"Africa/Khartoum|Africa/Juba",                                                                                      // 994
			"Africa/Lagos|Africa/Bangui",                                                                                       // 995
			"Africa/Lagos|Africa/Brazzaville",                                                                                  // 996
			"Africa/Lagos|Africa/Douala",                                                                                       // 997
			"Africa/Lagos|Africa/Kinshasa",                                                                                     // 998
			"Africa/Lagos|Africa/Libreville",                                                                                   // 999
			"Africa/Lagos|Africa/Luanda",                                                                                       // 1000
			"Africa/Lagos|Africa/Malabo",                                                                                       // 1001
			"Africa/Lagos|Africa/Niamey",                                                                                       // 1002
			"Africa/Lagos|Africa/Porto-Novo",                                                                                   // 1003
			"Africa/Maputo|Africa/Blantyre",                                                                                    // 1004
			"Africa/Maputo|Africa/Bujumbura",                                                                                   // 1005
			"Africa/Maputo|Africa/Gaborone",                                                                                    // 1006
			"Africa/Maputo|Africa/Harare",                                                                                      // 1007
			"Africa/Maputo|Africa/Kigali",                                                                                      // 1008
			"Africa/Maputo|Africa/Lubumbashi",                                                                                  // 1009
			"Africa/Maputo|Africa/Lusaka",                                                                                      // 1010
			"Africa/Nairobi|Africa/Addis_Ababa",                                                                                // 1011
			"Africa/Nairobi|Africa/Asmara",                                                                                     // 1012
			"Africa/Nairobi|Africa/Asmera",                                                                                     // 1013
			"Africa/Nairobi|Africa/Dar_es_Salaam",                                                                              // 1014
			"Africa/Nairobi|Africa/Djibouti",                                                                                   // 1015
			"Africa/Nairobi|Africa/Kampala",                                                                                    // 1016
			"Africa/Nairobi|Africa/Mogadishu",                                                                                  // 1017
			"Africa/Nairobi|Indian/Antananarivo",                                                                               // 1018
			"Africa/Nairobi|Indian/Comoro",                                                                                     // 1019
			"Africa/Nairobi|Indian/Mayotte",                                                                                    // 1020
			"Africa/Tripoli|Libya",                                                                                             // 1021
			"America/Adak|America/Atka",                                                                                        // 1022
			"America/Adak|US/Aleutian",                                                                                         // 1023
			"America/Anchorage|US/Alaska",                                                                                      // 1024
			"America/Argentina/Buenos_Aires|America/Buenos_Aires",                                                              // 1025
			"America/Argentina/Catamarca|America/Argentina/ComodRivadavia",                                                     // 1026
			"America/Argentina/Catamarca|America/Catamarca",                                                                    // 1027
			"America/Argentina/Cordoba|America/Cordoba",                                                                        // 1028
			"America/Argentina/Cordoba|America/Rosario",                                                                        // 1029
			"America/Argentina/Jujuy|America/Jujuy",                                                                            // 1030
			"America/Argentina/Mendoza|America/Mendoza",                                                                        // 1031
			"America/Atikokan|America/Coral_Harbour",                                                                           // 1032
			"America/Chicago|US/Central",                                                                                       // 1033
			"America/Curacao|America/Aruba",                                                                                    // 1034
			"America/Curacao|America/Kralendijk",                                                                               // 1035
			"America/Curacao|America/Lower_Princes",                                                                            // 1036
			"America/Denver|America/Shiprock",                                                                                  // 1037
			"America/Denver|Navajo",                                                                                            // 1038
			"America/Denver|US/Mountain",                                                                                       // 1039
			"America/Detroit|US/Michigan",                                                                                      // 1040
			"America/Edmonton|Canada/Mountain",                                                                                 // 1041
			"America/Fort_Wayne|America/Indiana/Indianapolis",                                                                  // 1042
			"America/Fort_Wayne|America/Indianapolis",                                                                          // 1043
			"America/Fort_Wayne|US/East-Indiana",                                                                               // 1044
			"America/Halifax|Canada/Atlantic",                                                                                  // 1045
			"America/Havana|Cuba",                                                                                              // 1046
			"America/Indiana/Knox|America/Knox_IN",                                                                             // 1047
			"America/Indiana/Knox|US/Indiana-Starke",                                                                           // 1048
			"America/Jamaica|Jamaica",                                                                                          // 1049
			"America/Kentucky/Louisville|America/Louisville",                                                                   // 1050
			"America/Los_Angeles|US/Pacific",                                                                                   // 1051
			"America/Los_Angeles|US/Pacific-New",                                                                               // 1052
			"America/Manaus|Brazil/West",                                                                                       // 1053
			"America/Mazatlan|Mexico/BajaSur",                                                                                  // 1054
			"America/Mexico_City|Mexico/General",                                                                               // 1055
			"America/New_York|US/Eastern",                                                                                      // 1056
			"America/Noronha|Brazil/DeNoronha",                                                                                 // 1057
			"America/Panama|America/Cayman",                                                                                    // 1058
			"America/Phoenix|US/Arizona",                                                                                       // 1059
			"America/Port_of_Spain|America/Anguilla",                                                                           // 1060
			"America/Port_of_Spain|America/Antigua",                                                                            // 1061
			"America/Port_of_Spain|America/Dominica",                                                                           // 1062
			"America/Port_of_Spain|America/Grenada",                                                                            // 1063
			"America/Port_of_Spain|America/Guadeloupe",                                                                         // 1064
			"America/Port_of_Spain|America/Marigot",                                                                            // 1065
			"America/Port_of_Spain|America/Montserrat",                                                                         // 1066
			"America/Port_of_Spain|America/St_Barthelemy",                                                                      // 1067
			"America/Port_of_Spain|America/St_Kitts",                                                                           // 1068
			"America/Port_of_Spain|America/St_Lucia",                                                                           // 1069
			"America/Port_of_Spain|America/St_Thomas",                                                                          // 1070
			"America/Port_of_Spain|America/St_Vincent",                                                                         // 1071
			"America/Port_of_Spain|America/Tortola",                                                                            // 1072
			"America/Port_of_Spain|America/Virgin",                                                                             // 1073
			"America/Regina|Canada/East-Saskatchewan",                                                                          // 1074
			"America/Regina|Canada/Saskatchewan",                                                                               // 1075
			"America/Rio_Branco|America/Porto_Acre",                                                                            // 1076
			"America/Rio_Branco|Brazil/Acre",                                                                                   // 1077
			"America/Santiago|Chile/Continental",                                                                               // 1078
			"America/Sao_Paulo|Brazil/East",                                                                                    // 1079
			"America/St_Johns|Canada/Newfoundland",                                                                             // 1080
			"America/Tijuana|America/Ensenada",                                                                                 // 1081
			"America/Tijuana|America/Santa_Isabel",                                                                             // 1082
			"America/Tijuana|Mexico/BajaNorte",                                                                                 // 1083
			"America/Toronto|America/Montreal",                                                                                 // 1084
			"America/Toronto|Canada/Eastern",                                                                                   // 1085
			"America/Vancouver|Canada/Pacific",                                                                                 // 1086
			"America/Whitehorse|Canada/Yukon",                                                                                  // 1087
			"America/Winnipeg|Canada/Central",                                                                                  // 1088
			"Asia/Ashgabat|Asia/Ashkhabad",                                                                                     // 1089
			"Asia/Bangkok|Asia/Phnom_Penh",                                                                                     // 1090
			"Asia/Bangkok|Asia/Vientiane",                                                                                      // 1091
			"Asia/Dhaka|Asia/Dacca",                                                                                            // 1092
			"Asia/Dubai|Asia/Muscat",                                                                                           // 1093
			"Asia/Ho_Chi_Minh|Asia/Saigon",                                                                                     // 1094
			"Asia/Hong_Kong|Hongkong",                                                                                          // 1095
			"Asia/Jerusalem|Asia/Tel_Aviv",                                                                                     // 1096
			"Asia/Jerusalem|Israel",                                                                                            // 1097
			"Asia/Kathmandu|Asia/Katmandu",                                                                                     // 1098
			"Asia/Kolkata|Asia/Calcutta",                                                                                       // 1099
			"Asia/Macau|Asia/Macao",                                                                                            // 1100
			"Asia/Makassar|Asia/Ujung_Pandang",                                                                                 // 1101
			"Asia/Nicosia|Europe/Nicosia",                                                                                      // 1102
			"Asia/Qatar|Asia/Bahrain",                                                                                          // 1103
			"Asia/Riyadh|Asia/Aden",                                                                                            // 1104
			"Asia/Riyadh|Asia/Kuwait",                                                                                          // 1105
			"Asia/Seoul|ROK",                                                                                                   // 1106
			"Asia/Shanghai|Asia/Chongqing",                                                                                     // 1107
			"Asia/Shanghai|Asia/Chungking",                                                                                     // 1108
			"Asia/Shanghai|Asia/Harbin",                                                                                        // 1109
			"Asia/Shanghai|PRC",                                                                                                // 1110
			"Asia/Singapore|Singapore",                                                                                         // 1111
			"Asia/Taipei|ROC",                                                                                                  // 1112
			"Asia/Tehran|Iran",                                                                                                 // 1113
			"Asia/Thimphu|Asia/Thimbu",                                                                                         // 1114
			"Asia/Tokyo|Japan",                                                                                                 // 1115
			"Asia/Ulaanbaatar|Asia/Ulan_Bator",                                                                                 // 1116
			"Asia/Urumqi|Asia/Kashgar",                                                                                         // 1117
			"Atlantic/Faroe|Atlantic/Faeroe",                                                                                   // 1118
			"Atlantic/Reykjavik|Iceland",                                                                                       // 1119
			"Australia/Adelaide|Australia/South",                                                                               // 1120
			"Australia/Brisbane|Australia/Queensland",                                                                          // 1121
			"Australia/Broken_Hill|Australia/Yancowinna",                                                                       // 1122
			"Australia/Darwin|Australia/North",                                                                                 // 1123
			"Australia/Hobart|Australia/Tasmania",                                                                              // 1124
			"Australia/Lord_Howe|Australia/LHI",                                                                                // 1125
			"Australia/Melbourne|Australia/Victoria",                                                                           // 1126
			"Australia/Perth|Australia/West",                                                                                   // 1127
			"Australia/Sydney|Australia/ACT",                                                                                   // 1128
			"Australia/Sydney|Australia/Canberra",                                                                              // 1129
			"Australia/Sydney|Australia/NSW",                                                                                   // 1130
			"Etc/GMT+0|Etc/GMT",                                                                                                // 1131
			"Etc/GMT+0|Etc/GMT-0",                                                                                              // 1132
			"Etc/GMT+0|Etc/GMT0",                                                                                               // 1133
			"Etc/GMT+0|Etc/Greenwich",                                                                                          // 1134
			"Etc/GMT+0|GMT",                                                                                                    // 1135
			"Etc/GMT+0|GMT+0",                                                                                                  // 1136
			"Etc/GMT+0|GMT-0",                                                                                                  // 1137
			"Etc/GMT+0|GMT0",                                                                                                   // 1138
			"Etc/GMT+0|Greenwich",                                                                                              // 1139
			"Etc/UCT|UCT",                                                                                                      // 1140
			"Etc/UTC|Etc/Universal",                                                                                            // 1141
			"Etc/UTC|Etc/Zulu",                                                                                                 // 1142
			"Etc/UTC|UTC",                                                                                                      // 1143
			"Etc/UTC|Universal",                                                                                                // 1144
			"Etc/UTC|Zulu",                                                                                                     // 1145
			"Europe/Belgrade|Europe/Ljubljana",                                                                                 // 1146
			"Europe/Belgrade|Europe/Podgorica",                                                                                 // 1147
			"Europe/Belgrade|Europe/Sarajevo",                                                                                  // 1148
			"Europe/Belgrade|Europe/Skopje",                                                                                    // 1149
			"Europe/Belgrade|Europe/Zagreb",                                                                                    // 1150
			"Europe/Chisinau|Europe/Tiraspol",                                                                                  // 1151
			"Europe/Dublin|Eire",                                                                                               // 1152
			"Europe/Helsinki|Europe/Mariehamn",                                                                                 // 1153
			"Europe/Istanbul|Asia/Istanbul",                                                                                    // 1154
			"Europe/Istanbul|Turkey",                                                                                           // 1155
			"Europe/Lisbon|Portugal",                                                                                           // 1156
			"Europe/London|Europe/Belfast",                                                                                     // 1157
			"Europe/London|Europe/Guernsey",                                                                                    // 1158
			"Europe/London|Europe/Isle_of_Man",                                                                                 // 1159
			"Europe/London|Europe/Jersey",                                                                                      // 1160
			"Europe/London|GB",                                                                                                 // 1161
			"Europe/London|GB-Eire",                                                                                            // 1162
			"Europe/Moscow|W-SU",                                                                                               // 1163
			"Europe/Oslo|Arctic/Longyearbyen",                                                                                  // 1164
			"Europe/Oslo|Atlantic/Jan_Mayen",                                                                                   // 1165
			"Europe/Prague|Europe/Bratislava",                                                                                  // 1166
			"Europe/Rome|Europe/San_Marino",                                                                                    // 1167
			"Europe/Rome|Europe/Vatican",                                                                                       // 1168
			"Europe/Warsaw|Poland",                                                                                             // 1169
			"Europe/Zurich|Europe/Busingen",                                                                                    // 1170
			"Europe/Zurich|Europe/Vaduz",                                                                                       // 1171
			"Pacific/Auckland|Antarctica/McMurdo",                                                                              // 1172
			"Pacific/Auckland|Antarctica/South_Pole",                                                                           // 1173
			"Pacific/Auckland|NZ",                                                                                              // 1174
			"Pacific/Chatham|NZ-CHAT",                                                                                          // 1175
			"Pacific/Chuuk|Pacific/Truk",                                                                                       // 1176
			"Pacific/Chuuk|Pacific/Yap",                                                                                        // 1177
			"Pacific/Easter|Chile/EasterIsland",                                                                                // 1178
			"Pacific/Guam|Pacific/Saipan",                                                                                      // 1179
			"Pacific/Honolulu|Pacific/Johnston",                                                                                // 1180
			"Pacific/Honolulu|US/Hawaii",                                                                                       // 1181
			"Pacific/Kwajalein|Kwajalein",                                                                                      // 1182
			"Pacific/Pago_Pago|Pacific/Midway",                                                                                 // 1183
			"Pacific/Pago_Pago|Pacific/Samoa",                                                                                  // 1184
			"Pacific/Pago_Pago|US/Samoa",                                                                                       // 1185
			"Pacific/Pohnpei|Pacific/Ponape"                                                                                    // 1186
		]                                                                                                                    // 1187
	});                                                                                                                   // 1188
                                                                                                                       // 1189
                                                                                                                       // 1190
	return moment;                                                                                                        // 1191
}));                                                                                                                   // 1192
                                                                                                                       // 1193
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jeeeyul_moment-with-langs/lib/export-moment.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
//This file exposes moment so that it works with Meteor 0.6.5's package system.                                        // 1
if (typeof Package !== "undefined") {                                                                                  // 2
	moment = this.moment;                                                                                                 // 3
}                                                                                                                      // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['jeeeyul:moment-with-langs'] = {}, {
  moment: moment
});

})();
